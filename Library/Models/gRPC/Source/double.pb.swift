// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bilibili/app/card/v1/double.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bilibili_App_Card_V1_DoubleCards {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var card: Bilibili_App_Card_V1_DoubleCards.OneOf_Card? = nil

  var smallCoverV2: Bilibili_App_Card_V1_SmallCoverV2 {
    get {
      if case .smallCoverV2(let v)? = card {return v}
      return Bilibili_App_Card_V1_SmallCoverV2()
    }
    set {card = .smallCoverV2(newValue)}
  }

  var onePicV2: Bilibili_App_Card_V1_OnePicV2 {
    get {
      if case .onePicV2(let v)? = card {return v}
      return Bilibili_App_Card_V1_OnePicV2()
    }
    set {card = .onePicV2(newValue)}
  }

  var threePicV2: Bilibili_App_Card_V1_ThreePicV2 {
    get {
      if case .threePicV2(let v)? = card {return v}
      return Bilibili_App_Card_V1_ThreePicV2()
    }
    set {card = .threePicV2(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Card: Equatable {
    case smallCoverV2(Bilibili_App_Card_V1_SmallCoverV2)
    case onePicV2(Bilibili_App_Card_V1_OnePicV2)
    case threePicV2(Bilibili_App_Card_V1_ThreePicV2)

  #if !swift(>=4.1)
    static func ==(lhs: Bilibili_App_Card_V1_DoubleCards.OneOf_Card, rhs: Bilibili_App_Card_V1_DoubleCards.OneOf_Card) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.smallCoverV2, .smallCoverV2): return {
        guard case .smallCoverV2(let l) = lhs, case .smallCoverV2(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.onePicV2, .onePicV2): return {
        guard case .onePicV2(let l) = lhs, case .onePicV2(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.threePicV2, .threePicV2): return {
        guard case .threePicV2(let l) = lhs, case .threePicV2(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Bilibili_App_Card_V1_SmallCoverV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _storage._base ?? Bilibili_App_Card_V1_Base()}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_uniqueStorage()._base = nil}

  var coverGif: String {
    get {return _storage._coverGif}
    set {_uniqueStorage()._coverGif = newValue}
  }

  var coverBlur: Int32 {
    get {return _storage._coverBlur}
    set {_uniqueStorage()._coverBlur = newValue}
  }

  var coverLeftText1: String {
    get {return _storage._coverLeftText1}
    set {_uniqueStorage()._coverLeftText1 = newValue}
  }

  var coverLeftIcon1: Int32 {
    get {return _storage._coverLeftIcon1}
    set {_uniqueStorage()._coverLeftIcon1 = newValue}
  }

  var coverLeftText2: String {
    get {return _storage._coverLeftText2}
    set {_uniqueStorage()._coverLeftText2 = newValue}
  }

  var coverLeftIcon2: Int32 {
    get {return _storage._coverLeftIcon2}
    set {_uniqueStorage()._coverLeftIcon2 = newValue}
  }

  var coverRightText: String {
    get {return _storage._coverRightText}
    set {_uniqueStorage()._coverRightText = newValue}
  }

  var coverRightIcon: Int32 {
    get {return _storage._coverRightIcon}
    set {_uniqueStorage()._coverRightIcon = newValue}
  }

  var coverRightBackgroundColor: String {
    get {return _storage._coverRightBackgroundColor}
    set {_uniqueStorage()._coverRightBackgroundColor = newValue}
  }

  var subtitle: String {
    get {return _storage._subtitle}
    set {_uniqueStorage()._subtitle = newValue}
  }

  var badge: String {
    get {return _storage._badge}
    set {_uniqueStorage()._badge = newValue}
  }

  var rcmdReason: String {
    get {return _storage._rcmdReason}
    set {_uniqueStorage()._rcmdReason = newValue}
  }

  var desc: String {
    get {return _storage._desc}
    set {_uniqueStorage()._desc = newValue}
  }

  var avatar: Bilibili_App_Card_V1_Avatar {
    get {return _storage._avatar ?? Bilibili_App_Card_V1_Avatar()}
    set {_uniqueStorage()._avatar = newValue}
  }
  /// Returns true if `avatar` has been explicitly set.
  var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
  mutating func clearAvatar() {_uniqueStorage()._avatar = nil}

  var officialIcon: Int32 {
    get {return _storage._officialIcon}
    set {_uniqueStorage()._officialIcon = newValue}
  }

  var canPlay: Int32 {
    get {return _storage._canPlay}
    set {_uniqueStorage()._canPlay = newValue}
  }

  var rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._rcmdReasonStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._rcmdReasonStyle = newValue}
  }
  /// Returns true if `rcmdReasonStyle` has been explicitly set.
  var hasRcmdReasonStyle: Bool {return _storage._rcmdReasonStyle != nil}
  /// Clears the value of `rcmdReasonStyle`. Subsequent reads from it will return its default value.
  mutating func clearRcmdReasonStyle() {_uniqueStorage()._rcmdReasonStyle = nil}

  var rcmdReasonStyleV2: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._rcmdReasonStyleV2 ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._rcmdReasonStyleV2 = newValue}
  }
  /// Returns true if `rcmdReasonStyleV2` has been explicitly set.
  var hasRcmdReasonStyleV2: Bool {return _storage._rcmdReasonStyleV2 != nil}
  /// Clears the value of `rcmdReasonStyleV2`. Subsequent reads from it will return its default value.
  mutating func clearRcmdReasonStyleV2() {_uniqueStorage()._rcmdReasonStyleV2 = nil}

  var likeButton: Bilibili_App_Card_V1_LikeButton {
    get {return _storage._likeButton ?? Bilibili_App_Card_V1_LikeButton()}
    set {_uniqueStorage()._likeButton = newValue}
  }
  /// Returns true if `likeButton` has been explicitly set.
  var hasLikeButton: Bool {return _storage._likeButton != nil}
  /// Clears the value of `likeButton`. Subsequent reads from it will return its default value.
  mutating func clearLikeButton() {_uniqueStorage()._likeButton = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_App_Card_V1_SmallCoverV3 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _storage._base ?? Bilibili_App_Card_V1_Base()}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_uniqueStorage()._base = nil}

  var avatar: Bilibili_App_Card_V1_Avatar {
    get {return _storage._avatar ?? Bilibili_App_Card_V1_Avatar()}
    set {_uniqueStorage()._avatar = newValue}
  }
  /// Returns true if `avatar` has been explicitly set.
  var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
  mutating func clearAvatar() {_uniqueStorage()._avatar = nil}

  var coverLeftText: String {
    get {return _storage._coverLeftText}
    set {_uniqueStorage()._coverLeftText = newValue}
  }

  var coverRightButton: Bilibili_App_Card_V1_Button {
    get {return _storage._coverRightButton ?? Bilibili_App_Card_V1_Button()}
    set {_uniqueStorage()._coverRightButton = newValue}
  }
  /// Returns true if `coverRightButton` has been explicitly set.
  var hasCoverRightButton: Bool {return _storage._coverRightButton != nil}
  /// Clears the value of `coverRightButton`. Subsequent reads from it will return its default value.
  mutating func clearCoverRightButton() {_uniqueStorage()._coverRightButton = nil}

  var rcmdReason: String {
    get {return _storage._rcmdReason}
    set {_uniqueStorage()._rcmdReason = newValue}
  }

  var desc: String {
    get {return _storage._desc}
    set {_uniqueStorage()._desc = newValue}
  }

  var officialIcon: Int32 {
    get {return _storage._officialIcon}
    set {_uniqueStorage()._officialIcon = newValue}
  }

  var canPlay: Int32 {
    get {return _storage._canPlay}
    set {_uniqueStorage()._canPlay = newValue}
  }

  var rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._rcmdReasonStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._rcmdReasonStyle = newValue}
  }
  /// Returns true if `rcmdReasonStyle` has been explicitly set.
  var hasRcmdReasonStyle: Bool {return _storage._rcmdReasonStyle != nil}
  /// Clears the value of `rcmdReasonStyle`. Subsequent reads from it will return its default value.
  mutating func clearRcmdReasonStyle() {_uniqueStorage()._rcmdReasonStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_App_Card_V1_MiddleCoverV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _base ?? Bilibili_App_Card_V1_Base()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var ratio: Int32 = 0

  var desc: String = String()

  var badge: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Bilibili_App_Card_V1_Base? = nil
}

struct Bilibili_App_Card_V1_LargeCoverV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _storage._base ?? Bilibili_App_Card_V1_Base()}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_uniqueStorage()._base = nil}

  var avatar: Bilibili_App_Card_V1_Avatar {
    get {return _storage._avatar ?? Bilibili_App_Card_V1_Avatar()}
    set {_uniqueStorage()._avatar = newValue}
  }
  /// Returns true if `avatar` has been explicitly set.
  var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
  mutating func clearAvatar() {_uniqueStorage()._avatar = nil}

  var badge: String {
    get {return _storage._badge}
    set {_uniqueStorage()._badge = newValue}
  }

  var coverRightButton: Bilibili_App_Card_V1_Button {
    get {return _storage._coverRightButton ?? Bilibili_App_Card_V1_Button()}
    set {_uniqueStorage()._coverRightButton = newValue}
  }
  /// Returns true if `coverRightButton` has been explicitly set.
  var hasCoverRightButton: Bool {return _storage._coverRightButton != nil}
  /// Clears the value of `coverRightButton`. Subsequent reads from it will return its default value.
  mutating func clearCoverRightButton() {_uniqueStorage()._coverRightButton = nil}

  var coverLeftText1: String {
    get {return _storage._coverLeftText1}
    set {_uniqueStorage()._coverLeftText1 = newValue}
  }

  var coverLeftIcon1: Int32 {
    get {return _storage._coverLeftIcon1}
    set {_uniqueStorage()._coverLeftIcon1 = newValue}
  }

  var coverLeftText2: String {
    get {return _storage._coverLeftText2}
    set {_uniqueStorage()._coverLeftText2 = newValue}
  }

  var coverLeftIcon2: Int32 {
    get {return _storage._coverLeftIcon2}
    set {_uniqueStorage()._coverLeftIcon2 = newValue}
  }

  var rcmdReason: String {
    get {return _storage._rcmdReason}
    set {_uniqueStorage()._rcmdReason = newValue}
  }

  var officialIcon: Int32 {
    get {return _storage._officialIcon}
    set {_uniqueStorage()._officialIcon = newValue}
  }

  var canPlay: Int32 {
    get {return _storage._canPlay}
    set {_uniqueStorage()._canPlay = newValue}
  }

  var rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._rcmdReasonStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._rcmdReasonStyle = newValue}
  }
  /// Returns true if `rcmdReasonStyle` has been explicitly set.
  var hasRcmdReasonStyle: Bool {return _storage._rcmdReasonStyle != nil}
  /// Clears the value of `rcmdReasonStyle`. Subsequent reads from it will return its default value.
  mutating func clearRcmdReasonStyle() {_uniqueStorage()._rcmdReasonStyle = nil}

  var showTop: Int32 {
    get {return _storage._showTop}
    set {_uniqueStorage()._showTop = newValue}
  }

  var showBottom: Int32 {
    get {return _storage._showBottom}
    set {_uniqueStorage()._showBottom = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_App_Card_V1_ThreeItemV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _base ?? Bilibili_App_Card_V1_Base()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var titleIcon: Int32 = 0

  var moreUri: String = String()

  var moreText: String = String()

  var items: [Bilibili_App_Card_V1_ThreeItemV2Item] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Bilibili_App_Card_V1_Base? = nil
}

struct Bilibili_App_Card_V1_ThreeItemV2Item {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _base ?? Bilibili_App_Card_V1_Base()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var coverLeftIcon: Int32 = 0

  var descText1: String = String()

  var descIcon1: Int32 = 0

  var descText2: String = String()

  var descIcon2: Int32 = 0

  var badge: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Bilibili_App_Card_V1_Base? = nil
}

struct Bilibili_App_Card_V1_SmallCoverV4 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _base ?? Bilibili_App_Card_V1_Base()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var coverBadge: String = String()

  var desc: String = String()

  var titleRightText: String = String()

  var titleRightPic: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Bilibili_App_Card_V1_Base? = nil
}

struct Bilibili_App_Card_V1_TwoItemV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _base ?? Bilibili_App_Card_V1_Base()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var items: [Bilibili_App_Card_V1_TwoItemV2Item] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Bilibili_App_Card_V1_Base? = nil
}

struct Bilibili_App_Card_V1_TwoItemV2Item {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _base ?? Bilibili_App_Card_V1_Base()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var badge: String = String()

  var coverLeftText1: String = String()

  var coverLeftIcon1: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Bilibili_App_Card_V1_Base? = nil
}

struct Bilibili_App_Card_V1_MultiItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _base ?? Bilibili_App_Card_V1_Base()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var moreUri: String = String()

  var moreText: String = String()

  var items: [Bilibili_App_Card_V1_DoubleCards] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Bilibili_App_Card_V1_Base? = nil
}

struct Bilibili_App_Card_V1_ThreePicV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _storage._base ?? Bilibili_App_Card_V1_Base()}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_uniqueStorage()._base = nil}

  var leftCover: String {
    get {return _storage._leftCover}
    set {_uniqueStorage()._leftCover = newValue}
  }

  var rightCover1: String {
    get {return _storage._rightCover1}
    set {_uniqueStorage()._rightCover1 = newValue}
  }

  var rightCover2: String {
    get {return _storage._rightCover2}
    set {_uniqueStorage()._rightCover2 = newValue}
  }

  var coverLeftText1: String {
    get {return _storage._coverLeftText1}
    set {_uniqueStorage()._coverLeftText1 = newValue}
  }

  var coverLeftIcon1: Int32 {
    get {return _storage._coverLeftIcon1}
    set {_uniqueStorage()._coverLeftIcon1 = newValue}
  }

  var coverLeftText2: String {
    get {return _storage._coverLeftText2}
    set {_uniqueStorage()._coverLeftText2 = newValue}
  }

  var coverLeftIcon2: Int32 {
    get {return _storage._coverLeftIcon2}
    set {_uniqueStorage()._coverLeftIcon2 = newValue}
  }

  var coverRightText: String {
    get {return _storage._coverRightText}
    set {_uniqueStorage()._coverRightText = newValue}
  }

  var coverRightIcon: Int32 {
    get {return _storage._coverRightIcon}
    set {_uniqueStorage()._coverRightIcon = newValue}
  }

  var coverRightBackgroundColor: String {
    get {return _storage._coverRightBackgroundColor}
    set {_uniqueStorage()._coverRightBackgroundColor = newValue}
  }

  var badge: String {
    get {return _storage._badge}
    set {_uniqueStorage()._badge = newValue}
  }

  var rcmdReason: String {
    get {return _storage._rcmdReason}
    set {_uniqueStorage()._rcmdReason = newValue}
  }

  var desc: String {
    get {return _storage._desc}
    set {_uniqueStorage()._desc = newValue}
  }

  var avatar: Bilibili_App_Card_V1_Avatar {
    get {return _storage._avatar ?? Bilibili_App_Card_V1_Avatar()}
    set {_uniqueStorage()._avatar = newValue}
  }
  /// Returns true if `avatar` has been explicitly set.
  var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
  mutating func clearAvatar() {_uniqueStorage()._avatar = nil}

  var rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._rcmdReasonStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._rcmdReasonStyle = newValue}
  }
  /// Returns true if `rcmdReasonStyle` has been explicitly set.
  var hasRcmdReasonStyle: Bool {return _storage._rcmdReasonStyle != nil}
  /// Clears the value of `rcmdReasonStyle`. Subsequent reads from it will return its default value.
  mutating func clearRcmdReasonStyle() {_uniqueStorage()._rcmdReasonStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_App_Card_V1_OnePicV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _storage._base ?? Bilibili_App_Card_V1_Base()}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_uniqueStorage()._base = nil}

  var coverLeftIcon1: Int32 {
    get {return _storage._coverLeftIcon1}
    set {_uniqueStorage()._coverLeftIcon1 = newValue}
  }

  var coverLeftText2: String {
    get {return _storage._coverLeftText2}
    set {_uniqueStorage()._coverLeftText2 = newValue}
  }

  var coverRightText: String {
    get {return _storage._coverRightText}
    set {_uniqueStorage()._coverRightText = newValue}
  }

  var coverRightIcon: Int32 {
    get {return _storage._coverRightIcon}
    set {_uniqueStorage()._coverRightIcon = newValue}
  }

  var coverRightBackgroundColor: String {
    get {return _storage._coverRightBackgroundColor}
    set {_uniqueStorage()._coverRightBackgroundColor = newValue}
  }

  var badge: String {
    get {return _storage._badge}
    set {_uniqueStorage()._badge = newValue}
  }

  var rcmdReason: String {
    get {return _storage._rcmdReason}
    set {_uniqueStorage()._rcmdReason = newValue}
  }

  var avatar: Bilibili_App_Card_V1_Avatar {
    get {return _storage._avatar ?? Bilibili_App_Card_V1_Avatar()}
    set {_uniqueStorage()._avatar = newValue}
  }
  /// Returns true if `avatar` has been explicitly set.
  var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
  mutating func clearAvatar() {_uniqueStorage()._avatar = nil}

  var rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._rcmdReasonStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._rcmdReasonStyle = newValue}
  }
  /// Returns true if `rcmdReasonStyle` has been explicitly set.
  var hasRcmdReasonStyle: Bool {return _storage._rcmdReasonStyle != nil}
  /// Clears the value of `rcmdReasonStyle`. Subsequent reads from it will return its default value.
  mutating func clearRcmdReasonStyle() {_uniqueStorage()._rcmdReasonStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_App_Card_V1_LargeCoverV3 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _storage._base ?? Bilibili_App_Card_V1_Base()}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_uniqueStorage()._base = nil}

  var coverGif: String {
    get {return _storage._coverGif}
    set {_uniqueStorage()._coverGif = newValue}
  }

  var avatar: Bilibili_App_Card_V1_Avatar {
    get {return _storage._avatar ?? Bilibili_App_Card_V1_Avatar()}
    set {_uniqueStorage()._avatar = newValue}
  }
  /// Returns true if `avatar` has been explicitly set.
  var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
  mutating func clearAvatar() {_uniqueStorage()._avatar = nil}

  var topRcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._topRcmdReasonStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._topRcmdReasonStyle = newValue}
  }
  /// Returns true if `topRcmdReasonStyle` has been explicitly set.
  var hasTopRcmdReasonStyle: Bool {return _storage._topRcmdReasonStyle != nil}
  /// Clears the value of `topRcmdReasonStyle`. Subsequent reads from it will return its default value.
  mutating func clearTopRcmdReasonStyle() {_uniqueStorage()._topRcmdReasonStyle = nil}

  var bottomRcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._bottomRcmdReasonStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._bottomRcmdReasonStyle = newValue}
  }
  /// Returns true if `bottomRcmdReasonStyle` has been explicitly set.
  var hasBottomRcmdReasonStyle: Bool {return _storage._bottomRcmdReasonStyle != nil}
  /// Clears the value of `bottomRcmdReasonStyle`. Subsequent reads from it will return its default value.
  mutating func clearBottomRcmdReasonStyle() {_uniqueStorage()._bottomRcmdReasonStyle = nil}

  var coverLeftText1: String {
    get {return _storage._coverLeftText1}
    set {_uniqueStorage()._coverLeftText1 = newValue}
  }

  var coverLeftIcon1: Int32 {
    get {return _storage._coverLeftIcon1}
    set {_uniqueStorage()._coverLeftIcon1 = newValue}
  }

  var coverLeftText2: String {
    get {return _storage._coverLeftText2}
    set {_uniqueStorage()._coverLeftText2 = newValue}
  }

  var coverLeftIcon2: Int32 {
    get {return _storage._coverLeftIcon2}
    set {_uniqueStorage()._coverLeftIcon2 = newValue}
  }

  var coverRightText: String {
    get {return _storage._coverRightText}
    set {_uniqueStorage()._coverRightText = newValue}
  }

  var desc: String {
    get {return _storage._desc}
    set {_uniqueStorage()._desc = newValue}
  }

  var officialIcon: Int32 {
    get {return _storage._officialIcon}
    set {_uniqueStorage()._officialIcon = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_App_Card_V1_ThreePicV3 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _storage._base ?? Bilibili_App_Card_V1_Base()}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_uniqueStorage()._base = nil}

  var leftCover: String {
    get {return _storage._leftCover}
    set {_uniqueStorage()._leftCover = newValue}
  }

  var rightCover1: String {
    get {return _storage._rightCover1}
    set {_uniqueStorage()._rightCover1 = newValue}
  }

  var rightCover2: String {
    get {return _storage._rightCover2}
    set {_uniqueStorage()._rightCover2 = newValue}
  }

  var coverLeftText1: String {
    get {return _storage._coverLeftText1}
    set {_uniqueStorage()._coverLeftText1 = newValue}
  }

  var coverLeftIcon1: Int32 {
    get {return _storage._coverLeftIcon1}
    set {_uniqueStorage()._coverLeftIcon1 = newValue}
  }

  var coverLeftText2: String {
    get {return _storage._coverLeftText2}
    set {_uniqueStorage()._coverLeftText2 = newValue}
  }

  var coverLeftIcon2: Int32 {
    get {return _storage._coverLeftIcon2}
    set {_uniqueStorage()._coverLeftIcon2 = newValue}
  }

  var coverRightText: String {
    get {return _storage._coverRightText}
    set {_uniqueStorage()._coverRightText = newValue}
  }

  var coverRightIcon: Int32 {
    get {return _storage._coverRightIcon}
    set {_uniqueStorage()._coverRightIcon = newValue}
  }

  var coverRightBackgroundColor: String {
    get {return _storage._coverRightBackgroundColor}
    set {_uniqueStorage()._coverRightBackgroundColor = newValue}
  }

  var badge: String {
    get {return _storage._badge}
    set {_uniqueStorage()._badge = newValue}
  }

  var rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._rcmdReasonStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._rcmdReasonStyle = newValue}
  }
  /// Returns true if `rcmdReasonStyle` has been explicitly set.
  var hasRcmdReasonStyle: Bool {return _storage._rcmdReasonStyle != nil}
  /// Clears the value of `rcmdReasonStyle`. Subsequent reads from it will return its default value.
  mutating func clearRcmdReasonStyle() {_uniqueStorage()._rcmdReasonStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_App_Card_V1_OnePicV3 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _storage._base ?? Bilibili_App_Card_V1_Base()}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_uniqueStorage()._base = nil}

  var coverLeftText1: String {
    get {return _storage._coverLeftText1}
    set {_uniqueStorage()._coverLeftText1 = newValue}
  }

  var coverLeftIcon1: Int32 {
    get {return _storage._coverLeftIcon1}
    set {_uniqueStorage()._coverLeftIcon1 = newValue}
  }

  var coverRightText: String {
    get {return _storage._coverRightText}
    set {_uniqueStorage()._coverRightText = newValue}
  }

  var coverRightIcon: Int32 {
    get {return _storage._coverRightIcon}
    set {_uniqueStorage()._coverRightIcon = newValue}
  }

  var coverRightBackgroundColor: String {
    get {return _storage._coverRightBackgroundColor}
    set {_uniqueStorage()._coverRightBackgroundColor = newValue}
  }

  var badge: String {
    get {return _storage._badge}
    set {_uniqueStorage()._badge = newValue}
  }

  var rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._rcmdReasonStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._rcmdReasonStyle = newValue}
  }
  /// Returns true if `rcmdReasonStyle` has been explicitly set.
  var hasRcmdReasonStyle: Bool {return _storage._rcmdReasonStyle != nil}
  /// Clears the value of `rcmdReasonStyle`. Subsequent reads from it will return its default value.
  mutating func clearRcmdReasonStyle() {_uniqueStorage()._rcmdReasonStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_App_Card_V1_SmallCoverV7 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _base ?? Bilibili_App_Card_V1_Base()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var desc: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Bilibili_App_Card_V1_Base? = nil
}

struct Bilibili_App_Card_V1_SmallCoverV9 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _storage._base ?? Bilibili_App_Card_V1_Base()}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_uniqueStorage()._base = nil}

  var coverLeftText1: String {
    get {return _storage._coverLeftText1}
    set {_uniqueStorage()._coverLeftText1 = newValue}
  }

  var coverLeftIcon1: Int32 {
    get {return _storage._coverLeftIcon1}
    set {_uniqueStorage()._coverLeftIcon1 = newValue}
  }

  var coverLeftText2: String {
    get {return _storage._coverLeftText2}
    set {_uniqueStorage()._coverLeftText2 = newValue}
  }

  var coverLeftIcon2: Int32 {
    get {return _storage._coverLeftIcon2}
    set {_uniqueStorage()._coverLeftIcon2 = newValue}
  }

  var coverRightText: String {
    get {return _storage._coverRightText}
    set {_uniqueStorage()._coverRightText = newValue}
  }

  var coverRightIcon: Int32 {
    get {return _storage._coverRightIcon}
    set {_uniqueStorage()._coverRightIcon = newValue}
  }

  var canPlay: Int32 {
    get {return _storage._canPlay}
    set {_uniqueStorage()._canPlay = newValue}
  }

  var rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._rcmdReasonStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._rcmdReasonStyle = newValue}
  }
  /// Returns true if `rcmdReasonStyle` has been explicitly set.
  var hasRcmdReasonStyle: Bool {return _storage._rcmdReasonStyle != nil}
  /// Clears the value of `rcmdReasonStyle`. Subsequent reads from it will return its default value.
  mutating func clearRcmdReasonStyle() {_uniqueStorage()._rcmdReasonStyle = nil}

  var up: Bilibili_App_Card_V1_Up {
    get {return _storage._up ?? Bilibili_App_Card_V1_Up()}
    set {_uniqueStorage()._up = newValue}
  }
  /// Returns true if `up` has been explicitly set.
  var hasUp: Bool {return _storage._up != nil}
  /// Clears the value of `up`. Subsequent reads from it will return its default value.
  mutating func clearUp() {_uniqueStorage()._up = nil}

  var leftCoverBadgeStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._leftCoverBadgeStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._leftCoverBadgeStyle = newValue}
  }
  /// Returns true if `leftCoverBadgeStyle` has been explicitly set.
  var hasLeftCoverBadgeStyle: Bool {return _storage._leftCoverBadgeStyle != nil}
  /// Clears the value of `leftCoverBadgeStyle`. Subsequent reads from it will return its default value.
  mutating func clearLeftCoverBadgeStyle() {_uniqueStorage()._leftCoverBadgeStyle = nil}

  var leftBottomRcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._leftBottomRcmdReasonStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._leftBottomRcmdReasonStyle = newValue}
  }
  /// Returns true if `leftBottomRcmdReasonStyle` has been explicitly set.
  var hasLeftBottomRcmdReasonStyle: Bool {return _storage._leftBottomRcmdReasonStyle != nil}
  /// Clears the value of `leftBottomRcmdReasonStyle`. Subsequent reads from it will return its default value.
  mutating func clearLeftBottomRcmdReasonStyle() {_uniqueStorage()._leftBottomRcmdReasonStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_App_Card_V1_SmallCoverConvergeV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _storage._base ?? Bilibili_App_Card_V1_Base()}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_uniqueStorage()._base = nil}

  var coverLeftText1: String {
    get {return _storage._coverLeftText1}
    set {_uniqueStorage()._coverLeftText1 = newValue}
  }

  var coverLeftIcon1: Int32 {
    get {return _storage._coverLeftIcon1}
    set {_uniqueStorage()._coverLeftIcon1 = newValue}
  }

  var coverLeftText2: String {
    get {return _storage._coverLeftText2}
    set {_uniqueStorage()._coverLeftText2 = newValue}
  }

  var coverLeftIcon2: Int32 {
    get {return _storage._coverLeftIcon2}
    set {_uniqueStorage()._coverLeftIcon2 = newValue}
  }

  var coverRightText: String {
    get {return _storage._coverRightText}
    set {_uniqueStorage()._coverRightText = newValue}
  }

  var coverRightTopText: String {
    get {return _storage._coverRightTopText}
    set {_uniqueStorage()._coverRightTopText = newValue}
  }

  var rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._rcmdReasonStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._rcmdReasonStyle = newValue}
  }
  /// Returns true if `rcmdReasonStyle` has been explicitly set.
  var hasRcmdReasonStyle: Bool {return _storage._rcmdReasonStyle != nil}
  /// Clears the value of `rcmdReasonStyle`. Subsequent reads from it will return its default value.
  mutating func clearRcmdReasonStyle() {_uniqueStorage()._rcmdReasonStyle = nil}

  var rcmdReasonStyleV2: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._rcmdReasonStyleV2 ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._rcmdReasonStyleV2 = newValue}
  }
  /// Returns true if `rcmdReasonStyleV2` has been explicitly set.
  var hasRcmdReasonStyleV2: Bool {return _storage._rcmdReasonStyleV2 != nil}
  /// Clears the value of `rcmdReasonStyleV2`. Subsequent reads from it will return its default value.
  mutating func clearRcmdReasonStyleV2() {_uniqueStorage()._rcmdReasonStyleV2 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_App_Card_V1_SmallChannelSpecial {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Bilibili_App_Card_V1_Base {
    get {return _storage._base ?? Bilibili_App_Card_V1_Base()}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_uniqueStorage()._base = nil}

  var bgCover: String {
    get {return _storage._bgCover}
    set {_uniqueStorage()._bgCover = newValue}
  }

  var desc1: String {
    get {return _storage._desc1}
    set {_uniqueStorage()._desc1 = newValue}
  }

  var desc2: String {
    get {return _storage._desc2}
    set {_uniqueStorage()._desc2 = newValue}
  }

  var badge: String {
    get {return _storage._badge}
    set {_uniqueStorage()._badge = newValue}
  }

  var rcmdReasonStyle2: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._rcmdReasonStyle2 ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._rcmdReasonStyle2 = newValue}
  }
  /// Returns true if `rcmdReasonStyle2` has been explicitly set.
  var hasRcmdReasonStyle2: Bool {return _storage._rcmdReasonStyle2 != nil}
  /// Clears the value of `rcmdReasonStyle2`. Subsequent reads from it will return its default value.
  mutating func clearRcmdReasonStyle2() {_uniqueStorage()._rcmdReasonStyle2 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Bilibili_App_Card_V1_DoubleCards: @unchecked Sendable {}
extension Bilibili_App_Card_V1_DoubleCards.OneOf_Card: @unchecked Sendable {}
extension Bilibili_App_Card_V1_SmallCoverV2: @unchecked Sendable {}
extension Bilibili_App_Card_V1_SmallCoverV3: @unchecked Sendable {}
extension Bilibili_App_Card_V1_MiddleCoverV2: @unchecked Sendable {}
extension Bilibili_App_Card_V1_LargeCoverV2: @unchecked Sendable {}
extension Bilibili_App_Card_V1_ThreeItemV2: @unchecked Sendable {}
extension Bilibili_App_Card_V1_ThreeItemV2Item: @unchecked Sendable {}
extension Bilibili_App_Card_V1_SmallCoverV4: @unchecked Sendable {}
extension Bilibili_App_Card_V1_TwoItemV2: @unchecked Sendable {}
extension Bilibili_App_Card_V1_TwoItemV2Item: @unchecked Sendable {}
extension Bilibili_App_Card_V1_MultiItem: @unchecked Sendable {}
extension Bilibili_App_Card_V1_ThreePicV2: @unchecked Sendable {}
extension Bilibili_App_Card_V1_OnePicV2: @unchecked Sendable {}
extension Bilibili_App_Card_V1_LargeCoverV3: @unchecked Sendable {}
extension Bilibili_App_Card_V1_ThreePicV3: @unchecked Sendable {}
extension Bilibili_App_Card_V1_OnePicV3: @unchecked Sendable {}
extension Bilibili_App_Card_V1_SmallCoverV7: @unchecked Sendable {}
extension Bilibili_App_Card_V1_SmallCoverV9: @unchecked Sendable {}
extension Bilibili_App_Card_V1_SmallCoverConvergeV2: @unchecked Sendable {}
extension Bilibili_App_Card_V1_SmallChannelSpecial: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bilibili.app.card.v1"

extension Bilibili_App_Card_V1_DoubleCards: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DoubleCards"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "small_cover_v2"),
    2: .standard(proto: "one_pic_v2"),
    3: .standard(proto: "three_pic_v2"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Bilibili_App_Card_V1_SmallCoverV2?
        var hadOneofValue = false
        if let current = self.card {
          hadOneofValue = true
          if case .smallCoverV2(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.card = .smallCoverV2(v)
        }
      }()
      case 2: try {
        var v: Bilibili_App_Card_V1_OnePicV2?
        var hadOneofValue = false
        if let current = self.card {
          hadOneofValue = true
          if case .onePicV2(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.card = .onePicV2(v)
        }
      }()
      case 3: try {
        var v: Bilibili_App_Card_V1_ThreePicV2?
        var hadOneofValue = false
        if let current = self.card {
          hadOneofValue = true
          if case .threePicV2(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.card = .threePicV2(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.card {
    case .smallCoverV2?: try {
      guard case .smallCoverV2(let v)? = self.card else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .onePicV2?: try {
      guard case .onePicV2(let v)? = self.card else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .threePicV2?: try {
      guard case .threePicV2(let v)? = self.card else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_DoubleCards, rhs: Bilibili_App_Card_V1_DoubleCards) -> Bool {
    if lhs.card != rhs.card {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_SmallCoverV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SmallCoverV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "cover_gif"),
    3: .standard(proto: "cover_blur"),
    4: .standard(proto: "cover_left_text_1"),
    5: .standard(proto: "cover_left_icon_1"),
    6: .standard(proto: "cover_left_text_2"),
    7: .standard(proto: "cover_left_icon_2"),
    8: .standard(proto: "cover_right_text"),
    9: .standard(proto: "cover_right_icon"),
    10: .standard(proto: "cover_right_background_color"),
    11: .same(proto: "subtitle"),
    12: .same(proto: "badge"),
    13: .standard(proto: "rcmd_reason"),
    14: .same(proto: "desc"),
    15: .same(proto: "avatar"),
    16: .standard(proto: "official_icon"),
    17: .standard(proto: "can_play"),
    18: .standard(proto: "rcmd_reason_style"),
    19: .standard(proto: "rcmd_reason_style_v2"),
    20: .standard(proto: "like_button"),
  ]

  fileprivate class _StorageClass {
    var _base: Bilibili_App_Card_V1_Base? = nil
    var _coverGif: String = String()
    var _coverBlur: Int32 = 0
    var _coverLeftText1: String = String()
    var _coverLeftIcon1: Int32 = 0
    var _coverLeftText2: String = String()
    var _coverLeftIcon2: Int32 = 0
    var _coverRightText: String = String()
    var _coverRightIcon: Int32 = 0
    var _coverRightBackgroundColor: String = String()
    var _subtitle: String = String()
    var _badge: String = String()
    var _rcmdReason: String = String()
    var _desc: String = String()
    var _avatar: Bilibili_App_Card_V1_Avatar? = nil
    var _officialIcon: Int32 = 0
    var _canPlay: Int32 = 0
    var _rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle? = nil
    var _rcmdReasonStyleV2: Bilibili_App_Card_V1_ReasonStyle? = nil
    var _likeButton: Bilibili_App_Card_V1_LikeButton? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _base = source._base
      _coverGif = source._coverGif
      _coverBlur = source._coverBlur
      _coverLeftText1 = source._coverLeftText1
      _coverLeftIcon1 = source._coverLeftIcon1
      _coverLeftText2 = source._coverLeftText2
      _coverLeftIcon2 = source._coverLeftIcon2
      _coverRightText = source._coverRightText
      _coverRightIcon = source._coverRightIcon
      _coverRightBackgroundColor = source._coverRightBackgroundColor
      _subtitle = source._subtitle
      _badge = source._badge
      _rcmdReason = source._rcmdReason
      _desc = source._desc
      _avatar = source._avatar
      _officialIcon = source._officialIcon
      _canPlay = source._canPlay
      _rcmdReasonStyle = source._rcmdReasonStyle
      _rcmdReasonStyleV2 = source._rcmdReasonStyleV2
      _likeButton = source._likeButton
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._base) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._coverGif) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._coverBlur) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText1) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._coverLeftIcon1) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText2) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._coverLeftIcon2) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._coverRightText) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._coverRightIcon) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._coverRightBackgroundColor) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._subtitle) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._badge) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._rcmdReason) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._desc) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._avatar) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._officialIcon) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._canPlay) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._rcmdReasonStyle) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._rcmdReasonStyleV2) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._likeButton) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._coverGif.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverGif, fieldNumber: 2)
      }
      if _storage._coverBlur != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverBlur, fieldNumber: 3)
      }
      if !_storage._coverLeftText1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText1, fieldNumber: 4)
      }
      if _storage._coverLeftIcon1 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverLeftIcon1, fieldNumber: 5)
      }
      if !_storage._coverLeftText2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText2, fieldNumber: 6)
      }
      if _storage._coverLeftIcon2 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverLeftIcon2, fieldNumber: 7)
      }
      if !_storage._coverRightText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverRightText, fieldNumber: 8)
      }
      if _storage._coverRightIcon != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverRightIcon, fieldNumber: 9)
      }
      if !_storage._coverRightBackgroundColor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverRightBackgroundColor, fieldNumber: 10)
      }
      if !_storage._subtitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._subtitle, fieldNumber: 11)
      }
      if !_storage._badge.isEmpty {
        try visitor.visitSingularStringField(value: _storage._badge, fieldNumber: 12)
      }
      if !_storage._rcmdReason.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rcmdReason, fieldNumber: 13)
      }
      if !_storage._desc.isEmpty {
        try visitor.visitSingularStringField(value: _storage._desc, fieldNumber: 14)
      }
      try { if let v = _storage._avatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      if _storage._officialIcon != 0 {
        try visitor.visitSingularInt32Field(value: _storage._officialIcon, fieldNumber: 16)
      }
      if _storage._canPlay != 0 {
        try visitor.visitSingularInt32Field(value: _storage._canPlay, fieldNumber: 17)
      }
      try { if let v = _storage._rcmdReasonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._rcmdReasonStyleV2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._likeButton {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_SmallCoverV2, rhs: Bilibili_App_Card_V1_SmallCoverV2) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._base != rhs_storage._base {return false}
        if _storage._coverGif != rhs_storage._coverGif {return false}
        if _storage._coverBlur != rhs_storage._coverBlur {return false}
        if _storage._coverLeftText1 != rhs_storage._coverLeftText1 {return false}
        if _storage._coverLeftIcon1 != rhs_storage._coverLeftIcon1 {return false}
        if _storage._coverLeftText2 != rhs_storage._coverLeftText2 {return false}
        if _storage._coverLeftIcon2 != rhs_storage._coverLeftIcon2 {return false}
        if _storage._coverRightText != rhs_storage._coverRightText {return false}
        if _storage._coverRightIcon != rhs_storage._coverRightIcon {return false}
        if _storage._coverRightBackgroundColor != rhs_storage._coverRightBackgroundColor {return false}
        if _storage._subtitle != rhs_storage._subtitle {return false}
        if _storage._badge != rhs_storage._badge {return false}
        if _storage._rcmdReason != rhs_storage._rcmdReason {return false}
        if _storage._desc != rhs_storage._desc {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._officialIcon != rhs_storage._officialIcon {return false}
        if _storage._canPlay != rhs_storage._canPlay {return false}
        if _storage._rcmdReasonStyle != rhs_storage._rcmdReasonStyle {return false}
        if _storage._rcmdReasonStyleV2 != rhs_storage._rcmdReasonStyleV2 {return false}
        if _storage._likeButton != rhs_storage._likeButton {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_SmallCoverV3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SmallCoverV3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "avatar"),
    3: .standard(proto: "cover_left_text"),
    4: .standard(proto: "cover_right_button"),
    5: .standard(proto: "rcmd_reason"),
    6: .same(proto: "desc"),
    7: .standard(proto: "official_icon"),
    8: .standard(proto: "can_play"),
    9: .standard(proto: "rcmd_reason_style"),
  ]

  fileprivate class _StorageClass {
    var _base: Bilibili_App_Card_V1_Base? = nil
    var _avatar: Bilibili_App_Card_V1_Avatar? = nil
    var _coverLeftText: String = String()
    var _coverRightButton: Bilibili_App_Card_V1_Button? = nil
    var _rcmdReason: String = String()
    var _desc: String = String()
    var _officialIcon: Int32 = 0
    var _canPlay: Int32 = 0
    var _rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _base = source._base
      _avatar = source._avatar
      _coverLeftText = source._coverLeftText
      _coverRightButton = source._coverRightButton
      _rcmdReason = source._rcmdReason
      _desc = source._desc
      _officialIcon = source._officialIcon
      _canPlay = source._canPlay
      _rcmdReasonStyle = source._rcmdReasonStyle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._base) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._avatar) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._coverRightButton) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._rcmdReason) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._desc) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._officialIcon) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._canPlay) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._rcmdReasonStyle) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._avatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._coverLeftText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText, fieldNumber: 3)
      }
      try { if let v = _storage._coverRightButton {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._rcmdReason.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rcmdReason, fieldNumber: 5)
      }
      if !_storage._desc.isEmpty {
        try visitor.visitSingularStringField(value: _storage._desc, fieldNumber: 6)
      }
      if _storage._officialIcon != 0 {
        try visitor.visitSingularInt32Field(value: _storage._officialIcon, fieldNumber: 7)
      }
      if _storage._canPlay != 0 {
        try visitor.visitSingularInt32Field(value: _storage._canPlay, fieldNumber: 8)
      }
      try { if let v = _storage._rcmdReasonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_SmallCoverV3, rhs: Bilibili_App_Card_V1_SmallCoverV3) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._base != rhs_storage._base {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._coverLeftText != rhs_storage._coverLeftText {return false}
        if _storage._coverRightButton != rhs_storage._coverRightButton {return false}
        if _storage._rcmdReason != rhs_storage._rcmdReason {return false}
        if _storage._desc != rhs_storage._desc {return false}
        if _storage._officialIcon != rhs_storage._officialIcon {return false}
        if _storage._canPlay != rhs_storage._canPlay {return false}
        if _storage._rcmdReasonStyle != rhs_storage._rcmdReasonStyle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_MiddleCoverV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MiddleCoverV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "ratio"),
    3: .same(proto: "desc"),
    4: .same(proto: "badge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.ratio) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.badge) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.ratio != 0 {
      try visitor.visitSingularInt32Field(value: self.ratio, fieldNumber: 2)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 3)
    }
    if !self.badge.isEmpty {
      try visitor.visitSingularStringField(value: self.badge, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_MiddleCoverV2, rhs: Bilibili_App_Card_V1_MiddleCoverV2) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.ratio != rhs.ratio {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.badge != rhs.badge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_LargeCoverV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LargeCoverV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "avatar"),
    3: .same(proto: "badge"),
    4: .standard(proto: "cover_right_button"),
    5: .standard(proto: "cover_left_text_1"),
    6: .standard(proto: "cover_left_icon_1"),
    7: .standard(proto: "cover_left_text_2"),
    8: .standard(proto: "cover_left_icon_2"),
    9: .standard(proto: "rcmd_reason"),
    10: .standard(proto: "official_icon"),
    11: .standard(proto: "can_play"),
    12: .standard(proto: "rcmd_reason_style"),
    13: .standard(proto: "show_top"),
    14: .standard(proto: "show_bottom"),
  ]

  fileprivate class _StorageClass {
    var _base: Bilibili_App_Card_V1_Base? = nil
    var _avatar: Bilibili_App_Card_V1_Avatar? = nil
    var _badge: String = String()
    var _coverRightButton: Bilibili_App_Card_V1_Button? = nil
    var _coverLeftText1: String = String()
    var _coverLeftIcon1: Int32 = 0
    var _coverLeftText2: String = String()
    var _coverLeftIcon2: Int32 = 0
    var _rcmdReason: String = String()
    var _officialIcon: Int32 = 0
    var _canPlay: Int32 = 0
    var _rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle? = nil
    var _showTop: Int32 = 0
    var _showBottom: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _base = source._base
      _avatar = source._avatar
      _badge = source._badge
      _coverRightButton = source._coverRightButton
      _coverLeftText1 = source._coverLeftText1
      _coverLeftIcon1 = source._coverLeftIcon1
      _coverLeftText2 = source._coverLeftText2
      _coverLeftIcon2 = source._coverLeftIcon2
      _rcmdReason = source._rcmdReason
      _officialIcon = source._officialIcon
      _canPlay = source._canPlay
      _rcmdReasonStyle = source._rcmdReasonStyle
      _showTop = source._showTop
      _showBottom = source._showBottom
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._base) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._avatar) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._badge) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._coverRightButton) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText1) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._coverLeftIcon1) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText2) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._coverLeftIcon2) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._rcmdReason) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._officialIcon) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._canPlay) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._rcmdReasonStyle) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._showTop) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._showBottom) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._avatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._badge.isEmpty {
        try visitor.visitSingularStringField(value: _storage._badge, fieldNumber: 3)
      }
      try { if let v = _storage._coverRightButton {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._coverLeftText1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText1, fieldNumber: 5)
      }
      if _storage._coverLeftIcon1 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverLeftIcon1, fieldNumber: 6)
      }
      if !_storage._coverLeftText2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText2, fieldNumber: 7)
      }
      if _storage._coverLeftIcon2 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverLeftIcon2, fieldNumber: 8)
      }
      if !_storage._rcmdReason.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rcmdReason, fieldNumber: 9)
      }
      if _storage._officialIcon != 0 {
        try visitor.visitSingularInt32Field(value: _storage._officialIcon, fieldNumber: 10)
      }
      if _storage._canPlay != 0 {
        try visitor.visitSingularInt32Field(value: _storage._canPlay, fieldNumber: 11)
      }
      try { if let v = _storage._rcmdReasonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if _storage._showTop != 0 {
        try visitor.visitSingularInt32Field(value: _storage._showTop, fieldNumber: 13)
      }
      if _storage._showBottom != 0 {
        try visitor.visitSingularInt32Field(value: _storage._showBottom, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_LargeCoverV2, rhs: Bilibili_App_Card_V1_LargeCoverV2) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._base != rhs_storage._base {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._badge != rhs_storage._badge {return false}
        if _storage._coverRightButton != rhs_storage._coverRightButton {return false}
        if _storage._coverLeftText1 != rhs_storage._coverLeftText1 {return false}
        if _storage._coverLeftIcon1 != rhs_storage._coverLeftIcon1 {return false}
        if _storage._coverLeftText2 != rhs_storage._coverLeftText2 {return false}
        if _storage._coverLeftIcon2 != rhs_storage._coverLeftIcon2 {return false}
        if _storage._rcmdReason != rhs_storage._rcmdReason {return false}
        if _storage._officialIcon != rhs_storage._officialIcon {return false}
        if _storage._canPlay != rhs_storage._canPlay {return false}
        if _storage._rcmdReasonStyle != rhs_storage._rcmdReasonStyle {return false}
        if _storage._showTop != rhs_storage._showTop {return false}
        if _storage._showBottom != rhs_storage._showBottom {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_ThreeItemV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreeItemV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "title_icon"),
    3: .standard(proto: "more_uri"),
    4: .standard(proto: "more_text"),
    5: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.titleIcon) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.moreUri) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.moreText) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.titleIcon != 0 {
      try visitor.visitSingularInt32Field(value: self.titleIcon, fieldNumber: 2)
    }
    if !self.moreUri.isEmpty {
      try visitor.visitSingularStringField(value: self.moreUri, fieldNumber: 3)
    }
    if !self.moreText.isEmpty {
      try visitor.visitSingularStringField(value: self.moreText, fieldNumber: 4)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_ThreeItemV2, rhs: Bilibili_App_Card_V1_ThreeItemV2) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.titleIcon != rhs.titleIcon {return false}
    if lhs.moreUri != rhs.moreUri {return false}
    if lhs.moreText != rhs.moreText {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_ThreeItemV2Item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreeItemV2Item"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "cover_left_icon"),
    3: .standard(proto: "desc_text_1"),
    4: .standard(proto: "desc_icon_1"),
    5: .standard(proto: "desc_text_2"),
    6: .standard(proto: "desc_icon_2"),
    7: .same(proto: "badge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.coverLeftIcon) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.descText1) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.descIcon1) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.descText2) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.descIcon2) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.badge) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.coverLeftIcon != 0 {
      try visitor.visitSingularInt32Field(value: self.coverLeftIcon, fieldNumber: 2)
    }
    if !self.descText1.isEmpty {
      try visitor.visitSingularStringField(value: self.descText1, fieldNumber: 3)
    }
    if self.descIcon1 != 0 {
      try visitor.visitSingularInt32Field(value: self.descIcon1, fieldNumber: 4)
    }
    if !self.descText2.isEmpty {
      try visitor.visitSingularStringField(value: self.descText2, fieldNumber: 5)
    }
    if self.descIcon2 != 0 {
      try visitor.visitSingularInt32Field(value: self.descIcon2, fieldNumber: 6)
    }
    if !self.badge.isEmpty {
      try visitor.visitSingularStringField(value: self.badge, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_ThreeItemV2Item, rhs: Bilibili_App_Card_V1_ThreeItemV2Item) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.coverLeftIcon != rhs.coverLeftIcon {return false}
    if lhs.descText1 != rhs.descText1 {return false}
    if lhs.descIcon1 != rhs.descIcon1 {return false}
    if lhs.descText2 != rhs.descText2 {return false}
    if lhs.descIcon2 != rhs.descIcon2 {return false}
    if lhs.badge != rhs.badge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_SmallCoverV4: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SmallCoverV4"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "cover_badge"),
    3: .same(proto: "desc"),
    4: .standard(proto: "title_right_text"),
    5: .standard(proto: "title_right_pic"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.coverBadge) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.titleRightText) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.titleRightPic) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.coverBadge.isEmpty {
      try visitor.visitSingularStringField(value: self.coverBadge, fieldNumber: 2)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 3)
    }
    if !self.titleRightText.isEmpty {
      try visitor.visitSingularStringField(value: self.titleRightText, fieldNumber: 4)
    }
    if self.titleRightPic != 0 {
      try visitor.visitSingularInt32Field(value: self.titleRightPic, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_SmallCoverV4, rhs: Bilibili_App_Card_V1_SmallCoverV4) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.coverBadge != rhs.coverBadge {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.titleRightText != rhs.titleRightText {return false}
    if lhs.titleRightPic != rhs.titleRightPic {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_TwoItemV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TwoItemV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_TwoItemV2, rhs: Bilibili_App_Card_V1_TwoItemV2) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_TwoItemV2Item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TwoItemV2Item"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "badge"),
    3: .standard(proto: "cover_left_text_1"),
    4: .standard(proto: "cover_left_icon_1"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.badge) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.coverLeftText1) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.coverLeftIcon1) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.badge.isEmpty {
      try visitor.visitSingularStringField(value: self.badge, fieldNumber: 2)
    }
    if !self.coverLeftText1.isEmpty {
      try visitor.visitSingularStringField(value: self.coverLeftText1, fieldNumber: 3)
    }
    if self.coverLeftIcon1 != 0 {
      try visitor.visitSingularInt32Field(value: self.coverLeftIcon1, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_TwoItemV2Item, rhs: Bilibili_App_Card_V1_TwoItemV2Item) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.badge != rhs.badge {return false}
    if lhs.coverLeftText1 != rhs.coverLeftText1 {return false}
    if lhs.coverLeftIcon1 != rhs.coverLeftIcon1 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_MultiItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MultiItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "more_uri"),
    3: .standard(proto: "more_text"),
    4: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.moreUri) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.moreText) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.moreUri.isEmpty {
      try visitor.visitSingularStringField(value: self.moreUri, fieldNumber: 2)
    }
    if !self.moreText.isEmpty {
      try visitor.visitSingularStringField(value: self.moreText, fieldNumber: 3)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_MultiItem, rhs: Bilibili_App_Card_V1_MultiItem) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.moreUri != rhs.moreUri {return false}
    if lhs.moreText != rhs.moreText {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_ThreePicV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreePicV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "left_cover"),
    3: .standard(proto: "right_cover_1"),
    4: .standard(proto: "right_cover_2"),
    5: .standard(proto: "cover_left_text_1"),
    6: .standard(proto: "cover_left_icon_1"),
    7: .standard(proto: "cover_left_text_2"),
    8: .standard(proto: "cover_left_icon_2"),
    9: .standard(proto: "cover_right_text"),
    10: .standard(proto: "cover_right_icon"),
    11: .standard(proto: "cover_right_background_color"),
    12: .same(proto: "badge"),
    13: .standard(proto: "rcmd_reason"),
    14: .same(proto: "desc"),
    15: .same(proto: "avatar"),
    16: .standard(proto: "rcmd_reason_style"),
  ]

  fileprivate class _StorageClass {
    var _base: Bilibili_App_Card_V1_Base? = nil
    var _leftCover: String = String()
    var _rightCover1: String = String()
    var _rightCover2: String = String()
    var _coverLeftText1: String = String()
    var _coverLeftIcon1: Int32 = 0
    var _coverLeftText2: String = String()
    var _coverLeftIcon2: Int32 = 0
    var _coverRightText: String = String()
    var _coverRightIcon: Int32 = 0
    var _coverRightBackgroundColor: String = String()
    var _badge: String = String()
    var _rcmdReason: String = String()
    var _desc: String = String()
    var _avatar: Bilibili_App_Card_V1_Avatar? = nil
    var _rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _base = source._base
      _leftCover = source._leftCover
      _rightCover1 = source._rightCover1
      _rightCover2 = source._rightCover2
      _coverLeftText1 = source._coverLeftText1
      _coverLeftIcon1 = source._coverLeftIcon1
      _coverLeftText2 = source._coverLeftText2
      _coverLeftIcon2 = source._coverLeftIcon2
      _coverRightText = source._coverRightText
      _coverRightIcon = source._coverRightIcon
      _coverRightBackgroundColor = source._coverRightBackgroundColor
      _badge = source._badge
      _rcmdReason = source._rcmdReason
      _desc = source._desc
      _avatar = source._avatar
      _rcmdReasonStyle = source._rcmdReasonStyle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._base) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._leftCover) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._rightCover1) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._rightCover2) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText1) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._coverLeftIcon1) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText2) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._coverLeftIcon2) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._coverRightText) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._coverRightIcon) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._coverRightBackgroundColor) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._badge) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._rcmdReason) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._desc) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._avatar) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._rcmdReasonStyle) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._leftCover.isEmpty {
        try visitor.visitSingularStringField(value: _storage._leftCover, fieldNumber: 2)
      }
      if !_storage._rightCover1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rightCover1, fieldNumber: 3)
      }
      if !_storage._rightCover2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rightCover2, fieldNumber: 4)
      }
      if !_storage._coverLeftText1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText1, fieldNumber: 5)
      }
      if _storage._coverLeftIcon1 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverLeftIcon1, fieldNumber: 6)
      }
      if !_storage._coverLeftText2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText2, fieldNumber: 7)
      }
      if _storage._coverLeftIcon2 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverLeftIcon2, fieldNumber: 8)
      }
      if !_storage._coverRightText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverRightText, fieldNumber: 9)
      }
      if _storage._coverRightIcon != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverRightIcon, fieldNumber: 10)
      }
      if !_storage._coverRightBackgroundColor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverRightBackgroundColor, fieldNumber: 11)
      }
      if !_storage._badge.isEmpty {
        try visitor.visitSingularStringField(value: _storage._badge, fieldNumber: 12)
      }
      if !_storage._rcmdReason.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rcmdReason, fieldNumber: 13)
      }
      if !_storage._desc.isEmpty {
        try visitor.visitSingularStringField(value: _storage._desc, fieldNumber: 14)
      }
      try { if let v = _storage._avatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._rcmdReasonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_ThreePicV2, rhs: Bilibili_App_Card_V1_ThreePicV2) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._base != rhs_storage._base {return false}
        if _storage._leftCover != rhs_storage._leftCover {return false}
        if _storage._rightCover1 != rhs_storage._rightCover1 {return false}
        if _storage._rightCover2 != rhs_storage._rightCover2 {return false}
        if _storage._coverLeftText1 != rhs_storage._coverLeftText1 {return false}
        if _storage._coverLeftIcon1 != rhs_storage._coverLeftIcon1 {return false}
        if _storage._coverLeftText2 != rhs_storage._coverLeftText2 {return false}
        if _storage._coverLeftIcon2 != rhs_storage._coverLeftIcon2 {return false}
        if _storage._coverRightText != rhs_storage._coverRightText {return false}
        if _storage._coverRightIcon != rhs_storage._coverRightIcon {return false}
        if _storage._coverRightBackgroundColor != rhs_storage._coverRightBackgroundColor {return false}
        if _storage._badge != rhs_storage._badge {return false}
        if _storage._rcmdReason != rhs_storage._rcmdReason {return false}
        if _storage._desc != rhs_storage._desc {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._rcmdReasonStyle != rhs_storage._rcmdReasonStyle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_OnePicV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OnePicV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "cover_left_icon_1"),
    3: .standard(proto: "cover_left_text_2"),
    4: .standard(proto: "cover_right_text"),
    5: .standard(proto: "cover_right_icon"),
    6: .standard(proto: "cover_right_background_color"),
    7: .same(proto: "badge"),
    8: .standard(proto: "rcmd_reason"),
    9: .same(proto: "avatar"),
    10: .standard(proto: "rcmd_reason_style"),
  ]

  fileprivate class _StorageClass {
    var _base: Bilibili_App_Card_V1_Base? = nil
    var _coverLeftIcon1: Int32 = 0
    var _coverLeftText2: String = String()
    var _coverRightText: String = String()
    var _coverRightIcon: Int32 = 0
    var _coverRightBackgroundColor: String = String()
    var _badge: String = String()
    var _rcmdReason: String = String()
    var _avatar: Bilibili_App_Card_V1_Avatar? = nil
    var _rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _base = source._base
      _coverLeftIcon1 = source._coverLeftIcon1
      _coverLeftText2 = source._coverLeftText2
      _coverRightText = source._coverRightText
      _coverRightIcon = source._coverRightIcon
      _coverRightBackgroundColor = source._coverRightBackgroundColor
      _badge = source._badge
      _rcmdReason = source._rcmdReason
      _avatar = source._avatar
      _rcmdReasonStyle = source._rcmdReasonStyle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._base) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._coverLeftIcon1) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText2) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._coverRightText) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._coverRightIcon) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._coverRightBackgroundColor) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._badge) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._rcmdReason) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._avatar) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._rcmdReasonStyle) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if _storage._coverLeftIcon1 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverLeftIcon1, fieldNumber: 2)
      }
      if !_storage._coverLeftText2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText2, fieldNumber: 3)
      }
      if !_storage._coverRightText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverRightText, fieldNumber: 4)
      }
      if _storage._coverRightIcon != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverRightIcon, fieldNumber: 5)
      }
      if !_storage._coverRightBackgroundColor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverRightBackgroundColor, fieldNumber: 6)
      }
      if !_storage._badge.isEmpty {
        try visitor.visitSingularStringField(value: _storage._badge, fieldNumber: 7)
      }
      if !_storage._rcmdReason.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rcmdReason, fieldNumber: 8)
      }
      try { if let v = _storage._avatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._rcmdReasonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_OnePicV2, rhs: Bilibili_App_Card_V1_OnePicV2) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._base != rhs_storage._base {return false}
        if _storage._coverLeftIcon1 != rhs_storage._coverLeftIcon1 {return false}
        if _storage._coverLeftText2 != rhs_storage._coverLeftText2 {return false}
        if _storage._coverRightText != rhs_storage._coverRightText {return false}
        if _storage._coverRightIcon != rhs_storage._coverRightIcon {return false}
        if _storage._coverRightBackgroundColor != rhs_storage._coverRightBackgroundColor {return false}
        if _storage._badge != rhs_storage._badge {return false}
        if _storage._rcmdReason != rhs_storage._rcmdReason {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._rcmdReasonStyle != rhs_storage._rcmdReasonStyle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_LargeCoverV3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LargeCoverV3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "cover_gif"),
    3: .same(proto: "avatar"),
    4: .standard(proto: "top_rcmd_reason_style"),
    5: .standard(proto: "bottom_rcmd_reason_style"),
    6: .standard(proto: "cover_left_text_1"),
    7: .standard(proto: "cover_left_icon_1"),
    8: .standard(proto: "cover_left_text_2"),
    9: .standard(proto: "cover_left_icon_2"),
    10: .standard(proto: "cover_right_text"),
    11: .same(proto: "desc"),
    12: .standard(proto: "official_icon"),
  ]

  fileprivate class _StorageClass {
    var _base: Bilibili_App_Card_V1_Base? = nil
    var _coverGif: String = String()
    var _avatar: Bilibili_App_Card_V1_Avatar? = nil
    var _topRcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle? = nil
    var _bottomRcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle? = nil
    var _coverLeftText1: String = String()
    var _coverLeftIcon1: Int32 = 0
    var _coverLeftText2: String = String()
    var _coverLeftIcon2: Int32 = 0
    var _coverRightText: String = String()
    var _desc: String = String()
    var _officialIcon: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _base = source._base
      _coverGif = source._coverGif
      _avatar = source._avatar
      _topRcmdReasonStyle = source._topRcmdReasonStyle
      _bottomRcmdReasonStyle = source._bottomRcmdReasonStyle
      _coverLeftText1 = source._coverLeftText1
      _coverLeftIcon1 = source._coverLeftIcon1
      _coverLeftText2 = source._coverLeftText2
      _coverLeftIcon2 = source._coverLeftIcon2
      _coverRightText = source._coverRightText
      _desc = source._desc
      _officialIcon = source._officialIcon
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._base) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._coverGif) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._avatar) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._topRcmdReasonStyle) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._bottomRcmdReasonStyle) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText1) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._coverLeftIcon1) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText2) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._coverLeftIcon2) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._coverRightText) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._desc) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._officialIcon) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._coverGif.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverGif, fieldNumber: 2)
      }
      try { if let v = _storage._avatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._topRcmdReasonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._bottomRcmdReasonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if !_storage._coverLeftText1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText1, fieldNumber: 6)
      }
      if _storage._coverLeftIcon1 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverLeftIcon1, fieldNumber: 7)
      }
      if !_storage._coverLeftText2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText2, fieldNumber: 8)
      }
      if _storage._coverLeftIcon2 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverLeftIcon2, fieldNumber: 9)
      }
      if !_storage._coverRightText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverRightText, fieldNumber: 10)
      }
      if !_storage._desc.isEmpty {
        try visitor.visitSingularStringField(value: _storage._desc, fieldNumber: 11)
      }
      if _storage._officialIcon != 0 {
        try visitor.visitSingularInt32Field(value: _storage._officialIcon, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_LargeCoverV3, rhs: Bilibili_App_Card_V1_LargeCoverV3) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._base != rhs_storage._base {return false}
        if _storage._coverGif != rhs_storage._coverGif {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._topRcmdReasonStyle != rhs_storage._topRcmdReasonStyle {return false}
        if _storage._bottomRcmdReasonStyle != rhs_storage._bottomRcmdReasonStyle {return false}
        if _storage._coverLeftText1 != rhs_storage._coverLeftText1 {return false}
        if _storage._coverLeftIcon1 != rhs_storage._coverLeftIcon1 {return false}
        if _storage._coverLeftText2 != rhs_storage._coverLeftText2 {return false}
        if _storage._coverLeftIcon2 != rhs_storage._coverLeftIcon2 {return false}
        if _storage._coverRightText != rhs_storage._coverRightText {return false}
        if _storage._desc != rhs_storage._desc {return false}
        if _storage._officialIcon != rhs_storage._officialIcon {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_ThreePicV3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreePicV3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "left_cover"),
    3: .standard(proto: "right_cover_1"),
    4: .standard(proto: "right_cover_2"),
    5: .standard(proto: "cover_left_text_1"),
    6: .standard(proto: "cover_left_icon_1"),
    7: .standard(proto: "cover_left_text_2"),
    8: .standard(proto: "cover_left_icon_2"),
    9: .standard(proto: "cover_right_text"),
    10: .standard(proto: "cover_right_icon"),
    11: .standard(proto: "cover_right_background_color"),
    12: .same(proto: "badge"),
    13: .standard(proto: "rcmd_reason_style"),
  ]

  fileprivate class _StorageClass {
    var _base: Bilibili_App_Card_V1_Base? = nil
    var _leftCover: String = String()
    var _rightCover1: String = String()
    var _rightCover2: String = String()
    var _coverLeftText1: String = String()
    var _coverLeftIcon1: Int32 = 0
    var _coverLeftText2: String = String()
    var _coverLeftIcon2: Int32 = 0
    var _coverRightText: String = String()
    var _coverRightIcon: Int32 = 0
    var _coverRightBackgroundColor: String = String()
    var _badge: String = String()
    var _rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _base = source._base
      _leftCover = source._leftCover
      _rightCover1 = source._rightCover1
      _rightCover2 = source._rightCover2
      _coverLeftText1 = source._coverLeftText1
      _coverLeftIcon1 = source._coverLeftIcon1
      _coverLeftText2 = source._coverLeftText2
      _coverLeftIcon2 = source._coverLeftIcon2
      _coverRightText = source._coverRightText
      _coverRightIcon = source._coverRightIcon
      _coverRightBackgroundColor = source._coverRightBackgroundColor
      _badge = source._badge
      _rcmdReasonStyle = source._rcmdReasonStyle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._base) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._leftCover) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._rightCover1) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._rightCover2) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText1) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._coverLeftIcon1) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText2) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._coverLeftIcon2) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._coverRightText) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._coverRightIcon) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._coverRightBackgroundColor) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._badge) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._rcmdReasonStyle) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._leftCover.isEmpty {
        try visitor.visitSingularStringField(value: _storage._leftCover, fieldNumber: 2)
      }
      if !_storage._rightCover1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rightCover1, fieldNumber: 3)
      }
      if !_storage._rightCover2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rightCover2, fieldNumber: 4)
      }
      if !_storage._coverLeftText1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText1, fieldNumber: 5)
      }
      if _storage._coverLeftIcon1 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverLeftIcon1, fieldNumber: 6)
      }
      if !_storage._coverLeftText2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText2, fieldNumber: 7)
      }
      if _storage._coverLeftIcon2 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverLeftIcon2, fieldNumber: 8)
      }
      if !_storage._coverRightText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverRightText, fieldNumber: 9)
      }
      if _storage._coverRightIcon != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverRightIcon, fieldNumber: 10)
      }
      if !_storage._coverRightBackgroundColor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverRightBackgroundColor, fieldNumber: 11)
      }
      if !_storage._badge.isEmpty {
        try visitor.visitSingularStringField(value: _storage._badge, fieldNumber: 12)
      }
      try { if let v = _storage._rcmdReasonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_ThreePicV3, rhs: Bilibili_App_Card_V1_ThreePicV3) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._base != rhs_storage._base {return false}
        if _storage._leftCover != rhs_storage._leftCover {return false}
        if _storage._rightCover1 != rhs_storage._rightCover1 {return false}
        if _storage._rightCover2 != rhs_storage._rightCover2 {return false}
        if _storage._coverLeftText1 != rhs_storage._coverLeftText1 {return false}
        if _storage._coverLeftIcon1 != rhs_storage._coverLeftIcon1 {return false}
        if _storage._coverLeftText2 != rhs_storage._coverLeftText2 {return false}
        if _storage._coverLeftIcon2 != rhs_storage._coverLeftIcon2 {return false}
        if _storage._coverRightText != rhs_storage._coverRightText {return false}
        if _storage._coverRightIcon != rhs_storage._coverRightIcon {return false}
        if _storage._coverRightBackgroundColor != rhs_storage._coverRightBackgroundColor {return false}
        if _storage._badge != rhs_storage._badge {return false}
        if _storage._rcmdReasonStyle != rhs_storage._rcmdReasonStyle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_OnePicV3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OnePicV3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "cover_left_text_1"),
    3: .standard(proto: "cover_left_icon_1"),
    4: .standard(proto: "cover_right_text"),
    5: .standard(proto: "cover_right_icon"),
    6: .standard(proto: "cover_right_background_color"),
    7: .same(proto: "badge"),
    8: .standard(proto: "rcmd_reason_style"),
  ]

  fileprivate class _StorageClass {
    var _base: Bilibili_App_Card_V1_Base? = nil
    var _coverLeftText1: String = String()
    var _coverLeftIcon1: Int32 = 0
    var _coverRightText: String = String()
    var _coverRightIcon: Int32 = 0
    var _coverRightBackgroundColor: String = String()
    var _badge: String = String()
    var _rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _base = source._base
      _coverLeftText1 = source._coverLeftText1
      _coverLeftIcon1 = source._coverLeftIcon1
      _coverRightText = source._coverRightText
      _coverRightIcon = source._coverRightIcon
      _coverRightBackgroundColor = source._coverRightBackgroundColor
      _badge = source._badge
      _rcmdReasonStyle = source._rcmdReasonStyle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._base) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText1) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._coverLeftIcon1) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._coverRightText) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._coverRightIcon) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._coverRightBackgroundColor) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._badge) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._rcmdReasonStyle) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._coverLeftText1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText1, fieldNumber: 2)
      }
      if _storage._coverLeftIcon1 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverLeftIcon1, fieldNumber: 3)
      }
      if !_storage._coverRightText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverRightText, fieldNumber: 4)
      }
      if _storage._coverRightIcon != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverRightIcon, fieldNumber: 5)
      }
      if !_storage._coverRightBackgroundColor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverRightBackgroundColor, fieldNumber: 6)
      }
      if !_storage._badge.isEmpty {
        try visitor.visitSingularStringField(value: _storage._badge, fieldNumber: 7)
      }
      try { if let v = _storage._rcmdReasonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_OnePicV3, rhs: Bilibili_App_Card_V1_OnePicV3) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._base != rhs_storage._base {return false}
        if _storage._coverLeftText1 != rhs_storage._coverLeftText1 {return false}
        if _storage._coverLeftIcon1 != rhs_storage._coverLeftIcon1 {return false}
        if _storage._coverRightText != rhs_storage._coverRightText {return false}
        if _storage._coverRightIcon != rhs_storage._coverRightIcon {return false}
        if _storage._coverRightBackgroundColor != rhs_storage._coverRightBackgroundColor {return false}
        if _storage._badge != rhs_storage._badge {return false}
        if _storage._rcmdReasonStyle != rhs_storage._rcmdReasonStyle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_SmallCoverV7: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SmallCoverV7"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "desc"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_SmallCoverV7, rhs: Bilibili_App_Card_V1_SmallCoverV7) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_SmallCoverV9: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SmallCoverV9"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "cover_left_text_1"),
    3: .standard(proto: "cover_left_icon_1"),
    4: .standard(proto: "cover_left_text_2"),
    5: .standard(proto: "cover_left_icon_2"),
    6: .standard(proto: "cover_right_text"),
    7: .standard(proto: "cover_right_icon"),
    8: .standard(proto: "can_play"),
    9: .standard(proto: "rcmd_reason_style"),
    10: .same(proto: "up"),
    11: .standard(proto: "left_cover_badge_style"),
    12: .standard(proto: "left_bottom_rcmd_reason_style"),
  ]

  fileprivate class _StorageClass {
    var _base: Bilibili_App_Card_V1_Base? = nil
    var _coverLeftText1: String = String()
    var _coverLeftIcon1: Int32 = 0
    var _coverLeftText2: String = String()
    var _coverLeftIcon2: Int32 = 0
    var _coverRightText: String = String()
    var _coverRightIcon: Int32 = 0
    var _canPlay: Int32 = 0
    var _rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle? = nil
    var _up: Bilibili_App_Card_V1_Up? = nil
    var _leftCoverBadgeStyle: Bilibili_App_Card_V1_ReasonStyle? = nil
    var _leftBottomRcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _base = source._base
      _coverLeftText1 = source._coverLeftText1
      _coverLeftIcon1 = source._coverLeftIcon1
      _coverLeftText2 = source._coverLeftText2
      _coverLeftIcon2 = source._coverLeftIcon2
      _coverRightText = source._coverRightText
      _coverRightIcon = source._coverRightIcon
      _canPlay = source._canPlay
      _rcmdReasonStyle = source._rcmdReasonStyle
      _up = source._up
      _leftCoverBadgeStyle = source._leftCoverBadgeStyle
      _leftBottomRcmdReasonStyle = source._leftBottomRcmdReasonStyle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._base) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText1) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._coverLeftIcon1) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText2) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._coverLeftIcon2) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._coverRightText) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._coverRightIcon) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._canPlay) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._rcmdReasonStyle) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._up) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._leftCoverBadgeStyle) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._leftBottomRcmdReasonStyle) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._coverLeftText1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText1, fieldNumber: 2)
      }
      if _storage._coverLeftIcon1 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverLeftIcon1, fieldNumber: 3)
      }
      if !_storage._coverLeftText2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText2, fieldNumber: 4)
      }
      if _storage._coverLeftIcon2 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverLeftIcon2, fieldNumber: 5)
      }
      if !_storage._coverRightText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverRightText, fieldNumber: 6)
      }
      if _storage._coverRightIcon != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverRightIcon, fieldNumber: 7)
      }
      if _storage._canPlay != 0 {
        try visitor.visitSingularInt32Field(value: _storage._canPlay, fieldNumber: 8)
      }
      try { if let v = _storage._rcmdReasonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._up {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._leftCoverBadgeStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._leftBottomRcmdReasonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_SmallCoverV9, rhs: Bilibili_App_Card_V1_SmallCoverV9) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._base != rhs_storage._base {return false}
        if _storage._coverLeftText1 != rhs_storage._coverLeftText1 {return false}
        if _storage._coverLeftIcon1 != rhs_storage._coverLeftIcon1 {return false}
        if _storage._coverLeftText2 != rhs_storage._coverLeftText2 {return false}
        if _storage._coverLeftIcon2 != rhs_storage._coverLeftIcon2 {return false}
        if _storage._coverRightText != rhs_storage._coverRightText {return false}
        if _storage._coverRightIcon != rhs_storage._coverRightIcon {return false}
        if _storage._canPlay != rhs_storage._canPlay {return false}
        if _storage._rcmdReasonStyle != rhs_storage._rcmdReasonStyle {return false}
        if _storage._up != rhs_storage._up {return false}
        if _storage._leftCoverBadgeStyle != rhs_storage._leftCoverBadgeStyle {return false}
        if _storage._leftBottomRcmdReasonStyle != rhs_storage._leftBottomRcmdReasonStyle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_SmallCoverConvergeV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SmallCoverConvergeV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "cover_left_text_1"),
    3: .standard(proto: "cover_left_icon_1"),
    4: .standard(proto: "cover_left_text_2"),
    5: .standard(proto: "cover_left_icon_2"),
    6: .standard(proto: "cover_right_text"),
    7: .standard(proto: "cover_right_top_text"),
    8: .standard(proto: "rcmd_reason_style"),
    9: .standard(proto: "rcmd_reason_style_v2"),
  ]

  fileprivate class _StorageClass {
    var _base: Bilibili_App_Card_V1_Base? = nil
    var _coverLeftText1: String = String()
    var _coverLeftIcon1: Int32 = 0
    var _coverLeftText2: String = String()
    var _coverLeftIcon2: Int32 = 0
    var _coverRightText: String = String()
    var _coverRightTopText: String = String()
    var _rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle? = nil
    var _rcmdReasonStyleV2: Bilibili_App_Card_V1_ReasonStyle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _base = source._base
      _coverLeftText1 = source._coverLeftText1
      _coverLeftIcon1 = source._coverLeftIcon1
      _coverLeftText2 = source._coverLeftText2
      _coverLeftIcon2 = source._coverLeftIcon2
      _coverRightText = source._coverRightText
      _coverRightTopText = source._coverRightTopText
      _rcmdReasonStyle = source._rcmdReasonStyle
      _rcmdReasonStyleV2 = source._rcmdReasonStyleV2
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._base) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText1) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._coverLeftIcon1) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText2) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._coverLeftIcon2) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._coverRightText) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._coverRightTopText) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._rcmdReasonStyle) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._rcmdReasonStyleV2) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._coverLeftText1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText1, fieldNumber: 2)
      }
      if _storage._coverLeftIcon1 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverLeftIcon1, fieldNumber: 3)
      }
      if !_storage._coverLeftText2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText2, fieldNumber: 4)
      }
      if _storage._coverLeftIcon2 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverLeftIcon2, fieldNumber: 5)
      }
      if !_storage._coverRightText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverRightText, fieldNumber: 6)
      }
      if !_storage._coverRightTopText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverRightTopText, fieldNumber: 7)
      }
      try { if let v = _storage._rcmdReasonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._rcmdReasonStyleV2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_SmallCoverConvergeV2, rhs: Bilibili_App_Card_V1_SmallCoverConvergeV2) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._base != rhs_storage._base {return false}
        if _storage._coverLeftText1 != rhs_storage._coverLeftText1 {return false}
        if _storage._coverLeftIcon1 != rhs_storage._coverLeftIcon1 {return false}
        if _storage._coverLeftText2 != rhs_storage._coverLeftText2 {return false}
        if _storage._coverLeftIcon2 != rhs_storage._coverLeftIcon2 {return false}
        if _storage._coverRightText != rhs_storage._coverRightText {return false}
        if _storage._coverRightTopText != rhs_storage._coverRightTopText {return false}
        if _storage._rcmdReasonStyle != rhs_storage._rcmdReasonStyle {return false}
        if _storage._rcmdReasonStyleV2 != rhs_storage._rcmdReasonStyleV2 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_SmallChannelSpecial: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SmallChannelSpecial"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "bg_cover"),
    3: .standard(proto: "desc_1"),
    4: .standard(proto: "desc_2"),
    5: .same(proto: "badge"),
    6: .standard(proto: "rcmd_reason_style_2"),
  ]

  fileprivate class _StorageClass {
    var _base: Bilibili_App_Card_V1_Base? = nil
    var _bgCover: String = String()
    var _desc1: String = String()
    var _desc2: String = String()
    var _badge: String = String()
    var _rcmdReasonStyle2: Bilibili_App_Card_V1_ReasonStyle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _base = source._base
      _bgCover = source._bgCover
      _desc1 = source._desc1
      _desc2 = source._desc2
      _badge = source._badge
      _rcmdReasonStyle2 = source._rcmdReasonStyle2
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._base) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._bgCover) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._desc1) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._desc2) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._badge) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._rcmdReasonStyle2) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._bgCover.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bgCover, fieldNumber: 2)
      }
      if !_storage._desc1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._desc1, fieldNumber: 3)
      }
      if !_storage._desc2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._desc2, fieldNumber: 4)
      }
      if !_storage._badge.isEmpty {
        try visitor.visitSingularStringField(value: _storage._badge, fieldNumber: 5)
      }
      try { if let v = _storage._rcmdReasonStyle2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_SmallChannelSpecial, rhs: Bilibili_App_Card_V1_SmallChannelSpecial) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._base != rhs_storage._base {return false}
        if _storage._bgCover != rhs_storage._bgCover {return false}
        if _storage._desc1 != rhs_storage._desc1 {return false}
        if _storage._desc2 != rhs_storage._desc2 {return false}
        if _storage._badge != rhs_storage._badge {return false}
        if _storage._rcmdReasonStyle2 != rhs_storage._rcmdReasonStyle2 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
