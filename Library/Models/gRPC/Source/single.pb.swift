// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bilibili/app/card/v1/single.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bilibili_App_Card_V1_SmallCoverV5 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 条目基本信息
  var base: Bilibili_App_Card_V1_Base {
    get {return _storage._base ?? Bilibili_App_Card_V1_Base()}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_uniqueStorage()._base = nil}

  var coverGif: String {
    get {return _storage._coverGif}
    set {_uniqueStorage()._coverGif = newValue}
  }

  var up: Bilibili_App_Card_V1_Up {
    get {return _storage._up ?? Bilibili_App_Card_V1_Up()}
    set {_uniqueStorage()._up = newValue}
  }
  /// Returns true if `up` has been explicitly set.
  var hasUp: Bool {return _storage._up != nil}
  /// Clears the value of `up`. Subsequent reads from it will return its default value.
  mutating func clearUp() {_uniqueStorage()._up = nil}

  /// 封面右下角标文案
  var coverRightText1: String {
    get {return _storage._coverRightText1}
    set {_uniqueStorage()._coverRightText1 = newValue}
  }

  /// 右侧文案1
  var rightDesc1: String {
    get {return _storage._rightDesc1}
    set {_uniqueStorage()._rightDesc1 = newValue}
  }

  /// 右侧文案2
  var rightDesc2: String {
    get {return _storage._rightDesc2}
    set {_uniqueStorage()._rightDesc2 = newValue}
  }

  /// 右侧推荐原因标签框
  var rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._rcmdReasonStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._rcmdReasonStyle = newValue}
  }
  /// Returns true if `rcmdReasonStyle` has been explicitly set.
  var hasRcmdReasonStyle: Bool {return _storage._rcmdReasonStyle != nil}
  /// Clears the value of `rcmdReasonStyle`. Subsequent reads from it will return its default value.
  mutating func clearRcmdReasonStyle() {_uniqueStorage()._rcmdReasonStyle = nil}

  var hotwordEntrance: Bilibili_App_Card_V1_HotwordEntrance {
    get {return _storage._hotwordEntrance ?? Bilibili_App_Card_V1_HotwordEntrance()}
    set {_uniqueStorage()._hotwordEntrance = newValue}
  }
  /// Returns true if `hotwordEntrance` has been explicitly set.
  var hasHotwordEntrance: Bool {return _storage._hotwordEntrance != nil}
  /// Clears the value of `hotwordEntrance`. Subsequent reads from it will return its default value.
  mutating func clearHotwordEntrance() {_uniqueStorage()._hotwordEntrance = nil}

  /// 直播小卡的角标
  var cornerMarkStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._cornerMarkStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._cornerMarkStyle = newValue}
  }
  /// Returns true if `cornerMarkStyle` has been explicitly set.
  var hasCornerMarkStyle: Bool {return _storage._cornerMarkStyle != nil}
  /// Clears the value of `cornerMarkStyle`. Subsequent reads from it will return its default value.
  mutating func clearCornerMarkStyle() {_uniqueStorage()._cornerMarkStyle = nil}

  /// 右侧文案1图标id
  var rightIcon1: Int32 {
    get {return _storage._rightIcon1}
    set {_uniqueStorage()._rightIcon1 = newValue}
  }

  /// 右侧文案2图标id
  var rightIcon2: Int32 {
    get {return _storage._rightIcon2}
    set {_uniqueStorage()._rightIcon2 = newValue}
  }

  /// 左上角角标
  var leftCornerMarkStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._leftCornerMarkStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._leftCornerMarkStyle = newValue}
  }
  /// Returns true if `leftCornerMarkStyle` has been explicitly set.
  var hasLeftCornerMarkStyle: Bool {return _storage._leftCornerMarkStyle != nil}
  /// Clears the value of `leftCornerMarkStyle`. Subsequent reads from it will return its default value.
  mutating func clearLeftCornerMarkStyle() {_uniqueStorage()._leftCornerMarkStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_App_Card_V1_HotwordEntrance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hotwordID: Int64 = 0

  var hotText: String = String()

  var h5URL: String = String()

  var icon: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_App_Card_V1_LargeCoverV1 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 条目基本信息
  var base: Bilibili_App_Card_V1_Base {
    get {return _storage._base ?? Bilibili_App_Card_V1_Base()}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_uniqueStorage()._base = nil}

  var coverGif: String {
    get {return _storage._coverGif}
    set {_uniqueStorage()._coverGif = newValue}
  }

  var avatar: Bilibili_App_Card_V1_Avatar {
    get {return _storage._avatar ?? Bilibili_App_Card_V1_Avatar()}
    set {_uniqueStorage()._avatar = newValue}
  }
  /// Returns true if `avatar` has been explicitly set.
  var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
  mutating func clearAvatar() {_uniqueStorage()._avatar = nil}

  var coverLeftText1: String {
    get {return _storage._coverLeftText1}
    set {_uniqueStorage()._coverLeftText1 = newValue}
  }

  var coverLeftText2: String {
    get {return _storage._coverLeftText2}
    set {_uniqueStorage()._coverLeftText2 = newValue}
  }

  var coverLeftText3: String {
    get {return _storage._coverLeftText3}
    set {_uniqueStorage()._coverLeftText3 = newValue}
  }

  var coverBadge: String {
    get {return _storage._coverBadge}
    set {_uniqueStorage()._coverBadge = newValue}
  }

  var topRcmdReason: String {
    get {return _storage._topRcmdReason}
    set {_uniqueStorage()._topRcmdReason = newValue}
  }

  var bottomRcmdReason: String {
    get {return _storage._bottomRcmdReason}
    set {_uniqueStorage()._bottomRcmdReason = newValue}
  }

  var desc: String {
    get {return _storage._desc}
    set {_uniqueStorage()._desc = newValue}
  }

  var officialIcon: Int32 {
    get {return _storage._officialIcon}
    set {_uniqueStorage()._officialIcon = newValue}
  }

  var canPlay: Int32 {
    get {return _storage._canPlay}
    set {_uniqueStorage()._canPlay = newValue}
  }

  var topRcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._topRcmdReasonStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._topRcmdReasonStyle = newValue}
  }
  /// Returns true if `topRcmdReasonStyle` has been explicitly set.
  var hasTopRcmdReasonStyle: Bool {return _storage._topRcmdReasonStyle != nil}
  /// Clears the value of `topRcmdReasonStyle`. Subsequent reads from it will return its default value.
  mutating func clearTopRcmdReasonStyle() {_uniqueStorage()._topRcmdReasonStyle = nil}

  var bottomRcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._bottomRcmdReasonStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._bottomRcmdReasonStyle = newValue}
  }
  /// Returns true if `bottomRcmdReasonStyle` has been explicitly set.
  var hasBottomRcmdReasonStyle: Bool {return _storage._bottomRcmdReasonStyle != nil}
  /// Clears the value of `bottomRcmdReasonStyle`. Subsequent reads from it will return its default value.
  mutating func clearBottomRcmdReasonStyle() {_uniqueStorage()._bottomRcmdReasonStyle = nil}

  var rcmdReasonStyleV2: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._rcmdReasonStyleV2 ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._rcmdReasonStyleV2 = newValue}
  }
  /// Returns true if `rcmdReasonStyleV2` has been explicitly set.
  var hasRcmdReasonStyleV2: Bool {return _storage._rcmdReasonStyleV2 != nil}
  /// Clears the value of `rcmdReasonStyleV2`. Subsequent reads from it will return its default value.
  mutating func clearRcmdReasonStyleV2() {_uniqueStorage()._rcmdReasonStyleV2 = nil}

  var leftCoverBadgeStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._leftCoverBadgeStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._leftCoverBadgeStyle = newValue}
  }
  /// Returns true if `leftCoverBadgeStyle` has been explicitly set.
  var hasLeftCoverBadgeStyle: Bool {return _storage._leftCoverBadgeStyle != nil}
  /// Clears the value of `leftCoverBadgeStyle`. Subsequent reads from it will return its default value.
  mutating func clearLeftCoverBadgeStyle() {_uniqueStorage()._leftCoverBadgeStyle = nil}

  var rightCoverBadgeStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._rightCoverBadgeStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._rightCoverBadgeStyle = newValue}
  }
  /// Returns true if `rightCoverBadgeStyle` has been explicitly set.
  var hasRightCoverBadgeStyle: Bool {return _storage._rightCoverBadgeStyle != nil}
  /// Clears the value of `rightCoverBadgeStyle`. Subsequent reads from it will return its default value.
  mutating func clearRightCoverBadgeStyle() {_uniqueStorage()._rightCoverBadgeStyle = nil}

  var coverBadge2: String {
    get {return _storage._coverBadge2}
    set {_uniqueStorage()._coverBadge2 = newValue}
  }

  var likeButton: Bilibili_App_Card_V1_LikeButton {
    get {return _storage._likeButton ?? Bilibili_App_Card_V1_LikeButton()}
    set {_uniqueStorage()._likeButton = newValue}
  }
  /// Returns true if `likeButton` has been explicitly set.
  var hasLikeButton: Bool {return _storage._likeButton != nil}
  /// Clears the value of `likeButton`. Subsequent reads from it will return its default value.
  mutating func clearLikeButton() {_uniqueStorage()._likeButton = nil}

  var titleSingleLine: Int32 {
    get {return _storage._titleSingleLine}
    set {_uniqueStorage()._titleSingleLine = newValue}
  }

  var coverRightText: String {
    get {return _storage._coverRightText}
    set {_uniqueStorage()._coverRightText = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_App_Card_V1_ThreeItemAllV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 条目基本信息
  var base: Bilibili_App_Card_V1_Base {
    get {return _storage._base ?? Bilibili_App_Card_V1_Base()}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_uniqueStorage()._base = nil}

  var topRcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._topRcmdReasonStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._topRcmdReasonStyle = newValue}
  }
  /// Returns true if `topRcmdReasonStyle` has been explicitly set.
  var hasTopRcmdReasonStyle: Bool {return _storage._topRcmdReasonStyle != nil}
  /// Clears the value of `topRcmdReasonStyle`. Subsequent reads from it will return its default value.
  mutating func clearTopRcmdReasonStyle() {_uniqueStorage()._topRcmdReasonStyle = nil}

  var item: [Bilibili_App_Card_V1_TwoItemHV1Item] {
    get {return _storage._item}
    set {_uniqueStorage()._item = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_App_Card_V1_TwoItemHV1Item {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  var cover: String {
    get {return _storage._cover}
    set {_uniqueStorage()._cover = newValue}
  }

  var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  var param: String {
    get {return _storage._param}
    set {_uniqueStorage()._param = newValue}
  }

  var args: Bilibili_App_Card_V1_Args {
    get {return _storage._args ?? Bilibili_App_Card_V1_Args()}
    set {_uniqueStorage()._args = newValue}
  }
  /// Returns true if `args` has been explicitly set.
  var hasArgs: Bool {return _storage._args != nil}
  /// Clears the value of `args`. Subsequent reads from it will return its default value.
  mutating func clearArgs() {_uniqueStorage()._args = nil}

  var goto: String {
    get {return _storage._goto}
    set {_uniqueStorage()._goto = newValue}
  }

  var coverLeftText1: String {
    get {return _storage._coverLeftText1}
    set {_uniqueStorage()._coverLeftText1 = newValue}
  }

  var coverLeftIcon1: Int32 {
    get {return _storage._coverLeftIcon1}
    set {_uniqueStorage()._coverLeftIcon1 = newValue}
  }

  var coverRightText: String {
    get {return _storage._coverRightText}
    set {_uniqueStorage()._coverRightText = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 推荐
struct Bilibili_App_Card_V1_RcmdOneItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 条目基本信息
  var base: Bilibili_App_Card_V1_Base {
    get {return _storage._base ?? Bilibili_App_Card_V1_Base()}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_uniqueStorage()._base = nil}

  /// 标签框信息
  var topRcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._topRcmdReasonStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._topRcmdReasonStyle = newValue}
  }
  /// Returns true if `topRcmdReasonStyle` has been explicitly set.
  var hasTopRcmdReasonStyle: Bool {return _storage._topRcmdReasonStyle != nil}
  /// Clears the value of `topRcmdReasonStyle`. Subsequent reads from it will return its default value.
  mutating func clearTopRcmdReasonStyle() {_uniqueStorage()._topRcmdReasonStyle = nil}

  /// 小封面推荐内容信息
  var item: Bilibili_App_Card_V1_SmallCoverRcmdItem {
    get {return _storage._item ?? Bilibili_App_Card_V1_SmallCoverRcmdItem()}
    set {_uniqueStorage()._item = newValue}
  }
  /// Returns true if `item` has been explicitly set.
  var hasItem: Bool {return _storage._item != nil}
  /// Clears the value of `item`. Subsequent reads from it will return its default value.
  mutating func clearItem() {_uniqueStorage()._item = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 小封面推荐内容信息
struct Bilibili_App_Card_V1_SmallCoverRcmdItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标题
  var title: String = String()

  /// 封面url
  var cover: String = String()

  /// 跳转uri
  var uri: String = String()

  /// 参数
  var param: String = String()

  /// 跳转类型
  /// av:视频稿件
  var goto: String = String()

  /// 封面右下角标文案
  var coverRightText1: String = String()

  /// 右侧文案1
  var rightDesc1: String = String()

  /// 右侧文案2
  var rightDesc2: String = String()

  var coverGif: String = String()

  /// 右侧文案1图标id
  var rightIcon1: Int32 = 0

  /// 右侧文案2图标id
  var rightIcon2: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_App_Card_V1_ThreeItemV1 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 条目基本信息
  var base: Bilibili_App_Card_V1_Base {
    get {return _base ?? Bilibili_App_Card_V1_Base()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var titleIcon: Int32 = 0

  var moreUri: String = String()

  var moreText: String = String()

  var items: [Bilibili_App_Card_V1_ThreeItemV1Item] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Bilibili_App_Card_V1_Base? = nil
}

struct Bilibili_App_Card_V1_ThreeItemV1Item {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 条目基本信息
  var base: Bilibili_App_Card_V1_Base {
    get {return _base ?? Bilibili_App_Card_V1_Base()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var coverLeftText: String = String()

  var coverLeftIcon: Int32 = 0

  var desc1: String = String()

  var desc2: String = String()

  var badge: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Bilibili_App_Card_V1_Base? = nil
}

struct Bilibili_App_Card_V1_HotTopicItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cover: String = String()

  var uri: String = String()

  var param: String = String()

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_App_Card_V1_HotTopic {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 条目基本信息
  var base: Bilibili_App_Card_V1_Base {
    get {return _base ?? Bilibili_App_Card_V1_Base()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var desc: String = String()

  var items: [Bilibili_App_Card_V1_HotTopicItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Bilibili_App_Card_V1_Base? = nil
}

struct Bilibili_App_Card_V1_DynamicHot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 条目基本信息
  var base: Bilibili_App_Card_V1_Base {
    get {return _storage._base ?? Bilibili_App_Card_V1_Base()}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_uniqueStorage()._base = nil}

  var topLeftTitle: String {
    get {return _storage._topLeftTitle}
    set {_uniqueStorage()._topLeftTitle = newValue}
  }

  var desc1: String {
    get {return _storage._desc1}
    set {_uniqueStorage()._desc1 = newValue}
  }

  var desc2: String {
    get {return _storage._desc2}
    set {_uniqueStorage()._desc2 = newValue}
  }

  var moreUri: String {
    get {return _storage._moreUri}
    set {_uniqueStorage()._moreUri = newValue}
  }

  var moreText: String {
    get {return _storage._moreText}
    set {_uniqueStorage()._moreText = newValue}
  }

  var covers: [String] {
    get {return _storage._covers}
    set {_uniqueStorage()._covers = newValue}
  }

  var coverRightText: String {
    get {return _storage._coverRightText}
    set {_uniqueStorage()._coverRightText = newValue}
  }

  var topRcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._topRcmdReasonStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._topRcmdReasonStyle = newValue}
  }
  /// Returns true if `topRcmdReasonStyle` has been explicitly set.
  var hasTopRcmdReasonStyle: Bool {return _storage._topRcmdReasonStyle != nil}
  /// Clears the value of `topRcmdReasonStyle`. Subsequent reads from it will return its default value.
  mutating func clearTopRcmdReasonStyle() {_uniqueStorage()._topRcmdReasonStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_App_Card_V1_MiddleCoverV3 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 条目基本信息
  var base: Bilibili_App_Card_V1_Base {
    get {return _storage._base ?? Bilibili_App_Card_V1_Base()}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_uniqueStorage()._base = nil}

  var desc1: String {
    get {return _storage._desc1}
    set {_uniqueStorage()._desc1 = newValue}
  }

  var desc2: String {
    get {return _storage._desc2}
    set {_uniqueStorage()._desc2 = newValue}
  }

  var coverBadgeStyle: Bilibili_App_Card_V1_ReasonStyle {
    get {return _storage._coverBadgeStyle ?? Bilibili_App_Card_V1_ReasonStyle()}
    set {_uniqueStorage()._coverBadgeStyle = newValue}
  }
  /// Returns true if `coverBadgeStyle` has been explicitly set.
  var hasCoverBadgeStyle: Bool {return _storage._coverBadgeStyle != nil}
  /// Clears the value of `coverBadgeStyle`. Subsequent reads from it will return its default value.
  mutating func clearCoverBadgeStyle() {_uniqueStorage()._coverBadgeStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_App_Card_V1_LargeCoverV4 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 条目基本信息
  var base: Bilibili_App_Card_V1_Base {
    get {return _base ?? Bilibili_App_Card_V1_Base()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var coverLeftText1: String = String()

  var coverLeftText2: String = String()

  var coverLeftText3: String = String()

  var coverBadge: String = String()

  var canPlay: Int32 = 0

  var up: Bilibili_App_Card_V1_Up {
    get {return _up ?? Bilibili_App_Card_V1_Up()}
    set {_up = newValue}
  }
  /// Returns true if `up` has been explicitly set.
  var hasUp: Bool {return self._up != nil}
  /// Clears the value of `up`. Subsequent reads from it will return its default value.
  mutating func clearUp() {self._up = nil}

  var shortLink: String = String()

  var shareSubtitle: String = String()

  var playNumber: String = String()

  var bvid: String = String()

  var subParam: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Bilibili_App_Card_V1_Base? = nil
  fileprivate var _up: Bilibili_App_Card_V1_Up? = nil
}

/// 热门列表顶部按钮
struct Bilibili_App_Card_V1_PopularTopEntrance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 条目基本信息
  var base: Bilibili_App_Card_V1_Base {
    get {return _base ?? Bilibili_App_Card_V1_Base()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  /// 按钮项
  var items: [Bilibili_App_Card_V1_EntranceItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Bilibili_App_Card_V1_Base? = nil
}

/// 热门列表按钮信息
struct Bilibili_App_Card_V1_EntranceItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 跳转类型
  var goto: String = String()

  /// 图标url
  var icon: String = String()

  /// 标题
  var title: String = String()

  /// 入口模块id
  var moduleID: String = String()

  /// 跳转uri
  var uri: String = String()

  /// 入口id
  var entranceID: Int64 = 0

  /// 气泡信息
  var bubble: Bilibili_App_Card_V1_Bubble {
    get {return _bubble ?? Bilibili_App_Card_V1_Bubble()}
    set {_bubble = newValue}
  }
  /// Returns true if `bubble` has been explicitly set.
  var hasBubble: Bool {return self._bubble != nil}
  /// Clears the value of `bubble`. Subsequent reads from it will return its default value.
  mutating func clearBubble() {self._bubble = nil}

  /// 入口类型
  /// 1:代表分品类热门
  var entranceType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _bubble: Bilibili_App_Card_V1_Bubble? = nil
}

/// 气泡信息
struct Bilibili_App_Card_V1_Bubble {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 文案
  var bubbleContent: String = String()

  /// 版本
  var version: Int32 = 0

  /// 起始时间
  var stime: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Bilibili_App_Card_V1_SmallCoverV5: @unchecked Sendable {}
extension Bilibili_App_Card_V1_HotwordEntrance: @unchecked Sendable {}
extension Bilibili_App_Card_V1_LargeCoverV1: @unchecked Sendable {}
extension Bilibili_App_Card_V1_ThreeItemAllV2: @unchecked Sendable {}
extension Bilibili_App_Card_V1_TwoItemHV1Item: @unchecked Sendable {}
extension Bilibili_App_Card_V1_RcmdOneItem: @unchecked Sendable {}
extension Bilibili_App_Card_V1_SmallCoverRcmdItem: @unchecked Sendable {}
extension Bilibili_App_Card_V1_ThreeItemV1: @unchecked Sendable {}
extension Bilibili_App_Card_V1_ThreeItemV1Item: @unchecked Sendable {}
extension Bilibili_App_Card_V1_HotTopicItem: @unchecked Sendable {}
extension Bilibili_App_Card_V1_HotTopic: @unchecked Sendable {}
extension Bilibili_App_Card_V1_DynamicHot: @unchecked Sendable {}
extension Bilibili_App_Card_V1_MiddleCoverV3: @unchecked Sendable {}
extension Bilibili_App_Card_V1_LargeCoverV4: @unchecked Sendable {}
extension Bilibili_App_Card_V1_PopularTopEntrance: @unchecked Sendable {}
extension Bilibili_App_Card_V1_EntranceItem: @unchecked Sendable {}
extension Bilibili_App_Card_V1_Bubble: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bilibili.app.card.v1"

extension Bilibili_App_Card_V1_SmallCoverV5: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SmallCoverV5"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "cover_gif"),
    3: .same(proto: "up"),
    4: .standard(proto: "cover_right_text_1"),
    5: .standard(proto: "right_desc_1"),
    6: .standard(proto: "right_desc_2"),
    7: .standard(proto: "rcmd_reason_style"),
    8: .standard(proto: "hotword_entrance"),
    9: .standard(proto: "corner_mark_style"),
    10: .standard(proto: "right_icon_1"),
    11: .standard(proto: "right_icon_2"),
    12: .standard(proto: "left_corner_mark_style"),
  ]

  fileprivate class _StorageClass {
    var _base: Bilibili_App_Card_V1_Base? = nil
    var _coverGif: String = String()
    var _up: Bilibili_App_Card_V1_Up? = nil
    var _coverRightText1: String = String()
    var _rightDesc1: String = String()
    var _rightDesc2: String = String()
    var _rcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle? = nil
    var _hotwordEntrance: Bilibili_App_Card_V1_HotwordEntrance? = nil
    var _cornerMarkStyle: Bilibili_App_Card_V1_ReasonStyle? = nil
    var _rightIcon1: Int32 = 0
    var _rightIcon2: Int32 = 0
    var _leftCornerMarkStyle: Bilibili_App_Card_V1_ReasonStyle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _base = source._base
      _coverGif = source._coverGif
      _up = source._up
      _coverRightText1 = source._coverRightText1
      _rightDesc1 = source._rightDesc1
      _rightDesc2 = source._rightDesc2
      _rcmdReasonStyle = source._rcmdReasonStyle
      _hotwordEntrance = source._hotwordEntrance
      _cornerMarkStyle = source._cornerMarkStyle
      _rightIcon1 = source._rightIcon1
      _rightIcon2 = source._rightIcon2
      _leftCornerMarkStyle = source._leftCornerMarkStyle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._base) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._coverGif) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._up) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._coverRightText1) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._rightDesc1) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._rightDesc2) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._rcmdReasonStyle) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._hotwordEntrance) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._cornerMarkStyle) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._rightIcon1) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._rightIcon2) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._leftCornerMarkStyle) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._coverGif.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverGif, fieldNumber: 2)
      }
      try { if let v = _storage._up {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._coverRightText1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverRightText1, fieldNumber: 4)
      }
      if !_storage._rightDesc1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rightDesc1, fieldNumber: 5)
      }
      if !_storage._rightDesc2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rightDesc2, fieldNumber: 6)
      }
      try { if let v = _storage._rcmdReasonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._hotwordEntrance {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._cornerMarkStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if _storage._rightIcon1 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._rightIcon1, fieldNumber: 10)
      }
      if _storage._rightIcon2 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._rightIcon2, fieldNumber: 11)
      }
      try { if let v = _storage._leftCornerMarkStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_SmallCoverV5, rhs: Bilibili_App_Card_V1_SmallCoverV5) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._base != rhs_storage._base {return false}
        if _storage._coverGif != rhs_storage._coverGif {return false}
        if _storage._up != rhs_storage._up {return false}
        if _storage._coverRightText1 != rhs_storage._coverRightText1 {return false}
        if _storage._rightDesc1 != rhs_storage._rightDesc1 {return false}
        if _storage._rightDesc2 != rhs_storage._rightDesc2 {return false}
        if _storage._rcmdReasonStyle != rhs_storage._rcmdReasonStyle {return false}
        if _storage._hotwordEntrance != rhs_storage._hotwordEntrance {return false}
        if _storage._cornerMarkStyle != rhs_storage._cornerMarkStyle {return false}
        if _storage._rightIcon1 != rhs_storage._rightIcon1 {return false}
        if _storage._rightIcon2 != rhs_storage._rightIcon2 {return false}
        if _storage._leftCornerMarkStyle != rhs_storage._leftCornerMarkStyle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_HotwordEntrance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HotwordEntrance"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hotword_id"),
    2: .standard(proto: "hot_text"),
    3: .standard(proto: "h5_url"),
    4: .same(proto: "icon"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.hotwordID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.hotText) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.h5URL) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hotwordID != 0 {
      try visitor.visitSingularInt64Field(value: self.hotwordID, fieldNumber: 1)
    }
    if !self.hotText.isEmpty {
      try visitor.visitSingularStringField(value: self.hotText, fieldNumber: 2)
    }
    if !self.h5URL.isEmpty {
      try visitor.visitSingularStringField(value: self.h5URL, fieldNumber: 3)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_HotwordEntrance, rhs: Bilibili_App_Card_V1_HotwordEntrance) -> Bool {
    if lhs.hotwordID != rhs.hotwordID {return false}
    if lhs.hotText != rhs.hotText {return false}
    if lhs.h5URL != rhs.h5URL {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_LargeCoverV1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LargeCoverV1"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "cover_gif"),
    3: .same(proto: "avatar"),
    4: .standard(proto: "cover_left_text_1"),
    5: .standard(proto: "cover_left_text_2"),
    6: .standard(proto: "cover_left_text_3"),
    7: .standard(proto: "cover_badge"),
    8: .standard(proto: "top_rcmd_reason"),
    9: .standard(proto: "bottom_rcmd_reason"),
    10: .same(proto: "desc"),
    11: .standard(proto: "official_icon"),
    12: .standard(proto: "can_play"),
    13: .standard(proto: "top_rcmd_reason_style"),
    14: .standard(proto: "bottom_rcmd_reason_style"),
    15: .standard(proto: "rcmd_reason_style_v2"),
    16: .standard(proto: "left_cover_badge_style"),
    17: .standard(proto: "right_cover_badge_style"),
    18: .standard(proto: "cover_badge_2"),
    19: .standard(proto: "like_button"),
    20: .standard(proto: "title_single_line"),
    21: .standard(proto: "cover_right_text"),
  ]

  fileprivate class _StorageClass {
    var _base: Bilibili_App_Card_V1_Base? = nil
    var _coverGif: String = String()
    var _avatar: Bilibili_App_Card_V1_Avatar? = nil
    var _coverLeftText1: String = String()
    var _coverLeftText2: String = String()
    var _coverLeftText3: String = String()
    var _coverBadge: String = String()
    var _topRcmdReason: String = String()
    var _bottomRcmdReason: String = String()
    var _desc: String = String()
    var _officialIcon: Int32 = 0
    var _canPlay: Int32 = 0
    var _topRcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle? = nil
    var _bottomRcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle? = nil
    var _rcmdReasonStyleV2: Bilibili_App_Card_V1_ReasonStyle? = nil
    var _leftCoverBadgeStyle: Bilibili_App_Card_V1_ReasonStyle? = nil
    var _rightCoverBadgeStyle: Bilibili_App_Card_V1_ReasonStyle? = nil
    var _coverBadge2: String = String()
    var _likeButton: Bilibili_App_Card_V1_LikeButton? = nil
    var _titleSingleLine: Int32 = 0
    var _coverRightText: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _base = source._base
      _coverGif = source._coverGif
      _avatar = source._avatar
      _coverLeftText1 = source._coverLeftText1
      _coverLeftText2 = source._coverLeftText2
      _coverLeftText3 = source._coverLeftText3
      _coverBadge = source._coverBadge
      _topRcmdReason = source._topRcmdReason
      _bottomRcmdReason = source._bottomRcmdReason
      _desc = source._desc
      _officialIcon = source._officialIcon
      _canPlay = source._canPlay
      _topRcmdReasonStyle = source._topRcmdReasonStyle
      _bottomRcmdReasonStyle = source._bottomRcmdReasonStyle
      _rcmdReasonStyleV2 = source._rcmdReasonStyleV2
      _leftCoverBadgeStyle = source._leftCoverBadgeStyle
      _rightCoverBadgeStyle = source._rightCoverBadgeStyle
      _coverBadge2 = source._coverBadge2
      _likeButton = source._likeButton
      _titleSingleLine = source._titleSingleLine
      _coverRightText = source._coverRightText
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._base) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._coverGif) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._avatar) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText1) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText2) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText3) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._coverBadge) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._topRcmdReason) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._bottomRcmdReason) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._desc) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._officialIcon) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._canPlay) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._topRcmdReasonStyle) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._bottomRcmdReasonStyle) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._rcmdReasonStyleV2) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._leftCoverBadgeStyle) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._rightCoverBadgeStyle) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._coverBadge2) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._likeButton) }()
        case 20: try { try decoder.decodeSingularInt32Field(value: &_storage._titleSingleLine) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._coverRightText) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._coverGif.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverGif, fieldNumber: 2)
      }
      try { if let v = _storage._avatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._coverLeftText1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText1, fieldNumber: 4)
      }
      if !_storage._coverLeftText2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText2, fieldNumber: 5)
      }
      if !_storage._coverLeftText3.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText3, fieldNumber: 6)
      }
      if !_storage._coverBadge.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverBadge, fieldNumber: 7)
      }
      if !_storage._topRcmdReason.isEmpty {
        try visitor.visitSingularStringField(value: _storage._topRcmdReason, fieldNumber: 8)
      }
      if !_storage._bottomRcmdReason.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bottomRcmdReason, fieldNumber: 9)
      }
      if !_storage._desc.isEmpty {
        try visitor.visitSingularStringField(value: _storage._desc, fieldNumber: 10)
      }
      if _storage._officialIcon != 0 {
        try visitor.visitSingularInt32Field(value: _storage._officialIcon, fieldNumber: 11)
      }
      if _storage._canPlay != 0 {
        try visitor.visitSingularInt32Field(value: _storage._canPlay, fieldNumber: 12)
      }
      try { if let v = _storage._topRcmdReasonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._bottomRcmdReasonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._rcmdReasonStyleV2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._leftCoverBadgeStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._rightCoverBadgeStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      if !_storage._coverBadge2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverBadge2, fieldNumber: 18)
      }
      try { if let v = _storage._likeButton {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      if _storage._titleSingleLine != 0 {
        try visitor.visitSingularInt32Field(value: _storage._titleSingleLine, fieldNumber: 20)
      }
      if !_storage._coverRightText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverRightText, fieldNumber: 21)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_LargeCoverV1, rhs: Bilibili_App_Card_V1_LargeCoverV1) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._base != rhs_storage._base {return false}
        if _storage._coverGif != rhs_storage._coverGif {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._coverLeftText1 != rhs_storage._coverLeftText1 {return false}
        if _storage._coverLeftText2 != rhs_storage._coverLeftText2 {return false}
        if _storage._coverLeftText3 != rhs_storage._coverLeftText3 {return false}
        if _storage._coverBadge != rhs_storage._coverBadge {return false}
        if _storage._topRcmdReason != rhs_storage._topRcmdReason {return false}
        if _storage._bottomRcmdReason != rhs_storage._bottomRcmdReason {return false}
        if _storage._desc != rhs_storage._desc {return false}
        if _storage._officialIcon != rhs_storage._officialIcon {return false}
        if _storage._canPlay != rhs_storage._canPlay {return false}
        if _storage._topRcmdReasonStyle != rhs_storage._topRcmdReasonStyle {return false}
        if _storage._bottomRcmdReasonStyle != rhs_storage._bottomRcmdReasonStyle {return false}
        if _storage._rcmdReasonStyleV2 != rhs_storage._rcmdReasonStyleV2 {return false}
        if _storage._leftCoverBadgeStyle != rhs_storage._leftCoverBadgeStyle {return false}
        if _storage._rightCoverBadgeStyle != rhs_storage._rightCoverBadgeStyle {return false}
        if _storage._coverBadge2 != rhs_storage._coverBadge2 {return false}
        if _storage._likeButton != rhs_storage._likeButton {return false}
        if _storage._titleSingleLine != rhs_storage._titleSingleLine {return false}
        if _storage._coverRightText != rhs_storage._coverRightText {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_ThreeItemAllV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreeItemAllV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "top_rcmd_reason_style"),
    3: .same(proto: "item"),
  ]

  fileprivate class _StorageClass {
    var _base: Bilibili_App_Card_V1_Base? = nil
    var _topRcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle? = nil
    var _item: [Bilibili_App_Card_V1_TwoItemHV1Item] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _base = source._base
      _topRcmdReasonStyle = source._topRcmdReasonStyle
      _item = source._item
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._base) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._topRcmdReasonStyle) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._item) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._topRcmdReasonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._item.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._item, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_ThreeItemAllV2, rhs: Bilibili_App_Card_V1_ThreeItemAllV2) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._base != rhs_storage._base {return false}
        if _storage._topRcmdReasonStyle != rhs_storage._topRcmdReasonStyle {return false}
        if _storage._item != rhs_storage._item {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_TwoItemHV1Item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TwoItemHV1Item"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "cover"),
    3: .same(proto: "uri"),
    4: .same(proto: "param"),
    5: .same(proto: "args"),
    6: .same(proto: "goto"),
    7: .standard(proto: "cover_left_text_1"),
    8: .standard(proto: "cover_left_icon_1"),
    9: .standard(proto: "cover_right_text"),
  ]

  fileprivate class _StorageClass {
    var _title: String = String()
    var _cover: String = String()
    var _uri: String = String()
    var _param: String = String()
    var _args: Bilibili_App_Card_V1_Args? = nil
    var _goto: String = String()
    var _coverLeftText1: String = String()
    var _coverLeftIcon1: Int32 = 0
    var _coverRightText: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _title = source._title
      _cover = source._cover
      _uri = source._uri
      _param = source._param
      _args = source._args
      _goto = source._goto
      _coverLeftText1 = source._coverLeftText1
      _coverLeftIcon1 = source._coverLeftIcon1
      _coverRightText = source._coverRightText
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._cover) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._uri) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._param) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._args) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._goto) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText1) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._coverLeftIcon1) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._coverRightText) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 1)
      }
      if !_storage._cover.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cover, fieldNumber: 2)
      }
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 3)
      }
      if !_storage._param.isEmpty {
        try visitor.visitSingularStringField(value: _storage._param, fieldNumber: 4)
      }
      try { if let v = _storage._args {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if !_storage._goto.isEmpty {
        try visitor.visitSingularStringField(value: _storage._goto, fieldNumber: 6)
      }
      if !_storage._coverLeftText1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText1, fieldNumber: 7)
      }
      if _storage._coverLeftIcon1 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coverLeftIcon1, fieldNumber: 8)
      }
      if !_storage._coverRightText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverRightText, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_TwoItemHV1Item, rhs: Bilibili_App_Card_V1_TwoItemHV1Item) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._title != rhs_storage._title {return false}
        if _storage._cover != rhs_storage._cover {return false}
        if _storage._uri != rhs_storage._uri {return false}
        if _storage._param != rhs_storage._param {return false}
        if _storage._args != rhs_storage._args {return false}
        if _storage._goto != rhs_storage._goto {return false}
        if _storage._coverLeftText1 != rhs_storage._coverLeftText1 {return false}
        if _storage._coverLeftIcon1 != rhs_storage._coverLeftIcon1 {return false}
        if _storage._coverRightText != rhs_storage._coverRightText {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_RcmdOneItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RcmdOneItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "topRcmdReasonStyle"),
    3: .same(proto: "item"),
  ]

  fileprivate class _StorageClass {
    var _base: Bilibili_App_Card_V1_Base? = nil
    var _topRcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle? = nil
    var _item: Bilibili_App_Card_V1_SmallCoverRcmdItem? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _base = source._base
      _topRcmdReasonStyle = source._topRcmdReasonStyle
      _item = source._item
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._base) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._topRcmdReasonStyle) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._item) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._topRcmdReasonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._item {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_RcmdOneItem, rhs: Bilibili_App_Card_V1_RcmdOneItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._base != rhs_storage._base {return false}
        if _storage._topRcmdReasonStyle != rhs_storage._topRcmdReasonStyle {return false}
        if _storage._item != rhs_storage._item {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_SmallCoverRcmdItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SmallCoverRcmdItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "cover"),
    3: .same(proto: "uri"),
    4: .same(proto: "param"),
    5: .same(proto: "goto"),
    6: .same(proto: "coverRightText1"),
    7: .same(proto: "rightDesc1"),
    8: .same(proto: "rightDesc2"),
    9: .same(proto: "coverGif"),
    10: .same(proto: "rightIcon1"),
    11: .same(proto: "rightIcon2"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cover) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.param) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.goto) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.coverRightText1) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.rightDesc1) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.rightDesc2) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.coverGif) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.rightIcon1) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self.rightIcon2) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.cover.isEmpty {
      try visitor.visitSingularStringField(value: self.cover, fieldNumber: 2)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 3)
    }
    if !self.param.isEmpty {
      try visitor.visitSingularStringField(value: self.param, fieldNumber: 4)
    }
    if !self.goto.isEmpty {
      try visitor.visitSingularStringField(value: self.goto, fieldNumber: 5)
    }
    if !self.coverRightText1.isEmpty {
      try visitor.visitSingularStringField(value: self.coverRightText1, fieldNumber: 6)
    }
    if !self.rightDesc1.isEmpty {
      try visitor.visitSingularStringField(value: self.rightDesc1, fieldNumber: 7)
    }
    if !self.rightDesc2.isEmpty {
      try visitor.visitSingularStringField(value: self.rightDesc2, fieldNumber: 8)
    }
    if !self.coverGif.isEmpty {
      try visitor.visitSingularStringField(value: self.coverGif, fieldNumber: 9)
    }
    if self.rightIcon1 != 0 {
      try visitor.visitSingularInt32Field(value: self.rightIcon1, fieldNumber: 10)
    }
    if self.rightIcon2 != 0 {
      try visitor.visitSingularInt32Field(value: self.rightIcon2, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_SmallCoverRcmdItem, rhs: Bilibili_App_Card_V1_SmallCoverRcmdItem) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.cover != rhs.cover {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.param != rhs.param {return false}
    if lhs.goto != rhs.goto {return false}
    if lhs.coverRightText1 != rhs.coverRightText1 {return false}
    if lhs.rightDesc1 != rhs.rightDesc1 {return false}
    if lhs.rightDesc2 != rhs.rightDesc2 {return false}
    if lhs.coverGif != rhs.coverGif {return false}
    if lhs.rightIcon1 != rhs.rightIcon1 {return false}
    if lhs.rightIcon2 != rhs.rightIcon2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_ThreeItemV1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreeItemV1"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "titleIcon"),
    3: .same(proto: "moreUri"),
    4: .same(proto: "moreText"),
    5: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.titleIcon) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.moreUri) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.moreText) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.titleIcon != 0 {
      try visitor.visitSingularInt32Field(value: self.titleIcon, fieldNumber: 2)
    }
    if !self.moreUri.isEmpty {
      try visitor.visitSingularStringField(value: self.moreUri, fieldNumber: 3)
    }
    if !self.moreText.isEmpty {
      try visitor.visitSingularStringField(value: self.moreText, fieldNumber: 4)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_ThreeItemV1, rhs: Bilibili_App_Card_V1_ThreeItemV1) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.titleIcon != rhs.titleIcon {return false}
    if lhs.moreUri != rhs.moreUri {return false}
    if lhs.moreText != rhs.moreText {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_ThreeItemV1Item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreeItemV1Item"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "coverLeftText"),
    3: .same(proto: "coverLeftIcon"),
    4: .same(proto: "desc1"),
    5: .same(proto: "desc2"),
    6: .same(proto: "badge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.coverLeftText) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.coverLeftIcon) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.desc1) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.desc2) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.badge) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.coverLeftText.isEmpty {
      try visitor.visitSingularStringField(value: self.coverLeftText, fieldNumber: 2)
    }
    if self.coverLeftIcon != 0 {
      try visitor.visitSingularInt32Field(value: self.coverLeftIcon, fieldNumber: 3)
    }
    if !self.desc1.isEmpty {
      try visitor.visitSingularStringField(value: self.desc1, fieldNumber: 4)
    }
    if !self.desc2.isEmpty {
      try visitor.visitSingularStringField(value: self.desc2, fieldNumber: 5)
    }
    if !self.badge.isEmpty {
      try visitor.visitSingularStringField(value: self.badge, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_ThreeItemV1Item, rhs: Bilibili_App_Card_V1_ThreeItemV1Item) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.coverLeftText != rhs.coverLeftText {return false}
    if lhs.coverLeftIcon != rhs.coverLeftIcon {return false}
    if lhs.desc1 != rhs.desc1 {return false}
    if lhs.desc2 != rhs.desc2 {return false}
    if lhs.badge != rhs.badge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_HotTopicItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HotTopicItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cover"),
    2: .same(proto: "uri"),
    3: .same(proto: "param"),
    4: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cover) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.param) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cover.isEmpty {
      try visitor.visitSingularStringField(value: self.cover, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    if !self.param.isEmpty {
      try visitor.visitSingularStringField(value: self.param, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_HotTopicItem, rhs: Bilibili_App_Card_V1_HotTopicItem) -> Bool {
    if lhs.cover != rhs.cover {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.param != rhs.param {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_HotTopic: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HotTopic"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "desc"),
    3: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 2)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_HotTopic, rhs: Bilibili_App_Card_V1_HotTopic) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_DynamicHot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynamicHot"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "top_left_title"),
    3: .same(proto: "desc1"),
    4: .same(proto: "desc2"),
    5: .standard(proto: "more_uri"),
    6: .standard(proto: "more_text"),
    7: .same(proto: "covers"),
    8: .standard(proto: "cover_right_text"),
    9: .standard(proto: "top_rcmd_reason_style"),
  ]

  fileprivate class _StorageClass {
    var _base: Bilibili_App_Card_V1_Base? = nil
    var _topLeftTitle: String = String()
    var _desc1: String = String()
    var _desc2: String = String()
    var _moreUri: String = String()
    var _moreText: String = String()
    var _covers: [String] = []
    var _coverRightText: String = String()
    var _topRcmdReasonStyle: Bilibili_App_Card_V1_ReasonStyle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _base = source._base
      _topLeftTitle = source._topLeftTitle
      _desc1 = source._desc1
      _desc2 = source._desc2
      _moreUri = source._moreUri
      _moreText = source._moreText
      _covers = source._covers
      _coverRightText = source._coverRightText
      _topRcmdReasonStyle = source._topRcmdReasonStyle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._base) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._topLeftTitle) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._desc1) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._desc2) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._moreUri) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._moreText) }()
        case 7: try { try decoder.decodeRepeatedStringField(value: &_storage._covers) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._coverRightText) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._topRcmdReasonStyle) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._topLeftTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._topLeftTitle, fieldNumber: 2)
      }
      if !_storage._desc1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._desc1, fieldNumber: 3)
      }
      if !_storage._desc2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._desc2, fieldNumber: 4)
      }
      if !_storage._moreUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._moreUri, fieldNumber: 5)
      }
      if !_storage._moreText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._moreText, fieldNumber: 6)
      }
      if !_storage._covers.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._covers, fieldNumber: 7)
      }
      if !_storage._coverRightText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverRightText, fieldNumber: 8)
      }
      try { if let v = _storage._topRcmdReasonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_DynamicHot, rhs: Bilibili_App_Card_V1_DynamicHot) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._base != rhs_storage._base {return false}
        if _storage._topLeftTitle != rhs_storage._topLeftTitle {return false}
        if _storage._desc1 != rhs_storage._desc1 {return false}
        if _storage._desc2 != rhs_storage._desc2 {return false}
        if _storage._moreUri != rhs_storage._moreUri {return false}
        if _storage._moreText != rhs_storage._moreText {return false}
        if _storage._covers != rhs_storage._covers {return false}
        if _storage._coverRightText != rhs_storage._coverRightText {return false}
        if _storage._topRcmdReasonStyle != rhs_storage._topRcmdReasonStyle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_MiddleCoverV3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MiddleCoverV3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "desc1"),
    3: .same(proto: "desc2"),
    4: .standard(proto: "cover_badge_style"),
  ]

  fileprivate class _StorageClass {
    var _base: Bilibili_App_Card_V1_Base? = nil
    var _desc1: String = String()
    var _desc2: String = String()
    var _coverBadgeStyle: Bilibili_App_Card_V1_ReasonStyle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _base = source._base
      _desc1 = source._desc1
      _desc2 = source._desc2
      _coverBadgeStyle = source._coverBadgeStyle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._base) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._desc1) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._desc2) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._coverBadgeStyle) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._desc1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._desc1, fieldNumber: 2)
      }
      if !_storage._desc2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._desc2, fieldNumber: 3)
      }
      try { if let v = _storage._coverBadgeStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_MiddleCoverV3, rhs: Bilibili_App_Card_V1_MiddleCoverV3) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._base != rhs_storage._base {return false}
        if _storage._desc1 != rhs_storage._desc1 {return false}
        if _storage._desc2 != rhs_storage._desc2 {return false}
        if _storage._coverBadgeStyle != rhs_storage._coverBadgeStyle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_LargeCoverV4: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LargeCoverV4"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "cover_left_text_1"),
    3: .standard(proto: "cover_left_text_2"),
    4: .standard(proto: "cover_left_text_3"),
    5: .standard(proto: "cover_badge"),
    6: .standard(proto: "can_play"),
    7: .same(proto: "up"),
    8: .standard(proto: "short_link"),
    9: .standard(proto: "share_subtitle"),
    10: .standard(proto: "play_number"),
    11: .same(proto: "bvid"),
    12: .standard(proto: "sub_param"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.coverLeftText1) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.coverLeftText2) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.coverLeftText3) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.coverBadge) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.canPlay) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._up) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.shortLink) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.shareSubtitle) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.playNumber) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.bvid) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.subParam) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.coverLeftText1.isEmpty {
      try visitor.visitSingularStringField(value: self.coverLeftText1, fieldNumber: 2)
    }
    if !self.coverLeftText2.isEmpty {
      try visitor.visitSingularStringField(value: self.coverLeftText2, fieldNumber: 3)
    }
    if !self.coverLeftText3.isEmpty {
      try visitor.visitSingularStringField(value: self.coverLeftText3, fieldNumber: 4)
    }
    if !self.coverBadge.isEmpty {
      try visitor.visitSingularStringField(value: self.coverBadge, fieldNumber: 5)
    }
    if self.canPlay != 0 {
      try visitor.visitSingularInt32Field(value: self.canPlay, fieldNumber: 6)
    }
    try { if let v = self._up {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if !self.shortLink.isEmpty {
      try visitor.visitSingularStringField(value: self.shortLink, fieldNumber: 8)
    }
    if !self.shareSubtitle.isEmpty {
      try visitor.visitSingularStringField(value: self.shareSubtitle, fieldNumber: 9)
    }
    if !self.playNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.playNumber, fieldNumber: 10)
    }
    if !self.bvid.isEmpty {
      try visitor.visitSingularStringField(value: self.bvid, fieldNumber: 11)
    }
    if !self.subParam.isEmpty {
      try visitor.visitSingularStringField(value: self.subParam, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_LargeCoverV4, rhs: Bilibili_App_Card_V1_LargeCoverV4) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.coverLeftText1 != rhs.coverLeftText1 {return false}
    if lhs.coverLeftText2 != rhs.coverLeftText2 {return false}
    if lhs.coverLeftText3 != rhs.coverLeftText3 {return false}
    if lhs.coverBadge != rhs.coverBadge {return false}
    if lhs.canPlay != rhs.canPlay {return false}
    if lhs._up != rhs._up {return false}
    if lhs.shortLink != rhs.shortLink {return false}
    if lhs.shareSubtitle != rhs.shareSubtitle {return false}
    if lhs.playNumber != rhs.playNumber {return false}
    if lhs.bvid != rhs.bvid {return false}
    if lhs.subParam != rhs.subParam {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_PopularTopEntrance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PopularTopEntrance"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_PopularTopEntrance, rhs: Bilibili_App_Card_V1_PopularTopEntrance) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_EntranceItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EntranceItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "goto"),
    2: .same(proto: "icon"),
    3: .same(proto: "title"),
    4: .standard(proto: "module_id"),
    5: .same(proto: "uri"),
    6: .standard(proto: "entrance_id"),
    7: .same(proto: "bubble"),
    8: .standard(proto: "entrance_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.goto) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.moduleID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.entranceID) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._bubble) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.entranceType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.goto.isEmpty {
      try visitor.visitSingularStringField(value: self.goto, fieldNumber: 1)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.moduleID.isEmpty {
      try visitor.visitSingularStringField(value: self.moduleID, fieldNumber: 4)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 5)
    }
    if self.entranceID != 0 {
      try visitor.visitSingularInt64Field(value: self.entranceID, fieldNumber: 6)
    }
    try { if let v = self._bubble {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if self.entranceType != 0 {
      try visitor.visitSingularInt32Field(value: self.entranceType, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_EntranceItem, rhs: Bilibili_App_Card_V1_EntranceItem) -> Bool {
    if lhs.goto != rhs.goto {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.title != rhs.title {return false}
    if lhs.moduleID != rhs.moduleID {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.entranceID != rhs.entranceID {return false}
    if lhs._bubble != rhs._bubble {return false}
    if lhs.entranceType != rhs.entranceType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_Bubble: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Bubble"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bubble_content"),
    2: .same(proto: "version"),
    3: .same(proto: "stime"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bubbleContent) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.stime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bubbleContent.isEmpty {
      try visitor.visitSingularStringField(value: self.bubbleContent, fieldNumber: 1)
    }
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 2)
    }
    if self.stime != 0 {
      try visitor.visitSingularInt64Field(value: self.stime, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_Bubble, rhs: Bilibili_App_Card_V1_Bubble) -> Bool {
    if lhs.bubbleContent != rhs.bubbleContent {return false}
    if lhs.version != rhs.version {return false}
    if lhs.stime != rhs.stime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
