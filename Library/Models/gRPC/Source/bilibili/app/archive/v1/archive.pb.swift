// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bilibili/app/archive/v1/archive.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 稿件基本信息
struct Bilibili_App_Archive_V1_Arc {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 稿件avid
  var aid: Int64 {
    get {return _storage._aid}
    set {_uniqueStorage()._aid = newValue}
  }

  /// 稿件分P数
  var videos: Int64 {
    get {return _storage._videos}
    set {_uniqueStorage()._videos = newValue}
  }

  /// 分区id
  var typeID: Int32 {
    get {return _storage._typeID}
    set {_uniqueStorage()._typeID = newValue}
  }

  /// 二级分区名
  var typeName: String {
    get {return _storage._typeName}
    set {_uniqueStorage()._typeName = newValue}
  }

  /// 稿件类型
  /// 1:原创 2:转载
  var copyright: Int32 {
    get {return _storage._copyright}
    set {_uniqueStorage()._copyright = newValue}
  }

  /// 稿件封面url
  var pic: String {
    get {return _storage._pic}
    set {_uniqueStorage()._pic = newValue}
  }

  /// 稿件标题
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// 稿件发布时间
  var pubdate: Int64 {
    get {return _storage._pubdate}
    set {_uniqueStorage()._pubdate = newValue}
  }

  /// 用户投稿时间
  var ctime: Int64 {
    get {return _storage._ctime}
    set {_uniqueStorage()._ctime = newValue}
  }

  /// 稿件简介
  var desc: String {
    get {return _storage._desc}
    set {_uniqueStorage()._desc = newValue}
  }

  /// 稿件状态
  var state: Int32 {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  /// 访问属性
  /// 0:全部可见 10000:登录可见
  var access: Int32 {
    get {return _storage._access}
    set {_uniqueStorage()._access = newValue}
  }

  /// 属性位配置(现在无了)
  var attribute: Int32 {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  /// 空
  var tag: String {
    get {return _storage._tag}
    set {_uniqueStorage()._tag = newValue}
  }

  /// 空
  var tags: [String] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  /// 稿件总时长(单位为秒)
  var duration: Int64 {
    get {return _storage._duration}
    set {_uniqueStorage()._duration = newValue}
  }

  /// 参与的活动id
  var missionID: Int64 {
    get {return _storage._missionID}
    set {_uniqueStorage()._missionID = newValue}
  }

  /// 绑定的商单id
  var orderID: Int64 {
    get {return _storage._orderID}
    set {_uniqueStorage()._orderID = newValue}
  }

  /// PGC稿件强制重定向url(如番剧、影视)
  var redirectURL: String {
    get {return _storage._redirectURL}
    set {_uniqueStorage()._redirectURL = newValue}
  }

  /// 空
  var forward: Int64 {
    get {return _storage._forward}
    set {_uniqueStorage()._forward = newValue}
  }

  /// 控制标志
  var rights: Bilibili_App_Archive_V1_Rights {
    get {return _storage._rights ?? Bilibili_App_Archive_V1_Rights()}
    set {_uniqueStorage()._rights = newValue}
  }
  /// Returns true if `rights` has been explicitly set.
  var hasRights: Bool {return _storage._rights != nil}
  /// Clears the value of `rights`. Subsequent reads from it will return its default value.
  mutating func clearRights() {_uniqueStorage()._rights = nil}

  /// UP主信息
  var author: Bilibili_App_Archive_V1_Author {
    get {return _storage._author ?? Bilibili_App_Archive_V1_Author()}
    set {_uniqueStorage()._author = newValue}
  }
  /// Returns true if `author` has been explicitly set.
  var hasAuthor: Bool {return _storage._author != nil}
  /// Clears the value of `author`. Subsequent reads from it will return its default value.
  mutating func clearAuthor() {_uniqueStorage()._author = nil}

  /// 状态数
  var stat: Bilibili_App_Archive_V1_Stat {
    get {return _storage._stat ?? Bilibili_App_Archive_V1_Stat()}
    set {_uniqueStorage()._stat = newValue}
  }
  /// Returns true if `stat` has been explicitly set.
  var hasStat: Bool {return _storage._stat != nil}
  /// Clears the value of `stat`. Subsequent reads from it will return its default value.
  mutating func clearStat() {_uniqueStorage()._stat = nil}

  /// 空
  var reportResult: String {
    get {return _storage._reportResult}
    set {_uniqueStorage()._reportResult = newValue}
  }

  /// 投稿时发送的动态内容
  var dynamic: String {
    get {return _storage._dynamic}
    set {_uniqueStorage()._dynamic = newValue}
  }

  /// 稿件1P cid
  var firstCid: Int64 {
    get {return _storage._firstCid}
    set {_uniqueStorage()._firstCid = newValue}
  }

  /// 稿件1P 分辨率
  var dimension: Bilibili_App_Archive_V1_Dimension {
    get {return _storage._dimension ?? Bilibili_App_Archive_V1_Dimension()}
    set {_uniqueStorage()._dimension = newValue}
  }
  /// Returns true if `dimension` has been explicitly set.
  var hasDimension: Bool {return _storage._dimension != nil}
  /// Clears the value of `dimension`. Subsequent reads from it will return its default value.
  mutating func clearDimension() {_uniqueStorage()._dimension = nil}

  /// 合作组成员列表
  var staffInfo: [Bilibili_App_Archive_V1_StaffInfo] {
    get {return _storage._staffInfo}
    set {_uniqueStorage()._staffInfo = newValue}
  }

  /// UGC合集id
  var seasonID: Int64 {
    get {return _storage._seasonID}
    set {_uniqueStorage()._seasonID = newValue}
  }

  /// 新版属性位配置(也没用)
  var attributeV2: Int64 {
    get {return _storage._attributeV2}
    set {_uniqueStorage()._attributeV2 = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// UP主信息
struct Bilibili_App_Archive_V1_Author {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// UP主mid
  var mid: Int64 = 0

  /// UP主昵称
  var name: String = String()

  /// UP主头像url
  var face: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 分辨率
struct Bilibili_App_Archive_V1_Dimension {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 宽度
  var width: Int64 = 0

  /// 高度
  var height: Int64 = 0

  /// 方向
  /// 0:横屏 1:竖屏
  var rotate: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 分P信息
struct Bilibili_App_Archive_V1_Page {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 视频cid
  var cid: Int64 = 0

  /// 分P序号
  var page: Int32 = 0

  /// 源类型
  /// vupload:B站 qq:腾讯 hunan:芒果
  var from: String = String()

  /// 分P标题
  var part: String = String()

  /// 分P时长(单位为秒)
  var duration: Int64 = 0

  /// 外链vid
  var vid: String = String()

  /// 分P简介
  var desc: String = String()

  /// 外链url
  var webLink: String = String()

  /// 分P分辨率
  var dimension: Bilibili_App_Archive_V1_Dimension {
    get {return _dimension ?? Bilibili_App_Archive_V1_Dimension()}
    set {_dimension = newValue}
  }
  /// Returns true if `dimension` has been explicitly set.
  var hasDimension: Bool {return self._dimension != nil}
  /// Clears the value of `dimension`. Subsequent reads from it will return its default value.
  mutating func clearDimension() {self._dimension = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dimension: Bilibili_App_Archive_V1_Dimension? = nil
}

/// 稿件控制标志
struct Bilibili_App_Archive_V1_Rights {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 老版是否付费
  var bp: Int32 = 0

  /// 允许充电
  var elec: Int32 = 0

  /// 允许下载
  var download: Int32 = 0

  /// 是否电影
  var movie: Int32 = 0

  /// PGC稿件需要付费
  var pay: Int32 = 0

  /// 是否高码率
  var hd5: Int32 = 0

  /// 是否禁止转载标志
  var noReprint: Int32 = 0

  /// 是否允许自动播放
  var autoplay: Int32 = 0

  /// UGC稿件需要付费
  var ugcPay: Int32 = 0

  /// 是否联合投稿
  var isCooperation: Int32 = 0

  /// 是否UGC付费预览
  var ugcPayPreview: Int32 = 0

  /// 是否禁止后台播放
  var noBackground: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 合作成员信息
struct Bilibili_App_Archive_V1_StaffInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 成员mid
  var mid: Int64 = 0

  /// 成员角色
  var title: String = String()

  /// 属性位
  /// 0:普通 1:赞助商金色标志
  var attribute: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 状态数
struct Bilibili_App_Archive_V1_Stat {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 稿件avid
  var aid: Int64 = 0

  /// 播放数
  var view: Int32 = 0

  /// 弹幕数
  var danmaku: Int32 = 0

  /// 评论数
  var reply: Int32 = 0

  /// 收藏数
  var fav: Int32 = 0

  /// 投币数
  var coin: Int32 = 0

  /// 分享数
  var share: Int32 = 0

  /// 当前排名
  var nowRank: Int32 = 0

  /// 历史最高排名
  var hisRank: Int32 = 0

  /// 点赞数
  var like: Int32 = 0

  /// 点踩数(前端不可见故恒为0)
  var dislike: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Bilibili_App_Archive_V1_Arc: @unchecked Sendable {}
extension Bilibili_App_Archive_V1_Author: @unchecked Sendable {}
extension Bilibili_App_Archive_V1_Dimension: @unchecked Sendable {}
extension Bilibili_App_Archive_V1_Page: @unchecked Sendable {}
extension Bilibili_App_Archive_V1_Rights: @unchecked Sendable {}
extension Bilibili_App_Archive_V1_StaffInfo: @unchecked Sendable {}
extension Bilibili_App_Archive_V1_Stat: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bilibili.app.archive.v1"

extension Bilibili_App_Archive_V1_Arc: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Arc"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "aid"),
    2: .same(proto: "videos"),
    3: .standard(proto: "type_id"),
    4: .standard(proto: "type_name"),
    5: .same(proto: "copyright"),
    6: .same(proto: "pic"),
    7: .same(proto: "title"),
    8: .same(proto: "pubdate"),
    9: .same(proto: "ctime"),
    10: .same(proto: "desc"),
    11: .same(proto: "state"),
    12: .same(proto: "access"),
    13: .same(proto: "attribute"),
    14: .same(proto: "tag"),
    15: .same(proto: "tags"),
    16: .same(proto: "duration"),
    17: .standard(proto: "mission_id"),
    18: .standard(proto: "order_id"),
    19: .standard(proto: "redirect_url"),
    20: .same(proto: "forward"),
    21: .same(proto: "rights"),
    22: .same(proto: "author"),
    23: .same(proto: "stat"),
    24: .standard(proto: "report_result"),
    25: .same(proto: "dynamic"),
    26: .standard(proto: "first_cid"),
    27: .same(proto: "dimension"),
    28: .standard(proto: "staff_info"),
    29: .standard(proto: "season_id"),
    30: .standard(proto: "attribute_v2"),
  ]

  fileprivate class _StorageClass {
    var _aid: Int64 = 0
    var _videos: Int64 = 0
    var _typeID: Int32 = 0
    var _typeName: String = String()
    var _copyright: Int32 = 0
    var _pic: String = String()
    var _title: String = String()
    var _pubdate: Int64 = 0
    var _ctime: Int64 = 0
    var _desc: String = String()
    var _state: Int32 = 0
    var _access: Int32 = 0
    var _attribute: Int32 = 0
    var _tag: String = String()
    var _tags: [String] = []
    var _duration: Int64 = 0
    var _missionID: Int64 = 0
    var _orderID: Int64 = 0
    var _redirectURL: String = String()
    var _forward: Int64 = 0
    var _rights: Bilibili_App_Archive_V1_Rights? = nil
    var _author: Bilibili_App_Archive_V1_Author? = nil
    var _stat: Bilibili_App_Archive_V1_Stat? = nil
    var _reportResult: String = String()
    var _dynamic: String = String()
    var _firstCid: Int64 = 0
    var _dimension: Bilibili_App_Archive_V1_Dimension? = nil
    var _staffInfo: [Bilibili_App_Archive_V1_StaffInfo] = []
    var _seasonID: Int64 = 0
    var _attributeV2: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _aid = source._aid
      _videos = source._videos
      _typeID = source._typeID
      _typeName = source._typeName
      _copyright = source._copyright
      _pic = source._pic
      _title = source._title
      _pubdate = source._pubdate
      _ctime = source._ctime
      _desc = source._desc
      _state = source._state
      _access = source._access
      _attribute = source._attribute
      _tag = source._tag
      _tags = source._tags
      _duration = source._duration
      _missionID = source._missionID
      _orderID = source._orderID
      _redirectURL = source._redirectURL
      _forward = source._forward
      _rights = source._rights
      _author = source._author
      _stat = source._stat
      _reportResult = source._reportResult
      _dynamic = source._dynamic
      _firstCid = source._firstCid
      _dimension = source._dimension
      _staffInfo = source._staffInfo
      _seasonID = source._seasonID
      _attributeV2 = source._attributeV2
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._aid) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._videos) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._typeID) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._typeName) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._copyright) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._pic) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 8: try { try decoder.decodeSingularInt64Field(value: &_storage._pubdate) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._ctime) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._desc) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._state) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._access) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._attribute) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._tag) }()
        case 15: try { try decoder.decodeRepeatedStringField(value: &_storage._tags) }()
        case 16: try { try decoder.decodeSingularInt64Field(value: &_storage._duration) }()
        case 17: try { try decoder.decodeSingularInt64Field(value: &_storage._missionID) }()
        case 18: try { try decoder.decodeSingularInt64Field(value: &_storage._orderID) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._redirectURL) }()
        case 20: try { try decoder.decodeSingularInt64Field(value: &_storage._forward) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._rights) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._author) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._stat) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._reportResult) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._dynamic) }()
        case 26: try { try decoder.decodeSingularInt64Field(value: &_storage._firstCid) }()
        case 27: try { try decoder.decodeSingularMessageField(value: &_storage._dimension) }()
        case 28: try { try decoder.decodeRepeatedMessageField(value: &_storage._staffInfo) }()
        case 29: try { try decoder.decodeSingularInt64Field(value: &_storage._seasonID) }()
        case 30: try { try decoder.decodeSingularInt64Field(value: &_storage._attributeV2) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._aid != 0 {
        try visitor.visitSingularInt64Field(value: _storage._aid, fieldNumber: 1)
      }
      if _storage._videos != 0 {
        try visitor.visitSingularInt64Field(value: _storage._videos, fieldNumber: 2)
      }
      if _storage._typeID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._typeID, fieldNumber: 3)
      }
      if !_storage._typeName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._typeName, fieldNumber: 4)
      }
      if _storage._copyright != 0 {
        try visitor.visitSingularInt32Field(value: _storage._copyright, fieldNumber: 5)
      }
      if !_storage._pic.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pic, fieldNumber: 6)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 7)
      }
      if _storage._pubdate != 0 {
        try visitor.visitSingularInt64Field(value: _storage._pubdate, fieldNumber: 8)
      }
      if _storage._ctime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._ctime, fieldNumber: 9)
      }
      if !_storage._desc.isEmpty {
        try visitor.visitSingularStringField(value: _storage._desc, fieldNumber: 10)
      }
      if _storage._state != 0 {
        try visitor.visitSingularInt32Field(value: _storage._state, fieldNumber: 11)
      }
      if _storage._access != 0 {
        try visitor.visitSingularInt32Field(value: _storage._access, fieldNumber: 12)
      }
      if _storage._attribute != 0 {
        try visitor.visitSingularInt32Field(value: _storage._attribute, fieldNumber: 13)
      }
      if !_storage._tag.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tag, fieldNumber: 14)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._tags, fieldNumber: 15)
      }
      if _storage._duration != 0 {
        try visitor.visitSingularInt64Field(value: _storage._duration, fieldNumber: 16)
      }
      if _storage._missionID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._missionID, fieldNumber: 17)
      }
      if _storage._orderID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._orderID, fieldNumber: 18)
      }
      if !_storage._redirectURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._redirectURL, fieldNumber: 19)
      }
      if _storage._forward != 0 {
        try visitor.visitSingularInt64Field(value: _storage._forward, fieldNumber: 20)
      }
      try { if let v = _storage._rights {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._author {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._stat {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      if !_storage._reportResult.isEmpty {
        try visitor.visitSingularStringField(value: _storage._reportResult, fieldNumber: 24)
      }
      if !_storage._dynamic.isEmpty {
        try visitor.visitSingularStringField(value: _storage._dynamic, fieldNumber: 25)
      }
      if _storage._firstCid != 0 {
        try visitor.visitSingularInt64Field(value: _storage._firstCid, fieldNumber: 26)
      }
      try { if let v = _storage._dimension {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      } }()
      if !_storage._staffInfo.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._staffInfo, fieldNumber: 28)
      }
      if _storage._seasonID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._seasonID, fieldNumber: 29)
      }
      if _storage._attributeV2 != 0 {
        try visitor.visitSingularInt64Field(value: _storage._attributeV2, fieldNumber: 30)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Archive_V1_Arc, rhs: Bilibili_App_Archive_V1_Arc) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._aid != rhs_storage._aid {return false}
        if _storage._videos != rhs_storage._videos {return false}
        if _storage._typeID != rhs_storage._typeID {return false}
        if _storage._typeName != rhs_storage._typeName {return false}
        if _storage._copyright != rhs_storage._copyright {return false}
        if _storage._pic != rhs_storage._pic {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._pubdate != rhs_storage._pubdate {return false}
        if _storage._ctime != rhs_storage._ctime {return false}
        if _storage._desc != rhs_storage._desc {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._access != rhs_storage._access {return false}
        if _storage._attribute != rhs_storage._attribute {return false}
        if _storage._tag != rhs_storage._tag {return false}
        if _storage._tags != rhs_storage._tags {return false}
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._missionID != rhs_storage._missionID {return false}
        if _storage._orderID != rhs_storage._orderID {return false}
        if _storage._redirectURL != rhs_storage._redirectURL {return false}
        if _storage._forward != rhs_storage._forward {return false}
        if _storage._rights != rhs_storage._rights {return false}
        if _storage._author != rhs_storage._author {return false}
        if _storage._stat != rhs_storage._stat {return false}
        if _storage._reportResult != rhs_storage._reportResult {return false}
        if _storage._dynamic != rhs_storage._dynamic {return false}
        if _storage._firstCid != rhs_storage._firstCid {return false}
        if _storage._dimension != rhs_storage._dimension {return false}
        if _storage._staffInfo != rhs_storage._staffInfo {return false}
        if _storage._seasonID != rhs_storage._seasonID {return false}
        if _storage._attributeV2 != rhs_storage._attributeV2 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Archive_V1_Author: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Author"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mid"),
    2: .same(proto: "name"),
    3: .same(proto: "face"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.mid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.face) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mid != 0 {
      try visitor.visitSingularInt64Field(value: self.mid, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.face.isEmpty {
      try visitor.visitSingularStringField(value: self.face, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Archive_V1_Author, rhs: Bilibili_App_Archive_V1_Author) -> Bool {
    if lhs.mid != rhs.mid {return false}
    if lhs.name != rhs.name {return false}
    if lhs.face != rhs.face {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Archive_V1_Dimension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Dimension"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "width"),
    2: .same(proto: "height"),
    3: .same(proto: "rotate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.width) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.height) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.rotate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.width != 0 {
      try visitor.visitSingularInt64Field(value: self.width, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 2)
    }
    if self.rotate != 0 {
      try visitor.visitSingularInt64Field(value: self.rotate, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Archive_V1_Dimension, rhs: Bilibili_App_Archive_V1_Dimension) -> Bool {
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.rotate != rhs.rotate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Archive_V1_Page: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Page"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cid"),
    2: .same(proto: "page"),
    3: .same(proto: "from"),
    4: .same(proto: "part"),
    5: .same(proto: "duration"),
    6: .same(proto: "vid"),
    7: .same(proto: "desc"),
    8: .same(proto: "webLink"),
    9: .same(proto: "dimension"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.cid) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.page) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.part) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.duration) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.vid) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.webLink) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._dimension) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.cid != 0 {
      try visitor.visitSingularInt64Field(value: self.cid, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 2)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 3)
    }
    if !self.part.isEmpty {
      try visitor.visitSingularStringField(value: self.part, fieldNumber: 4)
    }
    if self.duration != 0 {
      try visitor.visitSingularInt64Field(value: self.duration, fieldNumber: 5)
    }
    if !self.vid.isEmpty {
      try visitor.visitSingularStringField(value: self.vid, fieldNumber: 6)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 7)
    }
    if !self.webLink.isEmpty {
      try visitor.visitSingularStringField(value: self.webLink, fieldNumber: 8)
    }
    try { if let v = self._dimension {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Archive_V1_Page, rhs: Bilibili_App_Archive_V1_Page) -> Bool {
    if lhs.cid != rhs.cid {return false}
    if lhs.page != rhs.page {return false}
    if lhs.from != rhs.from {return false}
    if lhs.part != rhs.part {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.vid != rhs.vid {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.webLink != rhs.webLink {return false}
    if lhs._dimension != rhs._dimension {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Archive_V1_Rights: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Rights"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bp"),
    2: .same(proto: "elec"),
    3: .same(proto: "download"),
    4: .same(proto: "movie"),
    5: .same(proto: "pay"),
    6: .same(proto: "hd5"),
    7: .standard(proto: "no_reprint"),
    8: .same(proto: "autoplay"),
    9: .standard(proto: "ugc_pay"),
    10: .standard(proto: "is_cooperation"),
    11: .standard(proto: "ugc_pay_preview"),
    12: .standard(proto: "no_background"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.bp) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.elec) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.download) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.movie) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.pay) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.hd5) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.noReprint) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.autoplay) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.ugcPay) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.isCooperation) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self.ugcPayPreview) }()
      case 12: try { try decoder.decodeSingularInt32Field(value: &self.noBackground) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bp != 0 {
      try visitor.visitSingularInt32Field(value: self.bp, fieldNumber: 1)
    }
    if self.elec != 0 {
      try visitor.visitSingularInt32Field(value: self.elec, fieldNumber: 2)
    }
    if self.download != 0 {
      try visitor.visitSingularInt32Field(value: self.download, fieldNumber: 3)
    }
    if self.movie != 0 {
      try visitor.visitSingularInt32Field(value: self.movie, fieldNumber: 4)
    }
    if self.pay != 0 {
      try visitor.visitSingularInt32Field(value: self.pay, fieldNumber: 5)
    }
    if self.hd5 != 0 {
      try visitor.visitSingularInt32Field(value: self.hd5, fieldNumber: 6)
    }
    if self.noReprint != 0 {
      try visitor.visitSingularInt32Field(value: self.noReprint, fieldNumber: 7)
    }
    if self.autoplay != 0 {
      try visitor.visitSingularInt32Field(value: self.autoplay, fieldNumber: 8)
    }
    if self.ugcPay != 0 {
      try visitor.visitSingularInt32Field(value: self.ugcPay, fieldNumber: 9)
    }
    if self.isCooperation != 0 {
      try visitor.visitSingularInt32Field(value: self.isCooperation, fieldNumber: 10)
    }
    if self.ugcPayPreview != 0 {
      try visitor.visitSingularInt32Field(value: self.ugcPayPreview, fieldNumber: 11)
    }
    if self.noBackground != 0 {
      try visitor.visitSingularInt32Field(value: self.noBackground, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Archive_V1_Rights, rhs: Bilibili_App_Archive_V1_Rights) -> Bool {
    if lhs.bp != rhs.bp {return false}
    if lhs.elec != rhs.elec {return false}
    if lhs.download != rhs.download {return false}
    if lhs.movie != rhs.movie {return false}
    if lhs.pay != rhs.pay {return false}
    if lhs.hd5 != rhs.hd5 {return false}
    if lhs.noReprint != rhs.noReprint {return false}
    if lhs.autoplay != rhs.autoplay {return false}
    if lhs.ugcPay != rhs.ugcPay {return false}
    if lhs.isCooperation != rhs.isCooperation {return false}
    if lhs.ugcPayPreview != rhs.ugcPayPreview {return false}
    if lhs.noBackground != rhs.noBackground {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Archive_V1_StaffInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StaffInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mid"),
    2: .same(proto: "title"),
    3: .same(proto: "attribute"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.mid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.attribute) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mid != 0 {
      try visitor.visitSingularInt64Field(value: self.mid, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.attribute != 0 {
      try visitor.visitSingularInt64Field(value: self.attribute, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Archive_V1_StaffInfo, rhs: Bilibili_App_Archive_V1_StaffInfo) -> Bool {
    if lhs.mid != rhs.mid {return false}
    if lhs.title != rhs.title {return false}
    if lhs.attribute != rhs.attribute {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Archive_V1_Stat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Stat"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "aid"),
    2: .same(proto: "view"),
    3: .same(proto: "danmaku"),
    4: .same(proto: "reply"),
    5: .same(proto: "fav"),
    6: .same(proto: "coin"),
    7: .same(proto: "share"),
    8: .standard(proto: "now_rank"),
    9: .standard(proto: "his_rank"),
    10: .same(proto: "like"),
    11: .same(proto: "dislike"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.aid) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.view) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.danmaku) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.reply) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.fav) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.coin) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.share) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.nowRank) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.hisRank) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.like) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self.dislike) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.aid != 0 {
      try visitor.visitSingularInt64Field(value: self.aid, fieldNumber: 1)
    }
    if self.view != 0 {
      try visitor.visitSingularInt32Field(value: self.view, fieldNumber: 2)
    }
    if self.danmaku != 0 {
      try visitor.visitSingularInt32Field(value: self.danmaku, fieldNumber: 3)
    }
    if self.reply != 0 {
      try visitor.visitSingularInt32Field(value: self.reply, fieldNumber: 4)
    }
    if self.fav != 0 {
      try visitor.visitSingularInt32Field(value: self.fav, fieldNumber: 5)
    }
    if self.coin != 0 {
      try visitor.visitSingularInt32Field(value: self.coin, fieldNumber: 6)
    }
    if self.share != 0 {
      try visitor.visitSingularInt32Field(value: self.share, fieldNumber: 7)
    }
    if self.nowRank != 0 {
      try visitor.visitSingularInt32Field(value: self.nowRank, fieldNumber: 8)
    }
    if self.hisRank != 0 {
      try visitor.visitSingularInt32Field(value: self.hisRank, fieldNumber: 9)
    }
    if self.like != 0 {
      try visitor.visitSingularInt32Field(value: self.like, fieldNumber: 10)
    }
    if self.dislike != 0 {
      try visitor.visitSingularInt32Field(value: self.dislike, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Archive_V1_Stat, rhs: Bilibili_App_Archive_V1_Stat) -> Bool {
    if lhs.aid != rhs.aid {return false}
    if lhs.view != rhs.view {return false}
    if lhs.danmaku != rhs.danmaku {return false}
    if lhs.reply != rhs.reply {return false}
    if lhs.fav != rhs.fav {return false}
    if lhs.coin != rhs.coin {return false}
    if lhs.share != rhs.share {return false}
    if lhs.nowRank != rhs.nowRank {return false}
    if lhs.hisRank != rhs.hisRank {return false}
    if lhs.like != rhs.like {return false}
    if lhs.dislike != rhs.dislike {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
