// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bilibili/app/archive/middleware/v1/preload.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 视频秒开参数
struct Bilibili_App_Archive_Middleware_V1_PlayerArgs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 清晰度
  var qn: Int64 = 0

  /// 流版本
  var fnver: Int64 = 0

  /// 流类型
  var fnval: Int64 = 0

  /// 返回url是否强制使用域名
  /// 0:不强制使用域名 1:http域名 2:https域名
  var forceHost: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Bilibili_App_Archive_Middleware_V1_PlayerArgs: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bilibili.app.archive.middleware.v1"

extension Bilibili_App_Archive_Middleware_V1_PlayerArgs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerArgs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "qn"),
    2: .same(proto: "fnver"),
    3: .same(proto: "fnval"),
    4: .standard(proto: "force_host"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.qn) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.fnver) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.fnval) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.forceHost) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.qn != 0 {
      try visitor.visitSingularInt64Field(value: self.qn, fieldNumber: 1)
    }
    if self.fnver != 0 {
      try visitor.visitSingularInt64Field(value: self.fnver, fieldNumber: 2)
    }
    if self.fnval != 0 {
      try visitor.visitSingularInt64Field(value: self.fnval, fieldNumber: 3)
    }
    if self.forceHost != 0 {
      try visitor.visitSingularInt64Field(value: self.forceHost, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Archive_Middleware_V1_PlayerArgs, rhs: Bilibili_App_Archive_Middleware_V1_PlayerArgs) -> Bool {
    if lhs.qn != rhs.qn {return false}
    if lhs.fnver != rhs.fnver {return false}
    if lhs.fnval != rhs.fnval {return false}
    if lhs.forceHost != rhs.forceHost {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
