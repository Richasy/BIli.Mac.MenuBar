//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bilibili/app/dynamic/v2/dynamic.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// v2动态
///
/// Usage: instantiate `Bilibili_App_Dynamic_V2_DynamicClient`, then call methods of this protocol to make API calls.
internal protocol Bilibili_App_Dynamic_V2_DynamicClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bilibili_App_Dynamic_V2_DynamicClientInterceptorFactoryProtocol? { get }

  func dynVideo(
    _ request: Bilibili_App_Dynamic_V2_DynVideoReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynVideoReq, Bilibili_App_Dynamic_V2_DynVideoReply>

  func dynAll(
    _ request: Bilibili_App_Dynamic_V2_DynAllReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynAllReq, Bilibili_App_Dynamic_V2_DynAllReply>

  func dynDetails(
    _ request: Bilibili_App_Dynamic_V2_DynDetailsReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynDetailsReq, Bilibili_App_Dynamic_V2_DynDetailsReply>

  func dynVideoPersonal(
    _ request: Bilibili_App_Dynamic_V2_DynVideoPersonalReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynVideoPersonalReq, Bilibili_App_Dynamic_V2_DynVideoPersonalReply>

  func dynVideoUpdOffset(
    _ request: Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq, Bilibili_App_Dynamic_V2_NoReply>

  func dynAdditionCommonFollow(
    _ request: Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq, Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReply>

  func dynThumb(
    _ request: Bilibili_App_Dynamic_V2_DynThumbReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynThumbReq, Bilibili_App_Dynamic_V2_NoReply>

  func dynFakeCard(
    _ request: Bilibili_App_Dynamic_V2_DynFakeCardReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynFakeCardReq, Bilibili_App_Dynamic_V2_DynFakeCardReply>

  func dynRcmdUpExchange(
    _ request: Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq, Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReply>

  func dynAllPersonal(
    _ request: Bilibili_App_Dynamic_V2_DynAllPersonalReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynAllPersonalReq, Bilibili_App_Dynamic_V2_DynAllPersonalReply>

  func dynAllUpdOffset(
    _ request: Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq, Bilibili_App_Dynamic_V2_NoReply>

  func dynVote(
    _ request: Bilibili_App_Dynamic_V2_DynVoteReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynVoteReq, Bilibili_App_Dynamic_V2_DynVoteReply>

  func dynMixUpListViewMore(
    _ request: Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq, Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReply>

  func dynLight(
    _ request: Bilibili_App_Dynamic_V2_DynLightReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynLightReq, Bilibili_App_Dynamic_V2_DynLightReply>

  func dynDetail(
    _ request: Bilibili_App_Dynamic_V2_DynDetailReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynDetailReq, Bilibili_App_Dynamic_V2_DynDetailReply>

  func likeList(
    _ request: Bilibili_App_Dynamic_V2_LikeListReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_LikeListReq, Bilibili_App_Dynamic_V2_LikeListReply>

  func repostList(
    _ request: Bilibili_App_Dynamic_V2_RepostListReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_RepostListReq, Bilibili_App_Dynamic_V2_RepostListRsp>

  func dynSpace(
    _ request: Bilibili_App_Dynamic_V2_DynSpaceReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynSpaceReq, Bilibili_App_Dynamic_V2_DynSpaceRsp>

  func dynUnLoginRcmd(
    _ request: Bilibili_App_Dynamic_V2_DynRcmdReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynRcmdReq, Bilibili_App_Dynamic_V2_DynRcmdReply>
}

extension Bilibili_App_Dynamic_V2_DynamicClientProtocol {
  internal var serviceName: String {
    return "bilibili.app.dynamic.v2.Dynamic"
  }

  /// 动态视频页
  ///
  /// - Parameters:
  ///   - request: Request to send to DynVideo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dynVideo(
    _ request: Bilibili_App_Dynamic_V2_DynVideoReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynVideoReq, Bilibili_App_Dynamic_V2_DynVideoReply> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynVideo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynVideoInterceptors() ?? []
    )
  }

  /// 动态综合页
  ///
  /// - Parameters:
  ///   - request: Request to send to DynAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dynAll(
    _ request: Bilibili_App_Dynamic_V2_DynAllReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynAllReq, Bilibili_App_Dynamic_V2_DynAllReply> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynAllInterceptors() ?? []
    )
  }

  /// 批量动态id获取动态详情
  ///
  /// - Parameters:
  ///   - request: Request to send to DynDetails.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dynDetails(
    _ request: Bilibili_App_Dynamic_V2_DynDetailsReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynDetailsReq, Bilibili_App_Dynamic_V2_DynDetailsReply> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynDetails.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynDetailsInterceptors() ?? []
    )
  }

  /// 视频页最近访问 - 个人feed流
  ///
  /// - Parameters:
  ///   - request: Request to send to DynVideoPersonal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dynVideoPersonal(
    _ request: Bilibili_App_Dynamic_V2_DynVideoPersonalReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynVideoPersonalReq, Bilibili_App_Dynamic_V2_DynVideoPersonalReply> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynVideoPersonal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynVideoPersonalInterceptors() ?? []
    )
  }

  /// 视频页最近访问 - 标记已读
  ///
  /// - Parameters:
  ///   - request: Request to send to DynVideoUpdOffset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dynVideoUpdOffset(
    _ request: Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq, Bilibili_App_Dynamic_V2_NoReply> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynVideoUpdOffset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynVideoUpdOffsetInterceptors() ?? []
    )
  }

  /// 动态通用附加卡-follow/取消follow
  ///
  /// - Parameters:
  ///   - request: Request to send to DynAdditionCommonFollow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dynAdditionCommonFollow(
    _ request: Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq, Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReply> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynAdditionCommonFollow.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynAdditionCommonFollowInterceptors() ?? []
    )
  }

  /// 动态点赞
  ///
  /// - Parameters:
  ///   - request: Request to send to DynThumb.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dynThumb(
    _ request: Bilibili_App_Dynamic_V2_DynThumbReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynThumbReq, Bilibili_App_Dynamic_V2_NoReply> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynThumb.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynThumbInterceptors() ?? []
    )
  }

  /// 动态发布生成临时卡
  ///
  /// - Parameters:
  ///   - request: Request to send to DynFakeCard.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dynFakeCard(
    _ request: Bilibili_App_Dynamic_V2_DynFakeCardReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynFakeCardReq, Bilibili_App_Dynamic_V2_DynFakeCardReply> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynFakeCard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynFakeCardInterceptors() ?? []
    )
  }

  /// 关注推荐up主换一换
  ///
  /// - Parameters:
  ///   - request: Request to send to DynRcmdUpExchange.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dynRcmdUpExchange(
    _ request: Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq, Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReply> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynRcmdUpExchange.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynRcmdUpExchangeInterceptors() ?? []
    )
  }

  /// 综合页最近访问 - 个人feed流
  ///
  /// - Parameters:
  ///   - request: Request to send to DynAllPersonal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dynAllPersonal(
    _ request: Bilibili_App_Dynamic_V2_DynAllPersonalReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynAllPersonalReq, Bilibili_App_Dynamic_V2_DynAllPersonalReply> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynAllPersonal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynAllPersonalInterceptors() ?? []
    )
  }

  /// 综合页最近访问 - 标记已读
  ///
  /// - Parameters:
  ///   - request: Request to send to DynAllUpdOffset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dynAllUpdOffset(
    _ request: Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq, Bilibili_App_Dynamic_V2_NoReply> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynAllUpdOffset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynAllUpdOffsetInterceptors() ?? []
    )
  }

  /// 投票操作接口
  ///
  /// - Parameters:
  ///   - request: Request to send to DynVote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dynVote(
    _ request: Bilibili_App_Dynamic_V2_DynVoteReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynVoteReq, Bilibili_App_Dynamic_V2_DynVoteReply> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynVote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynVoteInterceptors() ?? []
    )
  }

  /// 网关调用 - 查看更多-列表
  ///
  /// - Parameters:
  ///   - request: Request to send to DynMixUpListViewMore.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dynMixUpListViewMore(
    _ request: Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq, Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReply> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynMixUpListViewMore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynMixUpListViewMoreInterceptors() ?? []
    )
  }

  /// 轻浏览
  ///
  /// - Parameters:
  ///   - request: Request to send to DynLight.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dynLight(
    _ request: Bilibili_App_Dynamic_V2_DynLightReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynLightReq, Bilibili_App_Dynamic_V2_DynLightReply> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynLight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynLightInterceptors() ?? []
    )
  }

  /// 动态详情页
  ///
  /// - Parameters:
  ///   - request: Request to send to DynDetail.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dynDetail(
    _ request: Bilibili_App_Dynamic_V2_DynDetailReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynDetailReq, Bilibili_App_Dynamic_V2_DynDetailReply> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynDetail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynDetailInterceptors() ?? []
    )
  }

  /// 点赞列表
  ///
  /// - Parameters:
  ///   - request: Request to send to LikeList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func likeList(
    _ request: Bilibili_App_Dynamic_V2_LikeListReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_LikeListReq, Bilibili_App_Dynamic_V2_LikeListReply> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.likeList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLikeListInterceptors() ?? []
    )
  }

  /// 转发列表
  ///
  /// - Parameters:
  ///   - request: Request to send to RepostList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func repostList(
    _ request: Bilibili_App_Dynamic_V2_RepostListReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_RepostListReq, Bilibili_App_Dynamic_V2_RepostListRsp> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.repostList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRepostListInterceptors() ?? []
    )
  }

  /// 空间页动态
  ///
  /// - Parameters:
  ///   - request: Request to send to DynSpace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dynSpace(
    _ request: Bilibili_App_Dynamic_V2_DynSpaceReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynSpaceReq, Bilibili_App_Dynamic_V2_DynSpaceRsp> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynSpace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynSpaceInterceptors() ?? []
    )
  }

  /// 未登录页分区UP主推荐
  ///
  /// - Parameters:
  ///   - request: Request to send to DynUnLoginRcmd.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dynUnLoginRcmd(
    _ request: Bilibili_App_Dynamic_V2_DynRcmdReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bilibili_App_Dynamic_V2_DynRcmdReq, Bilibili_App_Dynamic_V2_DynRcmdReply> {
    return self.makeUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynUnLoginRcmd.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynUnLoginRcmdInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Bilibili_App_Dynamic_V2_DynamicClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Bilibili_App_Dynamic_V2_DynamicNIOClient")
internal final class Bilibili_App_Dynamic_V2_DynamicClient: Bilibili_App_Dynamic_V2_DynamicClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Bilibili_App_Dynamic_V2_DynamicClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Bilibili_App_Dynamic_V2_DynamicClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the bilibili.app.dynamic.v2.Dynamic service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bilibili_App_Dynamic_V2_DynamicClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Bilibili_App_Dynamic_V2_DynamicNIOClient: Bilibili_App_Dynamic_V2_DynamicClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Bilibili_App_Dynamic_V2_DynamicClientInterceptorFactoryProtocol?

  /// Creates a client for the bilibili.app.dynamic.v2.Dynamic service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bilibili_App_Dynamic_V2_DynamicClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// v2动态
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Bilibili_App_Dynamic_V2_DynamicAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Bilibili_App_Dynamic_V2_DynamicClientInterceptorFactoryProtocol? { get }

  func makeDynVideoCall(
    _ request: Bilibili_App_Dynamic_V2_DynVideoReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynVideoReq, Bilibili_App_Dynamic_V2_DynVideoReply>

  func makeDynAllCall(
    _ request: Bilibili_App_Dynamic_V2_DynAllReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynAllReq, Bilibili_App_Dynamic_V2_DynAllReply>

  func makeDynDetailsCall(
    _ request: Bilibili_App_Dynamic_V2_DynDetailsReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynDetailsReq, Bilibili_App_Dynamic_V2_DynDetailsReply>

  func makeDynVideoPersonalCall(
    _ request: Bilibili_App_Dynamic_V2_DynVideoPersonalReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynVideoPersonalReq, Bilibili_App_Dynamic_V2_DynVideoPersonalReply>

  func makeDynVideoUpdOffsetCall(
    _ request: Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq, Bilibili_App_Dynamic_V2_NoReply>

  func makeDynAdditionCommonFollowCall(
    _ request: Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq, Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReply>

  func makeDynThumbCall(
    _ request: Bilibili_App_Dynamic_V2_DynThumbReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynThumbReq, Bilibili_App_Dynamic_V2_NoReply>

  func makeDynFakeCardCall(
    _ request: Bilibili_App_Dynamic_V2_DynFakeCardReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynFakeCardReq, Bilibili_App_Dynamic_V2_DynFakeCardReply>

  func makeDynRcmdUpExchangeCall(
    _ request: Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq, Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReply>

  func makeDynAllPersonalCall(
    _ request: Bilibili_App_Dynamic_V2_DynAllPersonalReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynAllPersonalReq, Bilibili_App_Dynamic_V2_DynAllPersonalReply>

  func makeDynAllUpdOffsetCall(
    _ request: Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq, Bilibili_App_Dynamic_V2_NoReply>

  func makeDynVoteCall(
    _ request: Bilibili_App_Dynamic_V2_DynVoteReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynVoteReq, Bilibili_App_Dynamic_V2_DynVoteReply>

  func makeDynMixUpListViewMoreCall(
    _ request: Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq, Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReply>

  func makeDynLightCall(
    _ request: Bilibili_App_Dynamic_V2_DynLightReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynLightReq, Bilibili_App_Dynamic_V2_DynLightReply>

  func makeDynDetailCall(
    _ request: Bilibili_App_Dynamic_V2_DynDetailReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynDetailReq, Bilibili_App_Dynamic_V2_DynDetailReply>

  func makeLikeListCall(
    _ request: Bilibili_App_Dynamic_V2_LikeListReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_LikeListReq, Bilibili_App_Dynamic_V2_LikeListReply>

  func makeRepostListCall(
    _ request: Bilibili_App_Dynamic_V2_RepostListReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_RepostListReq, Bilibili_App_Dynamic_V2_RepostListRsp>

  func makeDynSpaceCall(
    _ request: Bilibili_App_Dynamic_V2_DynSpaceReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynSpaceReq, Bilibili_App_Dynamic_V2_DynSpaceRsp>

  func makeDynUnLoginRcmdCall(
    _ request: Bilibili_App_Dynamic_V2_DynRcmdReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynRcmdReq, Bilibili_App_Dynamic_V2_DynRcmdReply>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bilibili_App_Dynamic_V2_DynamicAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Bilibili_App_Dynamic_V2_DynamicClientMetadata.serviceDescriptor
  }

  internal var interceptors: Bilibili_App_Dynamic_V2_DynamicClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeDynVideoCall(
    _ request: Bilibili_App_Dynamic_V2_DynVideoReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynVideoReq, Bilibili_App_Dynamic_V2_DynVideoReply> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynVideo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynVideoInterceptors() ?? []
    )
  }

  internal func makeDynAllCall(
    _ request: Bilibili_App_Dynamic_V2_DynAllReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynAllReq, Bilibili_App_Dynamic_V2_DynAllReply> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynAllInterceptors() ?? []
    )
  }

  internal func makeDynDetailsCall(
    _ request: Bilibili_App_Dynamic_V2_DynDetailsReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynDetailsReq, Bilibili_App_Dynamic_V2_DynDetailsReply> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynDetails.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynDetailsInterceptors() ?? []
    )
  }

  internal func makeDynVideoPersonalCall(
    _ request: Bilibili_App_Dynamic_V2_DynVideoPersonalReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynVideoPersonalReq, Bilibili_App_Dynamic_V2_DynVideoPersonalReply> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynVideoPersonal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynVideoPersonalInterceptors() ?? []
    )
  }

  internal func makeDynVideoUpdOffsetCall(
    _ request: Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq, Bilibili_App_Dynamic_V2_NoReply> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynVideoUpdOffset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynVideoUpdOffsetInterceptors() ?? []
    )
  }

  internal func makeDynAdditionCommonFollowCall(
    _ request: Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq, Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReply> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynAdditionCommonFollow.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynAdditionCommonFollowInterceptors() ?? []
    )
  }

  internal func makeDynThumbCall(
    _ request: Bilibili_App_Dynamic_V2_DynThumbReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynThumbReq, Bilibili_App_Dynamic_V2_NoReply> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynThumb.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynThumbInterceptors() ?? []
    )
  }

  internal func makeDynFakeCardCall(
    _ request: Bilibili_App_Dynamic_V2_DynFakeCardReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynFakeCardReq, Bilibili_App_Dynamic_V2_DynFakeCardReply> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynFakeCard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynFakeCardInterceptors() ?? []
    )
  }

  internal func makeDynRcmdUpExchangeCall(
    _ request: Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq, Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReply> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynRcmdUpExchange.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynRcmdUpExchangeInterceptors() ?? []
    )
  }

  internal func makeDynAllPersonalCall(
    _ request: Bilibili_App_Dynamic_V2_DynAllPersonalReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynAllPersonalReq, Bilibili_App_Dynamic_V2_DynAllPersonalReply> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynAllPersonal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynAllPersonalInterceptors() ?? []
    )
  }

  internal func makeDynAllUpdOffsetCall(
    _ request: Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq, Bilibili_App_Dynamic_V2_NoReply> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynAllUpdOffset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynAllUpdOffsetInterceptors() ?? []
    )
  }

  internal func makeDynVoteCall(
    _ request: Bilibili_App_Dynamic_V2_DynVoteReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynVoteReq, Bilibili_App_Dynamic_V2_DynVoteReply> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynVote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynVoteInterceptors() ?? []
    )
  }

  internal func makeDynMixUpListViewMoreCall(
    _ request: Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq, Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReply> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynMixUpListViewMore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynMixUpListViewMoreInterceptors() ?? []
    )
  }

  internal func makeDynLightCall(
    _ request: Bilibili_App_Dynamic_V2_DynLightReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynLightReq, Bilibili_App_Dynamic_V2_DynLightReply> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynLight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynLightInterceptors() ?? []
    )
  }

  internal func makeDynDetailCall(
    _ request: Bilibili_App_Dynamic_V2_DynDetailReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynDetailReq, Bilibili_App_Dynamic_V2_DynDetailReply> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynDetail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynDetailInterceptors() ?? []
    )
  }

  internal func makeLikeListCall(
    _ request: Bilibili_App_Dynamic_V2_LikeListReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_LikeListReq, Bilibili_App_Dynamic_V2_LikeListReply> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.likeList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLikeListInterceptors() ?? []
    )
  }

  internal func makeRepostListCall(
    _ request: Bilibili_App_Dynamic_V2_RepostListReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_RepostListReq, Bilibili_App_Dynamic_V2_RepostListRsp> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.repostList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRepostListInterceptors() ?? []
    )
  }

  internal func makeDynSpaceCall(
    _ request: Bilibili_App_Dynamic_V2_DynSpaceReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynSpaceReq, Bilibili_App_Dynamic_V2_DynSpaceRsp> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynSpace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynSpaceInterceptors() ?? []
    )
  }

  internal func makeDynUnLoginRcmdCall(
    _ request: Bilibili_App_Dynamic_V2_DynRcmdReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bilibili_App_Dynamic_V2_DynRcmdReq, Bilibili_App_Dynamic_V2_DynRcmdReply> {
    return self.makeAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynUnLoginRcmd.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynUnLoginRcmdInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bilibili_App_Dynamic_V2_DynamicAsyncClientProtocol {
  internal func dynVideo(
    _ request: Bilibili_App_Dynamic_V2_DynVideoReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_DynVideoReply {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynVideo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynVideoInterceptors() ?? []
    )
  }

  internal func dynAll(
    _ request: Bilibili_App_Dynamic_V2_DynAllReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_DynAllReply {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynAllInterceptors() ?? []
    )
  }

  internal func dynDetails(
    _ request: Bilibili_App_Dynamic_V2_DynDetailsReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_DynDetailsReply {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynDetails.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynDetailsInterceptors() ?? []
    )
  }

  internal func dynVideoPersonal(
    _ request: Bilibili_App_Dynamic_V2_DynVideoPersonalReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_DynVideoPersonalReply {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynVideoPersonal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynVideoPersonalInterceptors() ?? []
    )
  }

  internal func dynVideoUpdOffset(
    _ request: Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_NoReply {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynVideoUpdOffset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynVideoUpdOffsetInterceptors() ?? []
    )
  }

  internal func dynAdditionCommonFollow(
    _ request: Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReply {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynAdditionCommonFollow.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynAdditionCommonFollowInterceptors() ?? []
    )
  }

  internal func dynThumb(
    _ request: Bilibili_App_Dynamic_V2_DynThumbReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_NoReply {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynThumb.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynThumbInterceptors() ?? []
    )
  }

  internal func dynFakeCard(
    _ request: Bilibili_App_Dynamic_V2_DynFakeCardReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_DynFakeCardReply {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynFakeCard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynFakeCardInterceptors() ?? []
    )
  }

  internal func dynRcmdUpExchange(
    _ request: Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReply {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynRcmdUpExchange.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynRcmdUpExchangeInterceptors() ?? []
    )
  }

  internal func dynAllPersonal(
    _ request: Bilibili_App_Dynamic_V2_DynAllPersonalReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_DynAllPersonalReply {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynAllPersonal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynAllPersonalInterceptors() ?? []
    )
  }

  internal func dynAllUpdOffset(
    _ request: Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_NoReply {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynAllUpdOffset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynAllUpdOffsetInterceptors() ?? []
    )
  }

  internal func dynVote(
    _ request: Bilibili_App_Dynamic_V2_DynVoteReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_DynVoteReply {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynVote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynVoteInterceptors() ?? []
    )
  }

  internal func dynMixUpListViewMore(
    _ request: Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReply {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynMixUpListViewMore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynMixUpListViewMoreInterceptors() ?? []
    )
  }

  internal func dynLight(
    _ request: Bilibili_App_Dynamic_V2_DynLightReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_DynLightReply {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynLight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynLightInterceptors() ?? []
    )
  }

  internal func dynDetail(
    _ request: Bilibili_App_Dynamic_V2_DynDetailReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_DynDetailReply {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynDetail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynDetailInterceptors() ?? []
    )
  }

  internal func likeList(
    _ request: Bilibili_App_Dynamic_V2_LikeListReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_LikeListReply {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.likeList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLikeListInterceptors() ?? []
    )
  }

  internal func repostList(
    _ request: Bilibili_App_Dynamic_V2_RepostListReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_RepostListRsp {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.repostList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRepostListInterceptors() ?? []
    )
  }

  internal func dynSpace(
    _ request: Bilibili_App_Dynamic_V2_DynSpaceReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_DynSpaceRsp {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynSpace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynSpaceInterceptors() ?? []
    )
  }

  internal func dynUnLoginRcmd(
    _ request: Bilibili_App_Dynamic_V2_DynRcmdReq,
    callOptions: CallOptions? = nil
  ) async throws -> Bilibili_App_Dynamic_V2_DynRcmdReply {
    return try await self.performAsyncUnaryCall(
      path: Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynUnLoginRcmd.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDynUnLoginRcmdInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Bilibili_App_Dynamic_V2_DynamicAsyncClient: Bilibili_App_Dynamic_V2_DynamicAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Bilibili_App_Dynamic_V2_DynamicClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bilibili_App_Dynamic_V2_DynamicClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Bilibili_App_Dynamic_V2_DynamicClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'dynVideo'.
  func makeDynVideoInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_DynVideoReq, Bilibili_App_Dynamic_V2_DynVideoReply>]

  /// - Returns: Interceptors to use when invoking 'dynAll'.
  func makeDynAllInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_DynAllReq, Bilibili_App_Dynamic_V2_DynAllReply>]

  /// - Returns: Interceptors to use when invoking 'dynDetails'.
  func makeDynDetailsInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_DynDetailsReq, Bilibili_App_Dynamic_V2_DynDetailsReply>]

  /// - Returns: Interceptors to use when invoking 'dynVideoPersonal'.
  func makeDynVideoPersonalInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_DynVideoPersonalReq, Bilibili_App_Dynamic_V2_DynVideoPersonalReply>]

  /// - Returns: Interceptors to use when invoking 'dynVideoUpdOffset'.
  func makeDynVideoUpdOffsetInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq, Bilibili_App_Dynamic_V2_NoReply>]

  /// - Returns: Interceptors to use when invoking 'dynAdditionCommonFollow'.
  func makeDynAdditionCommonFollowInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq, Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReply>]

  /// - Returns: Interceptors to use when invoking 'dynThumb'.
  func makeDynThumbInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_DynThumbReq, Bilibili_App_Dynamic_V2_NoReply>]

  /// - Returns: Interceptors to use when invoking 'dynFakeCard'.
  func makeDynFakeCardInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_DynFakeCardReq, Bilibili_App_Dynamic_V2_DynFakeCardReply>]

  /// - Returns: Interceptors to use when invoking 'dynRcmdUpExchange'.
  func makeDynRcmdUpExchangeInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq, Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReply>]

  /// - Returns: Interceptors to use when invoking 'dynAllPersonal'.
  func makeDynAllPersonalInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_DynAllPersonalReq, Bilibili_App_Dynamic_V2_DynAllPersonalReply>]

  /// - Returns: Interceptors to use when invoking 'dynAllUpdOffset'.
  func makeDynAllUpdOffsetInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq, Bilibili_App_Dynamic_V2_NoReply>]

  /// - Returns: Interceptors to use when invoking 'dynVote'.
  func makeDynVoteInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_DynVoteReq, Bilibili_App_Dynamic_V2_DynVoteReply>]

  /// - Returns: Interceptors to use when invoking 'dynMixUpListViewMore'.
  func makeDynMixUpListViewMoreInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq, Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReply>]

  /// - Returns: Interceptors to use when invoking 'dynLight'.
  func makeDynLightInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_DynLightReq, Bilibili_App_Dynamic_V2_DynLightReply>]

  /// - Returns: Interceptors to use when invoking 'dynDetail'.
  func makeDynDetailInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_DynDetailReq, Bilibili_App_Dynamic_V2_DynDetailReply>]

  /// - Returns: Interceptors to use when invoking 'likeList'.
  func makeLikeListInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_LikeListReq, Bilibili_App_Dynamic_V2_LikeListReply>]

  /// - Returns: Interceptors to use when invoking 'repostList'.
  func makeRepostListInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_RepostListReq, Bilibili_App_Dynamic_V2_RepostListRsp>]

  /// - Returns: Interceptors to use when invoking 'dynSpace'.
  func makeDynSpaceInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_DynSpaceReq, Bilibili_App_Dynamic_V2_DynSpaceRsp>]

  /// - Returns: Interceptors to use when invoking 'dynUnLoginRcmd'.
  func makeDynUnLoginRcmdInterceptors() -> [ClientInterceptor<Bilibili_App_Dynamic_V2_DynRcmdReq, Bilibili_App_Dynamic_V2_DynRcmdReply>]
}

internal enum Bilibili_App_Dynamic_V2_DynamicClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Dynamic",
    fullName: "bilibili.app.dynamic.v2.Dynamic",
    methods: [
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynVideo,
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynAll,
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynDetails,
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynVideoPersonal,
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynVideoUpdOffset,
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynAdditionCommonFollow,
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynThumb,
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynFakeCard,
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynRcmdUpExchange,
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynAllPersonal,
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynAllUpdOffset,
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynVote,
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynMixUpListViewMore,
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynLight,
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynDetail,
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.likeList,
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.repostList,
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynSpace,
      Bilibili_App_Dynamic_V2_DynamicClientMetadata.Methods.dynUnLoginRcmd,
    ]
  )

  internal enum Methods {
    internal static let dynVideo = GRPCMethodDescriptor(
      name: "DynVideo",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynVideo",
      type: GRPCCallType.unary
    )

    internal static let dynAll = GRPCMethodDescriptor(
      name: "DynAll",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynAll",
      type: GRPCCallType.unary
    )

    internal static let dynDetails = GRPCMethodDescriptor(
      name: "DynDetails",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynDetails",
      type: GRPCCallType.unary
    )

    internal static let dynVideoPersonal = GRPCMethodDescriptor(
      name: "DynVideoPersonal",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynVideoPersonal",
      type: GRPCCallType.unary
    )

    internal static let dynVideoUpdOffset = GRPCMethodDescriptor(
      name: "DynVideoUpdOffset",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynVideoUpdOffset",
      type: GRPCCallType.unary
    )

    internal static let dynAdditionCommonFollow = GRPCMethodDescriptor(
      name: "DynAdditionCommonFollow",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynAdditionCommonFollow",
      type: GRPCCallType.unary
    )

    internal static let dynThumb = GRPCMethodDescriptor(
      name: "DynThumb",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynThumb",
      type: GRPCCallType.unary
    )

    internal static let dynFakeCard = GRPCMethodDescriptor(
      name: "DynFakeCard",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynFakeCard",
      type: GRPCCallType.unary
    )

    internal static let dynRcmdUpExchange = GRPCMethodDescriptor(
      name: "DynRcmdUpExchange",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynRcmdUpExchange",
      type: GRPCCallType.unary
    )

    internal static let dynAllPersonal = GRPCMethodDescriptor(
      name: "DynAllPersonal",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynAllPersonal",
      type: GRPCCallType.unary
    )

    internal static let dynAllUpdOffset = GRPCMethodDescriptor(
      name: "DynAllUpdOffset",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynAllUpdOffset",
      type: GRPCCallType.unary
    )

    internal static let dynVote = GRPCMethodDescriptor(
      name: "DynVote",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynVote",
      type: GRPCCallType.unary
    )

    internal static let dynMixUpListViewMore = GRPCMethodDescriptor(
      name: "DynMixUpListViewMore",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynMixUpListViewMore",
      type: GRPCCallType.unary
    )

    internal static let dynLight = GRPCMethodDescriptor(
      name: "DynLight",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynLight",
      type: GRPCCallType.unary
    )

    internal static let dynDetail = GRPCMethodDescriptor(
      name: "DynDetail",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynDetail",
      type: GRPCCallType.unary
    )

    internal static let likeList = GRPCMethodDescriptor(
      name: "LikeList",
      path: "/bilibili.app.dynamic.v2.Dynamic/LikeList",
      type: GRPCCallType.unary
    )

    internal static let repostList = GRPCMethodDescriptor(
      name: "RepostList",
      path: "/bilibili.app.dynamic.v2.Dynamic/RepostList",
      type: GRPCCallType.unary
    )

    internal static let dynSpace = GRPCMethodDescriptor(
      name: "DynSpace",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynSpace",
      type: GRPCCallType.unary
    )

    internal static let dynUnLoginRcmd = GRPCMethodDescriptor(
      name: "DynUnLoginRcmd",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynUnLoginRcmd",
      type: GRPCCallType.unary
    )
  }
}

/// v2动态
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Bilibili_App_Dynamic_V2_DynamicProvider: CallHandlerProvider {
  var interceptors: Bilibili_App_Dynamic_V2_DynamicServerInterceptorFactoryProtocol? { get }

  /// 动态视频页
  func dynVideo(request: Bilibili_App_Dynamic_V2_DynVideoReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_DynVideoReply>

  /// 动态综合页
  func dynAll(request: Bilibili_App_Dynamic_V2_DynAllReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_DynAllReply>

  /// 批量动态id获取动态详情
  func dynDetails(request: Bilibili_App_Dynamic_V2_DynDetailsReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_DynDetailsReply>

  /// 视频页最近访问 - 个人feed流
  func dynVideoPersonal(request: Bilibili_App_Dynamic_V2_DynVideoPersonalReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_DynVideoPersonalReply>

  /// 视频页最近访问 - 标记已读
  func dynVideoUpdOffset(request: Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_NoReply>

  /// 动态通用附加卡-follow/取消follow
  func dynAdditionCommonFollow(request: Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReply>

  /// 动态点赞
  func dynThumb(request: Bilibili_App_Dynamic_V2_DynThumbReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_NoReply>

  /// 动态发布生成临时卡
  func dynFakeCard(request: Bilibili_App_Dynamic_V2_DynFakeCardReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_DynFakeCardReply>

  /// 关注推荐up主换一换
  func dynRcmdUpExchange(request: Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReply>

  /// 综合页最近访问 - 个人feed流
  func dynAllPersonal(request: Bilibili_App_Dynamic_V2_DynAllPersonalReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_DynAllPersonalReply>

  /// 综合页最近访问 - 标记已读
  func dynAllUpdOffset(request: Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_NoReply>

  /// 投票操作接口
  func dynVote(request: Bilibili_App_Dynamic_V2_DynVoteReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_DynVoteReply>

  /// 网关调用 - 查看更多-列表
  func dynMixUpListViewMore(request: Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReply>

  /// 轻浏览
  func dynLight(request: Bilibili_App_Dynamic_V2_DynLightReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_DynLightReply>

  /// 动态详情页
  func dynDetail(request: Bilibili_App_Dynamic_V2_DynDetailReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_DynDetailReply>

  /// 点赞列表
  func likeList(request: Bilibili_App_Dynamic_V2_LikeListReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_LikeListReply>

  /// 转发列表
  func repostList(request: Bilibili_App_Dynamic_V2_RepostListReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_RepostListRsp>

  /// 空间页动态
  func dynSpace(request: Bilibili_App_Dynamic_V2_DynSpaceReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_DynSpaceRsp>

  /// 未登录页分区UP主推荐
  func dynUnLoginRcmd(request: Bilibili_App_Dynamic_V2_DynRcmdReq, context: StatusOnlyCallContext) -> EventLoopFuture<Bilibili_App_Dynamic_V2_DynRcmdReply>
}

extension Bilibili_App_Dynamic_V2_DynamicProvider {
  internal var serviceName: Substring {
    return Bilibili_App_Dynamic_V2_DynamicServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DynVideo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynVideoReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynVideoReply>(),
        interceptors: self.interceptors?.makeDynVideoInterceptors() ?? [],
        userFunction: self.dynVideo(request:context:)
      )

    case "DynAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynAllReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynAllReply>(),
        interceptors: self.interceptors?.makeDynAllInterceptors() ?? [],
        userFunction: self.dynAll(request:context:)
      )

    case "DynDetails":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynDetailsReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynDetailsReply>(),
        interceptors: self.interceptors?.makeDynDetailsInterceptors() ?? [],
        userFunction: self.dynDetails(request:context:)
      )

    case "DynVideoPersonal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynVideoPersonalReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynVideoPersonalReply>(),
        interceptors: self.interceptors?.makeDynVideoPersonalInterceptors() ?? [],
        userFunction: self.dynVideoPersonal(request:context:)
      )

    case "DynVideoUpdOffset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_NoReply>(),
        interceptors: self.interceptors?.makeDynVideoUpdOffsetInterceptors() ?? [],
        userFunction: self.dynVideoUpdOffset(request:context:)
      )

    case "DynAdditionCommonFollow":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReply>(),
        interceptors: self.interceptors?.makeDynAdditionCommonFollowInterceptors() ?? [],
        userFunction: self.dynAdditionCommonFollow(request:context:)
      )

    case "DynThumb":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynThumbReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_NoReply>(),
        interceptors: self.interceptors?.makeDynThumbInterceptors() ?? [],
        userFunction: self.dynThumb(request:context:)
      )

    case "DynFakeCard":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynFakeCardReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynFakeCardReply>(),
        interceptors: self.interceptors?.makeDynFakeCardInterceptors() ?? [],
        userFunction: self.dynFakeCard(request:context:)
      )

    case "DynRcmdUpExchange":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReply>(),
        interceptors: self.interceptors?.makeDynRcmdUpExchangeInterceptors() ?? [],
        userFunction: self.dynRcmdUpExchange(request:context:)
      )

    case "DynAllPersonal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynAllPersonalReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynAllPersonalReply>(),
        interceptors: self.interceptors?.makeDynAllPersonalInterceptors() ?? [],
        userFunction: self.dynAllPersonal(request:context:)
      )

    case "DynAllUpdOffset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_NoReply>(),
        interceptors: self.interceptors?.makeDynAllUpdOffsetInterceptors() ?? [],
        userFunction: self.dynAllUpdOffset(request:context:)
      )

    case "DynVote":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynVoteReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynVoteReply>(),
        interceptors: self.interceptors?.makeDynVoteInterceptors() ?? [],
        userFunction: self.dynVote(request:context:)
      )

    case "DynMixUpListViewMore":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReply>(),
        interceptors: self.interceptors?.makeDynMixUpListViewMoreInterceptors() ?? [],
        userFunction: self.dynMixUpListViewMore(request:context:)
      )

    case "DynLight":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynLightReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynLightReply>(),
        interceptors: self.interceptors?.makeDynLightInterceptors() ?? [],
        userFunction: self.dynLight(request:context:)
      )

    case "DynDetail":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynDetailReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynDetailReply>(),
        interceptors: self.interceptors?.makeDynDetailInterceptors() ?? [],
        userFunction: self.dynDetail(request:context:)
      )

    case "LikeList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_LikeListReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_LikeListReply>(),
        interceptors: self.interceptors?.makeLikeListInterceptors() ?? [],
        userFunction: self.likeList(request:context:)
      )

    case "RepostList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_RepostListReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_RepostListRsp>(),
        interceptors: self.interceptors?.makeRepostListInterceptors() ?? [],
        userFunction: self.repostList(request:context:)
      )

    case "DynSpace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynSpaceReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynSpaceRsp>(),
        interceptors: self.interceptors?.makeDynSpaceInterceptors() ?? [],
        userFunction: self.dynSpace(request:context:)
      )

    case "DynUnLoginRcmd":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynRcmdReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynRcmdReply>(),
        interceptors: self.interceptors?.makeDynUnLoginRcmdInterceptors() ?? [],
        userFunction: self.dynUnLoginRcmd(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// v2动态
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Bilibili_App_Dynamic_V2_DynamicAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Bilibili_App_Dynamic_V2_DynamicServerInterceptorFactoryProtocol? { get }

  /// 动态视频页
  @Sendable func dynVideo(
    request: Bilibili_App_Dynamic_V2_DynVideoReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_DynVideoReply

  /// 动态综合页
  @Sendable func dynAll(
    request: Bilibili_App_Dynamic_V2_DynAllReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_DynAllReply

  /// 批量动态id获取动态详情
  @Sendable func dynDetails(
    request: Bilibili_App_Dynamic_V2_DynDetailsReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_DynDetailsReply

  /// 视频页最近访问 - 个人feed流
  @Sendable func dynVideoPersonal(
    request: Bilibili_App_Dynamic_V2_DynVideoPersonalReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_DynVideoPersonalReply

  /// 视频页最近访问 - 标记已读
  @Sendable func dynVideoUpdOffset(
    request: Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_NoReply

  /// 动态通用附加卡-follow/取消follow
  @Sendable func dynAdditionCommonFollow(
    request: Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReply

  /// 动态点赞
  @Sendable func dynThumb(
    request: Bilibili_App_Dynamic_V2_DynThumbReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_NoReply

  /// 动态发布生成临时卡
  @Sendable func dynFakeCard(
    request: Bilibili_App_Dynamic_V2_DynFakeCardReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_DynFakeCardReply

  /// 关注推荐up主换一换
  @Sendable func dynRcmdUpExchange(
    request: Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReply

  /// 综合页最近访问 - 个人feed流
  @Sendable func dynAllPersonal(
    request: Bilibili_App_Dynamic_V2_DynAllPersonalReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_DynAllPersonalReply

  /// 综合页最近访问 - 标记已读
  @Sendable func dynAllUpdOffset(
    request: Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_NoReply

  /// 投票操作接口
  @Sendable func dynVote(
    request: Bilibili_App_Dynamic_V2_DynVoteReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_DynVoteReply

  /// 网关调用 - 查看更多-列表
  @Sendable func dynMixUpListViewMore(
    request: Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReply

  /// 轻浏览
  @Sendable func dynLight(
    request: Bilibili_App_Dynamic_V2_DynLightReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_DynLightReply

  /// 动态详情页
  @Sendable func dynDetail(
    request: Bilibili_App_Dynamic_V2_DynDetailReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_DynDetailReply

  /// 点赞列表
  @Sendable func likeList(
    request: Bilibili_App_Dynamic_V2_LikeListReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_LikeListReply

  /// 转发列表
  @Sendable func repostList(
    request: Bilibili_App_Dynamic_V2_RepostListReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_RepostListRsp

  /// 空间页动态
  @Sendable func dynSpace(
    request: Bilibili_App_Dynamic_V2_DynSpaceReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_DynSpaceRsp

  /// 未登录页分区UP主推荐
  @Sendable func dynUnLoginRcmd(
    request: Bilibili_App_Dynamic_V2_DynRcmdReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bilibili_App_Dynamic_V2_DynRcmdReply
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bilibili_App_Dynamic_V2_DynamicAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Bilibili_App_Dynamic_V2_DynamicServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Bilibili_App_Dynamic_V2_DynamicServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Bilibili_App_Dynamic_V2_DynamicServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DynVideo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynVideoReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynVideoReply>(),
        interceptors: self.interceptors?.makeDynVideoInterceptors() ?? [],
        wrapping: self.dynVideo(request:context:)
      )

    case "DynAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynAllReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynAllReply>(),
        interceptors: self.interceptors?.makeDynAllInterceptors() ?? [],
        wrapping: self.dynAll(request:context:)
      )

    case "DynDetails":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynDetailsReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynDetailsReply>(),
        interceptors: self.interceptors?.makeDynDetailsInterceptors() ?? [],
        wrapping: self.dynDetails(request:context:)
      )

    case "DynVideoPersonal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynVideoPersonalReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynVideoPersonalReply>(),
        interceptors: self.interceptors?.makeDynVideoPersonalInterceptors() ?? [],
        wrapping: self.dynVideoPersonal(request:context:)
      )

    case "DynVideoUpdOffset":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_NoReply>(),
        interceptors: self.interceptors?.makeDynVideoUpdOffsetInterceptors() ?? [],
        wrapping: self.dynVideoUpdOffset(request:context:)
      )

    case "DynAdditionCommonFollow":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReply>(),
        interceptors: self.interceptors?.makeDynAdditionCommonFollowInterceptors() ?? [],
        wrapping: self.dynAdditionCommonFollow(request:context:)
      )

    case "DynThumb":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynThumbReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_NoReply>(),
        interceptors: self.interceptors?.makeDynThumbInterceptors() ?? [],
        wrapping: self.dynThumb(request:context:)
      )

    case "DynFakeCard":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynFakeCardReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynFakeCardReply>(),
        interceptors: self.interceptors?.makeDynFakeCardInterceptors() ?? [],
        wrapping: self.dynFakeCard(request:context:)
      )

    case "DynRcmdUpExchange":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReply>(),
        interceptors: self.interceptors?.makeDynRcmdUpExchangeInterceptors() ?? [],
        wrapping: self.dynRcmdUpExchange(request:context:)
      )

    case "DynAllPersonal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynAllPersonalReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynAllPersonalReply>(),
        interceptors: self.interceptors?.makeDynAllPersonalInterceptors() ?? [],
        wrapping: self.dynAllPersonal(request:context:)
      )

    case "DynAllUpdOffset":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_NoReply>(),
        interceptors: self.interceptors?.makeDynAllUpdOffsetInterceptors() ?? [],
        wrapping: self.dynAllUpdOffset(request:context:)
      )

    case "DynVote":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynVoteReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynVoteReply>(),
        interceptors: self.interceptors?.makeDynVoteInterceptors() ?? [],
        wrapping: self.dynVote(request:context:)
      )

    case "DynMixUpListViewMore":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReply>(),
        interceptors: self.interceptors?.makeDynMixUpListViewMoreInterceptors() ?? [],
        wrapping: self.dynMixUpListViewMore(request:context:)
      )

    case "DynLight":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynLightReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynLightReply>(),
        interceptors: self.interceptors?.makeDynLightInterceptors() ?? [],
        wrapping: self.dynLight(request:context:)
      )

    case "DynDetail":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynDetailReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynDetailReply>(),
        interceptors: self.interceptors?.makeDynDetailInterceptors() ?? [],
        wrapping: self.dynDetail(request:context:)
      )

    case "LikeList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_LikeListReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_LikeListReply>(),
        interceptors: self.interceptors?.makeLikeListInterceptors() ?? [],
        wrapping: self.likeList(request:context:)
      )

    case "RepostList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_RepostListReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_RepostListRsp>(),
        interceptors: self.interceptors?.makeRepostListInterceptors() ?? [],
        wrapping: self.repostList(request:context:)
      )

    case "DynSpace":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynSpaceReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynSpaceRsp>(),
        interceptors: self.interceptors?.makeDynSpaceInterceptors() ?? [],
        wrapping: self.dynSpace(request:context:)
      )

    case "DynUnLoginRcmd":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bilibili_App_Dynamic_V2_DynRcmdReq>(),
        responseSerializer: ProtobufSerializer<Bilibili_App_Dynamic_V2_DynRcmdReply>(),
        interceptors: self.interceptors?.makeDynUnLoginRcmdInterceptors() ?? [],
        wrapping: self.dynUnLoginRcmd(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol Bilibili_App_Dynamic_V2_DynamicServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'dynVideo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDynVideoInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_DynVideoReq, Bilibili_App_Dynamic_V2_DynVideoReply>]

  /// - Returns: Interceptors to use when handling 'dynAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDynAllInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_DynAllReq, Bilibili_App_Dynamic_V2_DynAllReply>]

  /// - Returns: Interceptors to use when handling 'dynDetails'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDynDetailsInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_DynDetailsReq, Bilibili_App_Dynamic_V2_DynDetailsReply>]

  /// - Returns: Interceptors to use when handling 'dynVideoPersonal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDynVideoPersonalInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_DynVideoPersonalReq, Bilibili_App_Dynamic_V2_DynVideoPersonalReply>]

  /// - Returns: Interceptors to use when handling 'dynVideoUpdOffset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDynVideoUpdOffsetInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq, Bilibili_App_Dynamic_V2_NoReply>]

  /// - Returns: Interceptors to use when handling 'dynAdditionCommonFollow'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDynAdditionCommonFollowInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq, Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReply>]

  /// - Returns: Interceptors to use when handling 'dynThumb'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDynThumbInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_DynThumbReq, Bilibili_App_Dynamic_V2_NoReply>]

  /// - Returns: Interceptors to use when handling 'dynFakeCard'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDynFakeCardInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_DynFakeCardReq, Bilibili_App_Dynamic_V2_DynFakeCardReply>]

  /// - Returns: Interceptors to use when handling 'dynRcmdUpExchange'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDynRcmdUpExchangeInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq, Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReply>]

  /// - Returns: Interceptors to use when handling 'dynAllPersonal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDynAllPersonalInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_DynAllPersonalReq, Bilibili_App_Dynamic_V2_DynAllPersonalReply>]

  /// - Returns: Interceptors to use when handling 'dynAllUpdOffset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDynAllUpdOffsetInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq, Bilibili_App_Dynamic_V2_NoReply>]

  /// - Returns: Interceptors to use when handling 'dynVote'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDynVoteInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_DynVoteReq, Bilibili_App_Dynamic_V2_DynVoteReply>]

  /// - Returns: Interceptors to use when handling 'dynMixUpListViewMore'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDynMixUpListViewMoreInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq, Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReply>]

  /// - Returns: Interceptors to use when handling 'dynLight'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDynLightInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_DynLightReq, Bilibili_App_Dynamic_V2_DynLightReply>]

  /// - Returns: Interceptors to use when handling 'dynDetail'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDynDetailInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_DynDetailReq, Bilibili_App_Dynamic_V2_DynDetailReply>]

  /// - Returns: Interceptors to use when handling 'likeList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLikeListInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_LikeListReq, Bilibili_App_Dynamic_V2_LikeListReply>]

  /// - Returns: Interceptors to use when handling 'repostList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRepostListInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_RepostListReq, Bilibili_App_Dynamic_V2_RepostListRsp>]

  /// - Returns: Interceptors to use when handling 'dynSpace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDynSpaceInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_DynSpaceReq, Bilibili_App_Dynamic_V2_DynSpaceRsp>]

  /// - Returns: Interceptors to use when handling 'dynUnLoginRcmd'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDynUnLoginRcmdInterceptors() -> [ServerInterceptor<Bilibili_App_Dynamic_V2_DynRcmdReq, Bilibili_App_Dynamic_V2_DynRcmdReply>]
}

internal enum Bilibili_App_Dynamic_V2_DynamicServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Dynamic",
    fullName: "bilibili.app.dynamic.v2.Dynamic",
    methods: [
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.dynVideo,
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.dynAll,
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.dynDetails,
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.dynVideoPersonal,
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.dynVideoUpdOffset,
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.dynAdditionCommonFollow,
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.dynThumb,
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.dynFakeCard,
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.dynRcmdUpExchange,
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.dynAllPersonal,
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.dynAllUpdOffset,
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.dynVote,
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.dynMixUpListViewMore,
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.dynLight,
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.dynDetail,
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.likeList,
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.repostList,
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.dynSpace,
      Bilibili_App_Dynamic_V2_DynamicServerMetadata.Methods.dynUnLoginRcmd,
    ]
  )

  internal enum Methods {
    internal static let dynVideo = GRPCMethodDescriptor(
      name: "DynVideo",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynVideo",
      type: GRPCCallType.unary
    )

    internal static let dynAll = GRPCMethodDescriptor(
      name: "DynAll",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynAll",
      type: GRPCCallType.unary
    )

    internal static let dynDetails = GRPCMethodDescriptor(
      name: "DynDetails",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynDetails",
      type: GRPCCallType.unary
    )

    internal static let dynVideoPersonal = GRPCMethodDescriptor(
      name: "DynVideoPersonal",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynVideoPersonal",
      type: GRPCCallType.unary
    )

    internal static let dynVideoUpdOffset = GRPCMethodDescriptor(
      name: "DynVideoUpdOffset",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynVideoUpdOffset",
      type: GRPCCallType.unary
    )

    internal static let dynAdditionCommonFollow = GRPCMethodDescriptor(
      name: "DynAdditionCommonFollow",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynAdditionCommonFollow",
      type: GRPCCallType.unary
    )

    internal static let dynThumb = GRPCMethodDescriptor(
      name: "DynThumb",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynThumb",
      type: GRPCCallType.unary
    )

    internal static let dynFakeCard = GRPCMethodDescriptor(
      name: "DynFakeCard",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynFakeCard",
      type: GRPCCallType.unary
    )

    internal static let dynRcmdUpExchange = GRPCMethodDescriptor(
      name: "DynRcmdUpExchange",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynRcmdUpExchange",
      type: GRPCCallType.unary
    )

    internal static let dynAllPersonal = GRPCMethodDescriptor(
      name: "DynAllPersonal",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynAllPersonal",
      type: GRPCCallType.unary
    )

    internal static let dynAllUpdOffset = GRPCMethodDescriptor(
      name: "DynAllUpdOffset",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynAllUpdOffset",
      type: GRPCCallType.unary
    )

    internal static let dynVote = GRPCMethodDescriptor(
      name: "DynVote",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynVote",
      type: GRPCCallType.unary
    )

    internal static let dynMixUpListViewMore = GRPCMethodDescriptor(
      name: "DynMixUpListViewMore",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynMixUpListViewMore",
      type: GRPCCallType.unary
    )

    internal static let dynLight = GRPCMethodDescriptor(
      name: "DynLight",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynLight",
      type: GRPCCallType.unary
    )

    internal static let dynDetail = GRPCMethodDescriptor(
      name: "DynDetail",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynDetail",
      type: GRPCCallType.unary
    )

    internal static let likeList = GRPCMethodDescriptor(
      name: "LikeList",
      path: "/bilibili.app.dynamic.v2.Dynamic/LikeList",
      type: GRPCCallType.unary
    )

    internal static let repostList = GRPCMethodDescriptor(
      name: "RepostList",
      path: "/bilibili.app.dynamic.v2.Dynamic/RepostList",
      type: GRPCCallType.unary
    )

    internal static let dynSpace = GRPCMethodDescriptor(
      name: "DynSpace",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynSpace",
      type: GRPCCallType.unary
    )

    internal static let dynUnLoginRcmd = GRPCMethodDescriptor(
      name: "DynUnLoginRcmd",
      path: "/bilibili.app.dynamic.v2.Dynamic/DynUnLoginRcmd",
      type: GRPCCallType.unary
    )
  }
}
