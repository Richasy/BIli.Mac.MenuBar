// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bilibili/app/dynamic/v2/dynamic.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 刷新方式
enum Bilibili_App_Dynamic_V2_Refresh: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 刷新列表
  case new // = 0

  /// 请求历史
  case history // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .new
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .new
    case 1: self = .history
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .new: return 0
    case .history: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_Refresh: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_Refresh] = [
    .new,
    .history,
  ]
}

#endif  // swift(>=4.2)

/// DynamicType 枚举-动态类型
enum Bilibili_App_Dynamic_V2_DynamicType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 占位
  case dynNone // = 0

  /// 转发
  case forward // = 1

  /// 稿件: ugc、小视频、短视频、UGC转PGC
  case av // = 2

  /// pgc：番剧、PGC番剧、PGC电影、PGC电视剧、PGC国创、PGC纪录片
  case pgc // = 3

  /// 付费更新批次
  case courses // = 4

  /// 折叠
  case fold // = 5

  /// 纯文字
  case word // = 6

  /// 图文
  case draw // = 7

  /// 专栏 原仅phone端
  case article // = 8

  /// 音频 原仅phone端
  case music // = 9

  /// 通用卡 方形
  case commonSquare // = 10

  /// 通用卡 竖形
  case commonVertical // = 11

  /// 直播卡 只有转发态
  case live // = 12

  /// 播单 原仅phone端 只有转发态
  case medialist // = 13

  /// 付费更新批次 只有转发态
  case coursesSeason // = 14

  /// 广告卡
  case ad // = 15

  /// 小程序卡
  case applet // = 16

  /// 订阅卡
  case subscription // = 17

  /// 直播推荐卡
  case liveRcmd // = 18

  /// 通栏
  case banner // = 19

  /// 合集卡
  case ugcSeason // = 20

  /// 新订阅卡
  case subscriptionNew // = 21
  case UNRECOGNIZED(Int)

  init() {
    self = .dynNone
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .dynNone
    case 1: self = .forward
    case 2: self = .av
    case 3: self = .pgc
    case 4: self = .courses
    case 5: self = .fold
    case 6: self = .word
    case 7: self = .draw
    case 8: self = .article
    case 9: self = .music
    case 10: self = .commonSquare
    case 11: self = .commonVertical
    case 12: self = .live
    case 13: self = .medialist
    case 14: self = .coursesSeason
    case 15: self = .ad
    case 16: self = .applet
    case 17: self = .subscription
    case 18: self = .liveRcmd
    case 19: self = .banner
    case 20: self = .ugcSeason
    case 21: self = .subscriptionNew
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .dynNone: return 0
    case .forward: return 1
    case .av: return 2
    case .pgc: return 3
    case .courses: return 4
    case .fold: return 5
    case .word: return 6
    case .draw: return 7
    case .article: return 8
    case .music: return 9
    case .commonSquare: return 10
    case .commonVertical: return 11
    case .live: return 12
    case .medialist: return 13
    case .coursesSeason: return 14
    case .ad: return 15
    case .applet: return 16
    case .subscription: return 17
    case .liveRcmd: return 18
    case .banner: return 19
    case .ugcSeason: return 20
    case .subscriptionNew: return 21
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_DynamicType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_DynamicType] = [
    .dynNone,
    .forward,
    .av,
    .pgc,
    .courses,
    .fold,
    .word,
    .draw,
    .article,
    .music,
    .commonSquare,
    .commonVertical,
    .live,
    .medialist,
    .coursesSeason,
    .ad,
    .applet,
    .subscription,
    .liveRcmd,
    .banner,
    .ugcSeason,
    .subscriptionNew,
  ]
}

#endif  // swift(>=4.2)

/// 直播状态
enum Bilibili_App_Dynamic_V2_LiveState: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 未直播
  case liveNone // = 0

  /// 直播中
  case liveLive // = 1

  /// 轮播中
  case liveRotation // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .liveNone
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .liveNone
    case 1: self = .liveLive
    case 2: self = .liveRotation
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .liveNone: return 0
    case .liveLive: return 1
    case .liveRotation: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_LiveState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_LiveState] = [
    .liveNone,
    .liveLive,
    .liveRotation,
  ]
}

#endif  // swift(>=4.2)

/// 文本类型
enum Bilibili_App_Dynamic_V2_DescType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 占位
  case none // = 0

  /// 文本
  case text // = 1

  /// @
  case aite // = 2

  /// 抽奖
  case lottery // = 3

  /// 投票
  case vote // = 4

  /// 话题
  case topic // = 5

  /// 商品
  case goods // = 6

  /// bv
  case bv // = 7

  /// av
  case av // = 8

  /// 表情
  case emoji // = 9

  /// 外露用户
  case user // = 10

  /// 专栏
  case cv // = 11

  /// 小视频
  case vc // = 12

  /// 网址
  case web // = 13

  /// 淘宝
  case taobao // = 14

  /// 邮箱
  case mail // = 15

  /// 番剧season
  case ogvSeason // = 16

  /// 番剧ep
  case ogvEp // = 17
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .text
    case 2: self = .aite
    case 3: self = .lottery
    case 4: self = .vote
    case 5: self = .topic
    case 6: self = .goods
    case 7: self = .bv
    case 8: self = .av
    case 9: self = .emoji
    case 10: self = .user
    case 11: self = .cv
    case 12: self = .vc
    case 13: self = .web
    case 14: self = .taobao
    case 15: self = .mail
    case 16: self = .ogvSeason
    case 17: self = .ogvEp
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .text: return 1
    case .aite: return 2
    case .lottery: return 3
    case .vote: return 4
    case .topic: return 5
    case .goods: return 6
    case .bv: return 7
    case .av: return 8
    case .emoji: return 9
    case .user: return 10
    case .cv: return 11
    case .vc: return 12
    case .web: return 13
    case .taobao: return 14
    case .mail: return 15
    case .ogvSeason: return 16
    case .ogvEp: return 17
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_DescType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_DescType] = [
    .none,
    .text,
    .aite,
    .lottery,
    .vote,
    .topic,
    .goods,
    .bv,
    .av,
    .emoji,
    .user,
    .cv,
    .vc,
    .web,
    .taobao,
    .mail,
    .ogvSeason,
    .ogvEp,
  ]
}

#endif  // swift(>=4.2)

/// 表情包类型
enum Bilibili_App_Dynamic_V2_EmojiType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 占位
  case emojiNone // = 0

  /// emoji旧类型
  case emojiOld // = 1

  /// emoji新类型
  case emojiNew // = 2

  /// 大会员表情
  case vip // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .emojiNone
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .emojiNone
    case 1: self = .emojiOld
    case 2: self = .emojiNew
    case 3: self = .vip
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .emojiNone: return 0
    case .emojiOld: return 1
    case .emojiNew: return 2
    case .vip: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_EmojiType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_EmojiType] = [
    .emojiNone,
    .emojiOld,
    .emojiNew,
    .vip,
  ]
}

#endif  // swift(>=4.2)

/// 动态详情模块类型
enum Bilibili_App_Dynamic_V2_ModuleDynamicType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 稿件
  case mdlDynArchive // = 0

  /// pgc
  case mdlDynPgc // = 1

  /// 付费课程-系列
  case mdlDynCourSeason // = 2

  /// 付费课程-批次
  case mdlDynCourBatch // = 3

  /// 转发卡
  case mdlDynForward // = 4

  /// 图文
  case mdlDynDraw // = 5

  /// 专栏
  case mdlDynArticle // = 6

  /// 音频
  case mdlDynMusic // = 7

  /// 通用卡方
  case mdlDynCommon // = 8

  /// 直播卡
  case mdlDynLive // = 9

  /// 播单
  case mdlDynMedialist // = 10

  /// 小程序卡
  case mdlDynApplet // = 11

  /// 订阅卡
  case mdlDynSubscription // = 12

  /// 直播推荐卡
  case mdlDynLiveRcmd // = 13

  /// UGC合集
  case mdlDynUgcSeason // = 14

  /// 订阅卡
  case mdlDynSubscriptionNew // = 15
  case UNRECOGNIZED(Int)

  init() {
    self = .mdlDynArchive
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .mdlDynArchive
    case 1: self = .mdlDynPgc
    case 2: self = .mdlDynCourSeason
    case 3: self = .mdlDynCourBatch
    case 4: self = .mdlDynForward
    case 5: self = .mdlDynDraw
    case 6: self = .mdlDynArticle
    case 7: self = .mdlDynMusic
    case 8: self = .mdlDynCommon
    case 9: self = .mdlDynLive
    case 10: self = .mdlDynMedialist
    case 11: self = .mdlDynApplet
    case 12: self = .mdlDynSubscription
    case 13: self = .mdlDynLiveRcmd
    case 14: self = .mdlDynUgcSeason
    case 15: self = .mdlDynSubscriptionNew
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .mdlDynArchive: return 0
    case .mdlDynPgc: return 1
    case .mdlDynCourSeason: return 2
    case .mdlDynCourBatch: return 3
    case .mdlDynForward: return 4
    case .mdlDynDraw: return 5
    case .mdlDynArticle: return 6
    case .mdlDynMusic: return 7
    case .mdlDynCommon: return 8
    case .mdlDynLive: return 9
    case .mdlDynMedialist: return 10
    case .mdlDynApplet: return 11
    case .mdlDynSubscription: return 12
    case .mdlDynLiveRcmd: return 13
    case .mdlDynUgcSeason: return 14
    case .mdlDynSubscriptionNew: return 15
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_ModuleDynamicType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_ModuleDynamicType] = [
    .mdlDynArchive,
    .mdlDynPgc,
    .mdlDynCourSeason,
    .mdlDynCourBatch,
    .mdlDynForward,
    .mdlDynDraw,
    .mdlDynArticle,
    .mdlDynMusic,
    .mdlDynCommon,
    .mdlDynLive,
    .mdlDynMedialist,
    .mdlDynApplet,
    .mdlDynSubscription,
    .mdlDynLiveRcmd,
    .mdlDynUgcSeason,
    .mdlDynSubscriptionNew,
  ]
}

#endif  // swift(>=4.2)

/// 播放器类型
enum Bilibili_App_Dynamic_V2_MediaType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 本地
  case none // = 0

  /// UGC
  case ugc // = 1

  /// PGC
  case pgc // = 2

  /// 直播
  case live // = 3

  /// 小视频
  case vcs // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .ugc
    case 2: self = .pgc
    case 3: self = .live
    case 4: self = .vcs
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .ugc: return 1
    case .pgc: return 2
    case .live: return 3
    case .vcs: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_MediaType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_MediaType] = [
    .none,
    .ugc,
    .pgc,
    .live,
    .vcs,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_App_Dynamic_V2_ReserveType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 占位
  case reserveNone // = 0

  /// 预约召回
  case reserveRecall // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .reserveNone
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .reserveNone
    case 1: self = .reserveRecall
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .reserveNone: return 0
    case .reserveRecall: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_ReserveType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_ReserveType] = [
    .reserveNone,
    .reserveRecall,
  ]
}

#endif  // swift(>=4.2)

/// 视频类型
enum Bilibili_App_Dynamic_V2_VideoType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  ///普通视频
  case general // = 0

  ///动态视频
  case dynamic // = 1

  ///直播回放视频
  case playback // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .general
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .general
    case 1: self = .dynamic
    case 2: self = .playback
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .general: return 0
    case .dynamic: return 1
    case .playback: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_VideoType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_VideoType] = [
    .general,
    .dynamic,
    .playback,
  ]
}

#endif  // swift(>=4.2)

/// 番剧类型
enum Bilibili_App_Dynamic_V2_VideoSubType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 没有子类型
  case none // = 0

  /// 番剧
  case bangumi // = 1

  /// 电影
  case movie // = 2

  /// 纪录片
  case documentary // = 3

  /// 国创
  case domestic // = 4

  /// 电视剧
  case teleplay // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .bangumi
    case 2: self = .movie
    case 3: self = .documentary
    case 4: self = .domestic
    case 5: self = .teleplay
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .bangumi: return 1
    case .movie: return 2
    case .documentary: return 3
    case .domestic: return 4
    case .teleplay: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_VideoSubType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_VideoSubType] = [
    .none,
    .bangumi,
    .movie,
    .documentary,
    .domestic,
    .teleplay,
  ]
}

#endif  // swift(>=4.2)

/// 图文标签类型
enum Bilibili_App_Dynamic_V2_MdlDynDrawTagType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 占位
  case mdlDrawTagNone // = 0

  /// 普通标签
  case mdlDrawTagCommon // = 1

  /// 商品标签
  case mdlDrawTagGoods // = 2

  /// 用户昵称
  case mdlDrawTagUser // = 3

  /// 话题名称
  case mdlDrawTagTopic // = 4

  /// lbs标签
  case mdlDrawTagLbs // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .mdlDrawTagNone
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .mdlDrawTagNone
    case 1: self = .mdlDrawTagCommon
    case 2: self = .mdlDrawTagGoods
    case 3: self = .mdlDrawTagUser
    case 4: self = .mdlDrawTagTopic
    case 5: self = .mdlDrawTagLbs
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .mdlDrawTagNone: return 0
    case .mdlDrawTagCommon: return 1
    case .mdlDrawTagGoods: return 2
    case .mdlDrawTagUser: return 3
    case .mdlDrawTagTopic: return 4
    case .mdlDrawTagLbs: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_MdlDynDrawTagType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_MdlDynDrawTagType] = [
    .mdlDrawTagNone,
    .mdlDrawTagCommon,
    .mdlDrawTagGoods,
    .mdlDrawTagUser,
    .mdlDrawTagTopic,
    .mdlDrawTagLbs,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_App_Dynamic_V2_MdlDynCommonType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case mdlDynCommonNone // = 0
  case mdlDynCommonSquare // = 1
  case mdlDynCommonVertica // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .mdlDynCommonNone
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .mdlDynCommonNone
    case 1: self = .mdlDynCommonSquare
    case 2: self = .mdlDynCommonVertica
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .mdlDynCommonNone: return 0
    case .mdlDynCommonSquare: return 1
    case .mdlDynCommonVertica: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_MdlDynCommonType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_MdlDynCommonType] = [
    .mdlDynCommonNone,
    .mdlDynCommonSquare,
    .mdlDynCommonVertica,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_App_Dynamic_V2_MdlDynSubscriptionNewStyle: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 占位
  case nont // = 0

  /// 直播
  case live // = 1

  /// 图文
  case draw // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .nont
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .nont
    case 1: self = .live
    case 2: self = .draw
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .nont: return 0
    case .live: return 1
    case .draw: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_MdlDynSubscriptionNewStyle: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_MdlDynSubscriptionNewStyle] = [
    .nont,
    .live,
    .draw,
  ]
}

#endif  // swift(>=4.2)

/// 枚举-动态附加卡
enum Bilibili_App_Dynamic_V2_AdditionalType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 占位
  case additionalNone // = 0

  /// 附加卡-追番
  case pgc // = 1

  /// 附加卡-商品
  case goods // = 2

  /// 附加卡投票
  case vote // = 3

  /// 附加通用卡
  case common // = 4

  /// 附加电竞卡
  case esport // = 5

  /// 附加UP主推荐卡
  case upRcmd // = 6

  /// 附加卡-ugc
  case ugc // = 7

  /// UP主预约卡
  case upReservation // = 8
  case UNRECOGNIZED(Int)

  init() {
    self = .additionalNone
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .additionalNone
    case 1: self = .pgc
    case 2: self = .goods
    case 3: self = .vote
    case 4: self = .common
    case 5: self = .esport
    case 6: self = .upRcmd
    case 7: self = .ugc
    case 8: self = .upReservation
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .additionalNone: return 0
    case .pgc: return 1
    case .goods: return 2
    case .vote: return 3
    case .common: return 4
    case .esport: return 5
    case .upRcmd: return 6
    case .ugc: return 7
    case .upReservation: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_AdditionalType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_AdditionalType] = [
    .additionalNone,
    .pgc,
    .goods,
    .vote,
    .common,
    .esport,
    .upRcmd,
    .ugc,
    .upReservation,
  ]
}

#endif  // swift(>=4.2)

/// 枚举-附加卡样式
enum Bilibili_App_Dynamic_V2_ImageStyle: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case addStyleVertical // = 0
  case addStyleSquare // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .addStyleVertical
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .addStyleVertical
    case 1: self = .addStyleSquare
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .addStyleVertical: return 0
    case .addStyleSquare: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_ImageStyle: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_ImageStyle] = [
    .addStyleVertical,
    .addStyleSquare,
  ]
}

#endif  // swift(>=4.2)

/// 按钮类型
enum Bilibili_App_Dynamic_V2_AddButtonType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 占位
  case btNone // = 0

  /// 跳转
  case btJump // = 1

  /// 按钮
  case btButton // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .btNone
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .btNone
    case 1: self = .btJump
    case 2: self = .btButton
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .btNone: return 0
    case .btJump: return 1
    case .btButton: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_AddButtonType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_AddButtonType] = [
    .btNone,
    .btJump,
    .btButton,
  ]
}

#endif  // swift(>=4.2)

/// 附加卡按钮状态
enum Bilibili_App_Dynamic_V2_AdditionalButtonStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case uncheck // = 1
  case check // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .uncheck
    case 2: self = .check
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .uncheck: return 1
    case .check: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_AdditionalButtonStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_AdditionalButtonStatus] = [
    .none,
    .uncheck,
    .check,
  ]
}

#endif  // swift(>=4.2)

/// 附加卡按钮点击类型
enum Bilibili_App_Dynamic_V2_AdditionalButtonClickType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 通用按钮
  case clickNone // = 0

  /// 预约卡按钮
  case clickUp // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .clickNone
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .clickNone
    case 1: self = .clickUp
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .clickNone: return 0
    case .clickUp: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_AdditionalButtonClickType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_AdditionalButtonClickType] = [
    .clickNone,
    .clickUp,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_App_Dynamic_V2_DisableState: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 高亮
  case highlight // = 0

  /// 置灰(按钮不可点击)
  case gary // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .highlight
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .highlight
    case 1: self = .gary
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .highlight: return 0
    case .gary: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_DisableState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_DisableState] = [
    .highlight,
    .gary,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_App_Dynamic_V2_AddButtonBgStyle: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 默认填充
  case fill // = 0

  /// 描边
  case stroke // = 1

  /// 置灰
  case gray // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .fill
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .fill
    case 1: self = .stroke
    case 2: self = .gray
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .fill: return 0
    case .stroke: return 1
    case .gray: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_AddButtonBgStyle: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_AddButtonBgStyle] = [
    .fill,
    .stroke,
    .gray,
  ]
}

#endif  // swift(>=4.2)

/// 附加大卡-电竞卡样式
enum Bilibili_App_Dynamic_V2_EspaceStyle: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// moba类
  case moba // = 0
  case UNRECOGNIZED(Int)

  init() {
    self = .moba
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .moba
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .moba: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_EspaceStyle: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_EspaceStyle] = [
    .moba,
  ]
}

#endif  // swift(>=4.2)

/// 文本高亮枚举
enum Bilibili_App_Dynamic_V2_HighlightTextStyle: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 默认
  case styleNone // = 0

  /// 高亮
  case styleHighlight // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .styleNone
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .styleNone
    case 1: self = .styleHighlight
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .styleNone: return 0
    case .styleHighlight: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_HighlightTextStyle: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_HighlightTextStyle] = [
    .styleNone,
    .styleHighlight,
  ]
}

#endif  // swift(>=4.2)

/// 动态小卡类型
enum Bilibili_App_Dynamic_V2_DynExtendType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 占位
  case dynExtTypeNone // = 0

  /// 话题小卡
  case dynExtTypeTopic // = 1

  /// lbs小卡
  case dynExtTypeLbs // = 2

  /// 热门小卡
  case dynExtTypeHot // = 3

  /// 游戏小卡
  case dynExtTypeGame // = 4

  /// 通用小卡
  case dynExtTypeCommon // = 5

  /// 必剪小卡
  case dynExtTypeBiliCut // = 6

  /// ogv小卡
  case dynExtTypeOgv // = 7

  /// 自动附加ogv小卡
  case dynExtTypeAutoOgv // = 8
  case UNRECOGNIZED(Int)

  init() {
    self = .dynExtTypeNone
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .dynExtTypeNone
    case 1: self = .dynExtTypeTopic
    case 2: self = .dynExtTypeLbs
    case 3: self = .dynExtTypeHot
    case 4: self = .dynExtTypeGame
    case 5: self = .dynExtTypeCommon
    case 6: self = .dynExtTypeBiliCut
    case 7: self = .dynExtTypeOgv
    case 8: self = .dynExtTypeAutoOgv
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .dynExtTypeNone: return 0
    case .dynExtTypeTopic: return 1
    case .dynExtTypeLbs: return 2
    case .dynExtTypeHot: return 3
    case .dynExtTypeGame: return 4
    case .dynExtTypeCommon: return 5
    case .dynExtTypeBiliCut: return 6
    case .dynExtTypeOgv: return 7
    case .dynExtTypeAutoOgv: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_DynExtendType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_DynExtendType] = [
    .dynExtTypeNone,
    .dynExtTypeTopic,
    .dynExtTypeLbs,
    .dynExtTypeHot,
    .dynExtTypeGame,
    .dynExtTypeCommon,
    .dynExtTypeBiliCut,
    .dynExtTypeOgv,
    .dynExtTypeAutoOgv,
  ]
}

#endif  // swift(>=4.2)

/// 外露模块类型
enum Bilibili_App_Dynamic_V2_LocalIconType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case localIconComment // = 0
  case localIconLike // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .localIconComment
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .localIconComment
    case 1: self = .localIconLike
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .localIconComment: return 0
    case .localIconLike: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_LocalIconType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_LocalIconType] = [
    .localIconComment,
    .localIconLike,
  ]
}

#endif  // swift(>=4.2)

/// DynUriType
enum Bilibili_App_Dynamic_V2_DynUriType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0

  /// 直接跳转对应uri
  case direct // = 1

  /// 作为后缀拼接
  case suffix // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .direct
    case 2: self = .suffix
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .direct: return 1
    case .suffix: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_DynUriType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_DynUriType] = [
    .none,
    .direct,
    .suffix,
  ]
}

#endif  // swift(>=4.2)

/// 折叠类型
enum Bilibili_App_Dynamic_V2_FoldType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 占位
  case zore // = 0

  /// 用户发布折叠
  case publish // = 1

  /// 转发超频折叠
  case frequent // = 2

  /// 联合投稿折叠
  case unite // = 3

  /// 动态受限折叠
  case limit // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .zore
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .zore
    case 1: self = .publish
    case 2: self = .frequent
    case 3: self = .unite
    case 4: self = .limit
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .zore: return 0
    case .publish: return 1
    case .frequent: return 2
    case .unite: return 3
    case .limit: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_FoldType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_FoldType] = [
    .zore,
    .publish,
    .frequent,
    .unite,
    .limit,
  ]
}

#endif  // swift(>=4.2)

/// 用户类型
enum Bilibili_App_Dynamic_V2_UserItemType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case live // = 1
  case liveCustom // = 2
  case normal // = 3
  case extend // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .live
    case 2: self = .liveCustom
    case 3: self = .normal
    case 4: self = .extend
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .live: return 1
    case .liveCustom: return 2
    case .normal: return 3
    case .extend: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_UserItemType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_UserItemType] = [
    .none,
    .live,
    .liveCustom,
    .normal,
    .extend,
  ]
}

#endif  // swift(>=4.2)

/// 动态模块类型
enum Bilibili_App_Dynamic_V2_DynModuleType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 占位
  case moduleNone // = 0

  /// 发布人模块
  case moduleAuthor // = 1

  /// 争议小黄条
  case moduleDispute // = 2

  /// 描述文案
  case moduleDesc // = 3

  /// 动态卡片
  case moduleDynamic // = 4

  /// 转发模块
  case moduleForward // = 5

  /// 点赞用户(废弃)
  case moduleLikeUser // = 6

  /// 小卡模块
  case moduleExtend // = 7

  /// 附加卡
  case moduleAdditional // = 8

  /// 计数信息
  case moduleStat // = 9

  /// 折叠
  case moduleFold // = 10

  /// 评论外露(废弃)
  case moduleComment // = 11

  /// 外露交互模块(点赞、评论)
  case moduleInteraction // = 12

  /// 转发卡的发布人模块
  case moduleAuthorForward // = 13

  /// 广告卡模块
  case moduleAd // = 14

  /// 通栏模块
  case moduleBanner // = 15

  /// 获取物料失败模块
  case moduleItemNull // = 16

  /// 分享组件
  case moduleShareInfo // = 17

  /// 相关推荐模块
  case moduleRecommend // = 18

  /// 转发卡计数信息
  case moduleStatForward // = 19

  /// 顶部模块
  case moduleTop // = 20

  /// 底部模块
  case moduleBottom // = 21
  case UNRECOGNIZED(Int)

  init() {
    self = .moduleNone
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .moduleNone
    case 1: self = .moduleAuthor
    case 2: self = .moduleDispute
    case 3: self = .moduleDesc
    case 4: self = .moduleDynamic
    case 5: self = .moduleForward
    case 6: self = .moduleLikeUser
    case 7: self = .moduleExtend
    case 8: self = .moduleAdditional
    case 9: self = .moduleStat
    case 10: self = .moduleFold
    case 11: self = .moduleComment
    case 12: self = .moduleInteraction
    case 13: self = .moduleAuthorForward
    case 14: self = .moduleAd
    case 15: self = .moduleBanner
    case 16: self = .moduleItemNull
    case 17: self = .moduleShareInfo
    case 18: self = .moduleRecommend
    case 19: self = .moduleStatForward
    case 20: self = .moduleTop
    case 21: self = .moduleBottom
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .moduleNone: return 0
    case .moduleAuthor: return 1
    case .moduleDispute: return 2
    case .moduleDesc: return 3
    case .moduleDynamic: return 4
    case .moduleForward: return 5
    case .moduleLikeUser: return 6
    case .moduleExtend: return 7
    case .moduleAdditional: return 8
    case .moduleStat: return 9
    case .moduleFold: return 10
    case .moduleComment: return 11
    case .moduleInteraction: return 12
    case .moduleAuthorForward: return 13
    case .moduleAd: return 14
    case .moduleBanner: return 15
    case .moduleItemNull: return 16
    case .moduleShareInfo: return 17
    case .moduleRecommend: return 18
    case .moduleStatForward: return 19
    case .moduleTop: return 20
    case .moduleBottom: return 21
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_DynModuleType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_DynModuleType] = [
    .moduleNone,
    .moduleAuthor,
    .moduleDispute,
    .moduleDesc,
    .moduleDynamic,
    .moduleForward,
    .moduleLikeUser,
    .moduleExtend,
    .moduleAdditional,
    .moduleStat,
    .moduleFold,
    .moduleComment,
    .moduleInteraction,
    .moduleAuthorForward,
    .moduleAd,
    .moduleBanner,
    .moduleItemNull,
    .moduleShareInfo,
    .moduleRecommend,
    .moduleStatForward,
    .moduleTop,
    .moduleBottom,
  ]
}

#endif  // swift(>=4.2)

/// 投票类型
enum Bilibili_App_Dynamic_V2_AdditionVoteType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case word // = 1
  case pic // = 2
  case `default` // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .word
    case 2: self = .pic
    case 3: self = .default
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .word: return 1
    case .pic: return 2
    case .default: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_AdditionVoteType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_AdditionVoteType] = [
    .none,
    .word,
    .pic,
    .default,
  ]
}

#endif  // swift(>=4.2)

/// 投票状态
enum Bilibili_App_Dynamic_V2_AdditionVoteState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case `open` // = 1
  case close // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .open
    case 2: self = .close
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .open: return 1
    case .close: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_AdditionVoteState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_AdditionVoteState] = [
    .none,
    .open,
    .close,
  ]
}

#endif  // swift(>=4.2)

/// 动态列表-通栏类型
enum Bilibili_App_Dynamic_V2_ModuleBannerType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case user // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .user
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .user: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_ModuleBannerType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_ModuleBannerType] = [
    .none,
    .user,
  ]
}

#endif  // swift(>=4.2)

/// 右侧操作区域样式枚举
enum Bilibili_App_Dynamic_V2_ModuleAuthorBadgeType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 占位
  case none // = 0

  /// 三点
  case threePoint // = 1

  /// 按钮类型
  case button // = 2

  /// 提权
  case weight // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .threePoint
    case 2: self = .button
    case 3: self = .weight
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .threePoint: return 1
    case .button: return 2
    case .weight: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_ModuleAuthorBadgeType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_ModuleAuthorBadgeType] = [
    .none,
    .threePoint,
    .button,
    .weight,
  ]
}

#endif  // swift(>=4.2)

/// 三点类型
enum Bilibili_App_Dynamic_V2_ThreePointType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 占位
  case tpNone // = 0

  /// 使用此背景
  case background // = 1

  /// 自动播放
  case autoPlay // = 2

  /// 分享
  case share // = 3

  /// 稍后再播
  case wait // = 4

  /// 关注
  case attention // = 5

  /// 举报
  case report // = 6

  /// 删除
  case delete // = 7

  /// 不感兴趣
  case dislike // = 8

  /// 收藏
  case favorite // = 9

  /// 置顶
  case top // = 10

  /// 评论
  case comment // = 11
  case UNRECOGNIZED(Int)

  init() {
    self = .tpNone
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .tpNone
    case 1: self = .background
    case 2: self = .autoPlay
    case 3: self = .share
    case 4: self = .wait
    case 5: self = .attention
    case 6: self = .report
    case 7: self = .delete
    case 8: self = .dislike
    case 9: self = .favorite
    case 10: self = .top
    case 11: self = .comment
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .tpNone: return 0
    case .background: return 1
    case .autoPlay: return 2
    case .share: return 3
    case .wait: return 4
    case .attention: return 5
    case .report: return 6
    case .delete: return 7
    case .dislike: return 8
    case .favorite: return 9
    case .top: return 10
    case .comment: return 11
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_ThreePointType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_ThreePointType] = [
    .tpNone,
    .background,
    .autoPlay,
    .share,
    .wait,
    .attention,
    .report,
    .delete,
    .dislike,
    .favorite,
    .top,
    .comment,
  ]
}

#endif  // swift(>=4.2)

/// 枚举-三点关注状态
enum Bilibili_App_Dynamic_V2_ThreePointAttentionStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case tpNotAttention // = 0
  case tpAttention // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .tpNotAttention
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .tpNotAttention
    case 1: self = .tpAttention
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .tpNotAttention: return 0
    case .tpAttention: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_ThreePointAttentionStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_ThreePointAttentionStatus] = [
    .tpNotAttention,
    .tpAttention,
  ]
}

#endif  // swift(>=4.2)

/// 状态
enum Bilibili_App_Dynamic_V2_TopType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 默认 置顶
  case topNone // = 0

  /// 取消置顶
  case topCancel // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .topNone
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .topNone
    case 1: self = .topCancel
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .topNone: return 0
    case .topCancel: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_TopType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_TopType] = [
    .topNone,
    .topCancel,
  ]
}

#endif  // swift(>=4.2)

/// WeightType 枚举-提权类型
enum Bilibili_App_Dynamic_V2_WeightType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 默认 占位
  case weightNone // = 0

  /// 不感兴趣
  case weightDislike // = 1

  /// 跳链
  case weightJump // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .weightNone
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .weightNone
    case 1: self = .weightDislike
    case 2: self = .weightJump
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .weightNone: return 0
    case .weightDislike: return 1
    case .weightJump: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_WeightType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_WeightType] = [
    .weightNone,
    .weightDislike,
    .weightJump,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_App_Dynamic_V2_FollowType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case ftNotFollow // = 0
  case ftFollow // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .ftNotFollow
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ftNotFollow
    case 1: self = .ftFollow
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .ftNotFollow: return 0
    case .ftFollow: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_FollowType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_FollowType] = [
    .ftNotFollow,
    .ftFollow,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_App_Dynamic_V2_ThumbType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case cancel // = 0
  case thumb // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .cancel
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .cancel
    case 1: self = .thumb
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .cancel: return 0
    case .thumb: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_ThumbType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_ThumbType] = [
    .cancel,
    .thumb,
  ]
}

#endif  // swift(>=4.2)

/// 状态
enum Bilibili_App_Dynamic_V2_VoteStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 正常
  case normal // = 0

  /// 匿名
  case anonymous // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .normal
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .normal
    case 1: self = .anonymous
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .normal: return 0
    case .anonymous: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_VoteStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_VoteStatus] = [
    .normal,
    .anonymous,
  ]
}

#endif  // swift(>=4.2)

/// 关注关系 枚举
enum Bilibili_App_Dynamic_V2_RelationStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 1-未关注 2-关注 3-被关注 4-互相关注 5-特别关注
  case none // = 0
  case nofollow // = 1
  case follow // = 2
  case followed // = 3
  case mutualConcern // = 4
  case special // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .nofollow
    case 2: self = .follow
    case 3: self = .followed
    case 4: self = .mutualConcern
    case 5: self = .special
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .nofollow: return 1
    case .follow: return 2
    case .followed: return 3
    case .mutualConcern: return 4
    case .special: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_RelationStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_RelationStatus] = [
    .none,
    .nofollow,
    .follow,
    .followed,
    .mutualConcern,
    .special,
  ]
}

#endif  // swift(>=4.2)

/// 评论类型
enum Bilibili_App_Dynamic_V2_RepostType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 热门评论
  case repostHot // = 0

  /// 普通评论
  case repostGeneral // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .repostHot
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .repostHot
    case 1: self = .repostGeneral
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .repostHot: return 0
    case .repostGeneral: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_RepostType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_RepostType] = [
    .repostHot,
    .repostGeneral,
  ]
}

#endif  // swift(>=4.2)

/// 推荐模块数据类型
enum Bilibili_App_Dynamic_V2_RcmdType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 稿件
  case rcmdArchive // = 0
  case UNRECOGNIZED(Int)

  init() {
    self = .rcmdArchive
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .rcmdArchive
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .rcmdArchive: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_RcmdType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_RcmdType] = [
    .rcmdArchive,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_App_Dynamic_V2_CoverIcon: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 占位 啥都不展示
  case none // = 0

  /// 播放icon
  case play // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .play
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .play: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_App_Dynamic_V2_CoverIcon: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_App_Dynamic_V2_CoverIcon] = [
    .none,
    .play,
  ]
}

#endif  // swift(>=4.2)

/// 空请求
struct Bilibili_App_Dynamic_V2_NoReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 空响应
struct Bilibili_App_Dynamic_V2_NoReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态视频页-请求
struct Bilibili_App_Dynamic_V2_DynVideoReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 透传 update_baseline
  var updateBaseline: String = String()

  /// 透传 history_offset
  var offset: String = String()

  /// 向下翻页数
  var page: Int32 = 0

  /// 刷新方式
  /// 1:向上刷新 2:向下翻页
  var refreshType: Bilibili_App_Dynamic_V2_Refresh = .new

  /// 秒开参数 新版本废弃，统一使用player_args
  var playurlParam: Bilibili_App_Dynamic_V2_PlayurlParam {
    get {return _playurlParam ?? Bilibili_App_Dynamic_V2_PlayurlParam()}
    set {_playurlParam = newValue}
  }
  /// Returns true if `playurlParam` has been explicitly set.
  var hasPlayurlParam: Bool {return self._playurlParam != nil}
  /// Clears the value of `playurlParam`. Subsequent reads from it will return its default value.
  mutating func clearPlayurlParam() {self._playurlParam = nil}

  /// 综合页当前更新的最大值
  var assistBaseline: String = String()

  /// 客户端时区 兼容UTC-14和Etc/GMT+12,时区区间[-12,14] 东八区为8
  var localTime: Int32 = 0

  /// 来源
  var from: String = String()

  /// 秒开参数
  var playerArgs: Bilibili_App_Archive_Middleware_V1_PlayerArgs {
    get {return _playerArgs ?? Bilibili_App_Archive_Middleware_V1_PlayerArgs()}
    set {_playerArgs = newValue}
  }
  /// Returns true if `playerArgs` has been explicitly set.
  var hasPlayerArgs: Bool {return self._playerArgs != nil}
  /// Clears the value of `playerArgs`. Subsequent reads from it will return its default value.
  mutating func clearPlayerArgs() {self._playerArgs = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _playurlParam: Bilibili_App_Dynamic_V2_PlayurlParam? = nil
  fileprivate var _playerArgs: Bilibili_App_Archive_Middleware_V1_PlayerArgs? = nil
}

/// 秒开通用参数
struct Bilibili_App_Dynamic_V2_PlayurlParam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 清晰度
  var qn: Int32 = 0

  /// 流版本
  var fnver: Int32 = 0

  /// 流类型
  var fnval: Int32 = 0

  /// 是否强制使用域名
  var forceHost: Int32 = 0

  /// 是否4k
  var fourk: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态视频页-响应
struct Bilibili_App_Dynamic_V2_DynVideoReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 卡片列表
  var dynamicList: Bilibili_App_Dynamic_V2_CardVideoDynList {
    get {return _storage._dynamicList ?? Bilibili_App_Dynamic_V2_CardVideoDynList()}
    set {_uniqueStorage()._dynamicList = newValue}
  }
  /// Returns true if `dynamicList` has been explicitly set.
  var hasDynamicList: Bool {return _storage._dynamicList != nil}
  /// Clears the value of `dynamicList`. Subsequent reads from it will return its default value.
  mutating func clearDynamicList() {_uniqueStorage()._dynamicList = nil}

  /// 动态卡片
  var videoUpList: Bilibili_App_Dynamic_V2_CardVideoUpList {
    get {return _storage._videoUpList ?? Bilibili_App_Dynamic_V2_CardVideoUpList()}
    set {_uniqueStorage()._videoUpList = newValue}
  }
  /// Returns true if `videoUpList` has been explicitly set.
  var hasVideoUpList: Bool {return _storage._videoUpList != nil}
  /// Clears the value of `videoUpList`. Subsequent reads from it will return its default value.
  mutating func clearVideoUpList() {_uniqueStorage()._videoUpList = nil}

  /// 视频页-我的追番
  var videoFollowList: Bilibili_App_Dynamic_V2_CardVideoFollowList {
    get {return _storage._videoFollowList ?? Bilibili_App_Dynamic_V2_CardVideoFollowList()}
    set {_uniqueStorage()._videoFollowList = newValue}
  }
  /// Returns true if `videoFollowList` has been explicitly set.
  var hasVideoFollowList: Bool {return _storage._videoFollowList != nil}
  /// Clears the value of `videoFollowList`. Subsequent reads from it will return its default value.
  mutating func clearVideoFollowList() {_uniqueStorage()._videoFollowList = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 动态卡片列表
struct Bilibili_App_Dynamic_V2_CardVideoDynList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 动态列表
  var list: [Bilibili_App_Dynamic_V2_DynamicItem] = []

  /// 更新的动态数
  var updateNum: Int64 = 0

  /// 历史偏移
  var historyOffset: String = String()

  /// 更新基础信息
  var updateBaseline: String = String()

  /// 是否还有更多数据
  var hasMore_p: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态卡片
struct Bilibili_App_Dynamic_V2_DynamicItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 动态卡片类型
  var cardType: Bilibili_App_Dynamic_V2_DynamicType = .dynNone

  /// 转发类型下，源卡片类型
  var itemType: Bilibili_App_Dynamic_V2_DynamicType = .dynNone

  /// 模块内容
  var modules: [Bilibili_App_Dynamic_V2_Module] = []

  /// 操作相关字段
  var extend: Bilibili_App_Dynamic_V2_Extend {
    get {return _extend ?? Bilibili_App_Dynamic_V2_Extend()}
    set {_extend = newValue}
  }
  /// Returns true if `extend` has been explicitly set.
  var hasExtend: Bool {return self._extend != nil}
  /// Clears the value of `extend`. Subsequent reads from it will return its default value.
  mutating func clearExtend() {self._extend = nil}

  /// 该卡片下面是否含有折叠卡
  var hasFold_p: Int32 = 0

  /// 透传到客户端的埋点字段。
  var serverInfo: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _extend: Bilibili_App_Dynamic_V2_Extend? = nil
}

/// Module 动态模块
struct Bilibili_App_Dynamic_V2_Module {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 类型
  var moduleType: Bilibili_App_Dynamic_V2_DynModuleType = .moduleNone

  var moduleItem: Bilibili_App_Dynamic_V2_Module.OneOf_ModuleItem? = nil

  /// 用户模块 1
  var moduleAuthor: Bilibili_App_Dynamic_V2_ModuleAuthor {
    get {
      if case .moduleAuthor(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleAuthor()
    }
    set {moduleItem = .moduleAuthor(newValue)}
  }

  /// 争议黄条模块 2
  var moduleDispute: Bilibili_App_Dynamic_V2_ModuleDispute {
    get {
      if case .moduleDispute(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleDispute()
    }
    set {moduleItem = .moduleDispute(newValue)}
  }

  /// 动态正文模块 3
  var moduleDesc: Bilibili_App_Dynamic_V2_ModuleDesc {
    get {
      if case .moduleDesc(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleDesc()
    }
    set {moduleItem = .moduleDesc(newValue)}
  }

  /// 动态卡模块 4
  var moduleDynamic: Bilibili_App_Dynamic_V2_ModuleDynamic {
    get {
      if case .moduleDynamic(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleDynamic()
    }
    set {moduleItem = .moduleDynamic(newValue)}
  }

  /// 点赞外露(废弃)
  var moduleLikeUser: Bilibili_App_Dynamic_V2_ModuleLikeUser {
    get {
      if case .moduleLikeUser(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleLikeUser()
    }
    set {moduleItem = .moduleLikeUser(newValue)}
  }

  /// 小卡模块 6
  var moduleExtend: Bilibili_App_Dynamic_V2_ModuleExtend {
    get {
      if case .moduleExtend(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleExtend()
    }
    set {moduleItem = .moduleExtend(newValue)}
  }

  /// 大卡模块 5
  var moduleAdditional: Bilibili_App_Dynamic_V2_ModuleAdditional {
    get {
      if case .moduleAdditional(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleAdditional()
    }
    set {moduleItem = .moduleAdditional(newValue)}
  }

  /// 计数模块 8
  var moduleStat: Bilibili_App_Dynamic_V2_ModuleStat {
    get {
      if case .moduleStat(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleStat()
    }
    set {moduleItem = .moduleStat(newValue)}
  }

  /// 折叠模块 9
  var moduleFold: Bilibili_App_Dynamic_V2_ModuleFold {
    get {
      if case .moduleFold(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleFold()
    }
    set {moduleItem = .moduleFold(newValue)}
  }

  /// 评论外露(废弃)
  var moduleComment: Bilibili_App_Dynamic_V2_ModuleComment {
    get {
      if case .moduleComment(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleComment()
    }
    set {moduleItem = .moduleComment(newValue)}
  }

  /// 外露交互模块(点赞、评论) 7
  var moduleInteraction: Bilibili_App_Dynamic_V2_ModuleInteraction {
    get {
      if case .moduleInteraction(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleInteraction()
    }
    set {moduleItem = .moduleInteraction(newValue)}
  }

  /// 转发卡-原卡用户模块
  var moduleAuthorForward: Bilibili_App_Dynamic_V2_ModuleAuthorForward {
    get {
      if case .moduleAuthorForward(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleAuthorForward()
    }
    set {moduleItem = .moduleAuthorForward(newValue)}
  }

  /// 广告卡
  var moduleAd: Bilibili_App_Dynamic_V2_ModuleAd {
    get {
      if case .moduleAd(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleAd()
    }
    set {moduleItem = .moduleAd(newValue)}
  }

  /// 通栏
  var moduleBanner: Bilibili_App_Dynamic_V2_ModuleBanner {
    get {
      if case .moduleBanner(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleBanner()
    }
    set {moduleItem = .moduleBanner(newValue)}
  }

  /// 获取物料失败
  var moduleItemNull: Bilibili_App_Dynamic_V2_ModuleItemNull {
    get {
      if case .moduleItemNull(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleItemNull()
    }
    set {moduleItem = .moduleItemNull(newValue)}
  }

  /// 分享组件
  var moduleShareInfo: Bilibili_App_Dynamic_V2_ModuleShareInfo {
    get {
      if case .moduleShareInfo(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleShareInfo()
    }
    set {moduleItem = .moduleShareInfo(newValue)}
  }

  /// 相关推荐模块
  var moduleRecommend: Bilibili_App_Dynamic_V2_ModuleRecommend {
    get {
      if case .moduleRecommend(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleRecommend()
    }
    set {moduleItem = .moduleRecommend(newValue)}
  }

  /// 顶部模块
  var moduleTop: Bilibili_App_Dynamic_V2_ModuleTop {
    get {
      if case .moduleTop(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleTop()
    }
    set {moduleItem = .moduleTop(newValue)}
  }

  /// 底部模块
  var moduleButtom: Bilibili_App_Dynamic_V2_ModuleButtom {
    get {
      if case .moduleButtom(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleButtom()
    }
    set {moduleItem = .moduleButtom(newValue)}
  }

  /// 转发卡计数模块
  var moduleStatForward: Bilibili_App_Dynamic_V2_ModuleStat {
    get {
      if case .moduleStatForward(let v)? = moduleItem {return v}
      return Bilibili_App_Dynamic_V2_ModuleStat()
    }
    set {moduleItem = .moduleStatForward(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ModuleItem: Equatable {
    /// 用户模块 1
    case moduleAuthor(Bilibili_App_Dynamic_V2_ModuleAuthor)
    /// 争议黄条模块 2
    case moduleDispute(Bilibili_App_Dynamic_V2_ModuleDispute)
    /// 动态正文模块 3
    case moduleDesc(Bilibili_App_Dynamic_V2_ModuleDesc)
    /// 动态卡模块 4
    case moduleDynamic(Bilibili_App_Dynamic_V2_ModuleDynamic)
    /// 点赞外露(废弃)
    case moduleLikeUser(Bilibili_App_Dynamic_V2_ModuleLikeUser)
    /// 小卡模块 6
    case moduleExtend(Bilibili_App_Dynamic_V2_ModuleExtend)
    /// 大卡模块 5
    case moduleAdditional(Bilibili_App_Dynamic_V2_ModuleAdditional)
    /// 计数模块 8
    case moduleStat(Bilibili_App_Dynamic_V2_ModuleStat)
    /// 折叠模块 9
    case moduleFold(Bilibili_App_Dynamic_V2_ModuleFold)
    /// 评论外露(废弃)
    case moduleComment(Bilibili_App_Dynamic_V2_ModuleComment)
    /// 外露交互模块(点赞、评论) 7
    case moduleInteraction(Bilibili_App_Dynamic_V2_ModuleInteraction)
    /// 转发卡-原卡用户模块
    case moduleAuthorForward(Bilibili_App_Dynamic_V2_ModuleAuthorForward)
    /// 广告卡
    case moduleAd(Bilibili_App_Dynamic_V2_ModuleAd)
    /// 通栏
    case moduleBanner(Bilibili_App_Dynamic_V2_ModuleBanner)
    /// 获取物料失败
    case moduleItemNull(Bilibili_App_Dynamic_V2_ModuleItemNull)
    /// 分享组件
    case moduleShareInfo(Bilibili_App_Dynamic_V2_ModuleShareInfo)
    /// 相关推荐模块
    case moduleRecommend(Bilibili_App_Dynamic_V2_ModuleRecommend)
    /// 顶部模块
    case moduleTop(Bilibili_App_Dynamic_V2_ModuleTop)
    /// 底部模块
    case moduleButtom(Bilibili_App_Dynamic_V2_ModuleButtom)
    /// 转发卡计数模块
    case moduleStatForward(Bilibili_App_Dynamic_V2_ModuleStat)

  #if !swift(>=4.1)
    static func ==(lhs: Bilibili_App_Dynamic_V2_Module.OneOf_ModuleItem, rhs: Bilibili_App_Dynamic_V2_Module.OneOf_ModuleItem) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.moduleAuthor, .moduleAuthor): return {
        guard case .moduleAuthor(let l) = lhs, case .moduleAuthor(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleDispute, .moduleDispute): return {
        guard case .moduleDispute(let l) = lhs, case .moduleDispute(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleDesc, .moduleDesc): return {
        guard case .moduleDesc(let l) = lhs, case .moduleDesc(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleDynamic, .moduleDynamic): return {
        guard case .moduleDynamic(let l) = lhs, case .moduleDynamic(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleLikeUser, .moduleLikeUser): return {
        guard case .moduleLikeUser(let l) = lhs, case .moduleLikeUser(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleExtend, .moduleExtend): return {
        guard case .moduleExtend(let l) = lhs, case .moduleExtend(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleAdditional, .moduleAdditional): return {
        guard case .moduleAdditional(let l) = lhs, case .moduleAdditional(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleStat, .moduleStat): return {
        guard case .moduleStat(let l) = lhs, case .moduleStat(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleFold, .moduleFold): return {
        guard case .moduleFold(let l) = lhs, case .moduleFold(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleComment, .moduleComment): return {
        guard case .moduleComment(let l) = lhs, case .moduleComment(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleInteraction, .moduleInteraction): return {
        guard case .moduleInteraction(let l) = lhs, case .moduleInteraction(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleAuthorForward, .moduleAuthorForward): return {
        guard case .moduleAuthorForward(let l) = lhs, case .moduleAuthorForward(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleAd, .moduleAd): return {
        guard case .moduleAd(let l) = lhs, case .moduleAd(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleBanner, .moduleBanner): return {
        guard case .moduleBanner(let l) = lhs, case .moduleBanner(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleItemNull, .moduleItemNull): return {
        guard case .moduleItemNull(let l) = lhs, case .moduleItemNull(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleShareInfo, .moduleShareInfo): return {
        guard case .moduleShareInfo(let l) = lhs, case .moduleShareInfo(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleRecommend, .moduleRecommend): return {
        guard case .moduleRecommend(let l) = lhs, case .moduleRecommend(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleTop, .moduleTop): return {
        guard case .moduleTop(let l) = lhs, case .moduleTop(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleButtom, .moduleButtom): return {
        guard case .moduleButtom(let l) = lhs, case .moduleButtom(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moduleStatForward, .moduleStatForward): return {
        guard case .moduleStatForward(let l) = lhs, case .moduleStatForward(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// 动态-发布人模块
struct Bilibili_App_Dynamic_V2_ModuleAuthor {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户mid
  var mid: Int64 {
    get {return _storage._mid}
    set {_uniqueStorage()._mid = newValue}
  }

  /// 时间标签
  var ptimeLabelText: String {
    get {return _storage._ptimeLabelText}
    set {_uniqueStorage()._ptimeLabelText = newValue}
  }

  /// 用户详情
  var author: Bilibili_App_Dynamic_V2_UserInfo {
    get {return _storage._author ?? Bilibili_App_Dynamic_V2_UserInfo()}
    set {_uniqueStorage()._author = newValue}
  }
  /// Returns true if `author` has been explicitly set.
  var hasAuthor: Bool {return _storage._author != nil}
  /// Clears the value of `author`. Subsequent reads from it will return its default value.
  mutating func clearAuthor() {_uniqueStorage()._author = nil}

  /// 装扮卡片
  var decorateCard: Bilibili_App_Dynamic_V2_DecorateCard {
    get {return _storage._decorateCard ?? Bilibili_App_Dynamic_V2_DecorateCard()}
    set {_uniqueStorage()._decorateCard = newValue}
  }
  /// Returns true if `decorateCard` has been explicitly set.
  var hasDecorateCard: Bool {return _storage._decorateCard != nil}
  /// Clears the value of `decorateCard`. Subsequent reads from it will return its default value.
  mutating func clearDecorateCard() {_uniqueStorage()._decorateCard = nil}

  /// 点击跳转链接
  var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  /// 右侧操作区域 - 三点样式
  var tpList: [Bilibili_App_Dynamic_V2_ThreePointItem] {
    get {return _storage._tpList}
    set {_uniqueStorage()._tpList = newValue}
  }

  /// 右侧操作区域样式枚举
  var badgeType: Bilibili_App_Dynamic_V2_ModuleAuthorBadgeType {
    get {return _storage._badgeType}
    set {_uniqueStorage()._badgeType = newValue}
  }

  /// 右侧操作区域 - 按钮样式
  var badgeButton: Bilibili_App_Dynamic_V2_ModuleAuthorBadgeButton {
    get {return _storage._badgeButton ?? Bilibili_App_Dynamic_V2_ModuleAuthorBadgeButton()}
    set {_uniqueStorage()._badgeButton = newValue}
  }
  /// Returns true if `badgeButton` has been explicitly set.
  var hasBadgeButton: Bool {return _storage._badgeButton != nil}
  /// Clears the value of `badgeButton`. Subsequent reads from it will return its default value.
  mutating func clearBadgeButton() {_uniqueStorage()._badgeButton = nil}

  /// 是否关注
  /// 1:关注 0:不关注 默认0，注：点赞列表使用，其他场景不使用该字段
  var attend: Int32 {
    get {return _storage._attend}
    set {_uniqueStorage()._attend = newValue}
  }

  /// 关注状态
  var relation: Bilibili_App_Dynamic_V2_Relation {
    get {return _storage._relation ?? Bilibili_App_Dynamic_V2_Relation()}
    set {_uniqueStorage()._relation = newValue}
  }
  /// Returns true if `relation` has been explicitly set.
  var hasRelation: Bool {return _storage._relation != nil}
  /// Clears the value of `relation`. Subsequent reads from it will return its default value.
  mutating func clearRelation() {_uniqueStorage()._relation = nil}

  /// 右侧操作区域 - 提权样式
  var weight: Bilibili_App_Dynamic_V2_Weight {
    get {return _storage._weight ?? Bilibili_App_Dynamic_V2_Weight()}
    set {_uniqueStorage()._weight = newValue}
  }
  /// Returns true if `weight` has been explicitly set.
  var hasWeight: Bool {return _storage._weight != nil}
  /// Clears the value of `weight`. Subsequent reads from it will return its default value.
  mutating func clearWeight() {_uniqueStorage()._weight = nil}

  /// 是否展示关注
  var showFollow: Bool {
    get {return _storage._showFollow}
    set {_uniqueStorage()._showFollow = newValue}
  }

  /// 是否置顶
  var isTop: Bool {
    get {return _storage._isTop}
    set {_uniqueStorage()._isTop = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 用户信息
struct Bilibili_App_Dynamic_V2_UserInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户mid
  var mid: Int64 {
    get {return _storage._mid}
    set {_uniqueStorage()._mid = newValue}
  }

  /// 用户昵称
  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// 用户头像
  var face: String {
    get {return _storage._face}
    set {_uniqueStorage()._face = newValue}
  }

  /// 认证信息
  var official: Bilibili_App_Dynamic_V2_OfficialVerify {
    get {return _storage._official ?? Bilibili_App_Dynamic_V2_OfficialVerify()}
    set {_uniqueStorage()._official = newValue}
  }
  /// Returns true if `official` has been explicitly set.
  var hasOfficial: Bool {return _storage._official != nil}
  /// Clears the value of `official`. Subsequent reads from it will return its default value.
  mutating func clearOfficial() {_uniqueStorage()._official = nil}

  /// 大会员信息
  var vip: Bilibili_App_Dynamic_V2_VipInfo {
    get {return _storage._vip ?? Bilibili_App_Dynamic_V2_VipInfo()}
    set {_uniqueStorage()._vip = newValue}
  }
  /// Returns true if `vip` has been explicitly set.
  var hasVip: Bool {return _storage._vip != nil}
  /// Clears the value of `vip`. Subsequent reads from it will return its default value.
  mutating func clearVip() {_uniqueStorage()._vip = nil}

  /// 直播信息
  var live: Bilibili_App_Dynamic_V2_LiveInfo {
    get {return _storage._live ?? Bilibili_App_Dynamic_V2_LiveInfo()}
    set {_uniqueStorage()._live = newValue}
  }
  /// Returns true if `live` has been explicitly set.
  var hasLive: Bool {return _storage._live != nil}
  /// Clears the value of `live`. Subsequent reads from it will return its default value.
  mutating func clearLive() {_uniqueStorage()._live = nil}

  /// 空间页跳转链接
  var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  /// 挂件信息
  var pendant: Bilibili_App_Dynamic_V2_UserPendant {
    get {return _storage._pendant ?? Bilibili_App_Dynamic_V2_UserPendant()}
    set {_uniqueStorage()._pendant = newValue}
  }
  /// Returns true if `pendant` has been explicitly set.
  var hasPendant: Bool {return _storage._pendant != nil}
  /// Clears the value of `pendant`. Subsequent reads from it will return its default value.
  mutating func clearPendant() {_uniqueStorage()._pendant = nil}

  /// 认证名牌
  var nameplate: Bilibili_App_Dynamic_V2_Nameplate {
    get {return _storage._nameplate ?? Bilibili_App_Dynamic_V2_Nameplate()}
    set {_uniqueStorage()._nameplate = newValue}
  }
  /// Returns true if `nameplate` has been explicitly set.
  var hasNameplate: Bool {return _storage._nameplate != nil}
  /// Clears the value of `nameplate`. Subsequent reads from it will return its default value.
  mutating func clearNameplate() {_uniqueStorage()._nameplate = nil}

  /// 用户等级
  var level: Int32 {
    get {return _storage._level}
    set {_uniqueStorage()._level = newValue}
  }

  /// 用户简介
  var sign: String {
    get {return _storage._sign}
    set {_uniqueStorage()._sign = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 认证信息
struct Bilibili_App_Dynamic_V2_OfficialVerify {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 127:未认证 0:个人 1:机构
  var type: Int32 = 0

  /// 认证描述
  var desc: String = String()

  /// 是否关注
  var isAtten: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 大会员信息
struct Bilibili_App_Dynamic_V2_VipInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 大会员类型
  var type: Int32 = 0

  /// 大会员状态
  var status: Int32 = 0

  /// 到期时间
  var dueDate: Int64 = 0

  /// 标签
  var label: Bilibili_App_Dynamic_V2_VipLabel {
    get {return _label ?? Bilibili_App_Dynamic_V2_VipLabel()}
    set {_label = newValue}
  }
  /// Returns true if `label` has been explicitly set.
  var hasLabel: Bool {return self._label != nil}
  /// Clears the value of `label`. Subsequent reads from it will return its default value.
  mutating func clearLabel() {self._label = nil}

  /// 主题
  var themeType: Int32 = 0

  /// 大会员角标
  /// 0:无角标 1:粉色大会员角标 2:绿色小会员角标
  var avatarSubscript: Int32 = 0

  /// 昵称色值，可能为空，色值示例：#FFFB9E60
  var nicknameColor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _label: Bilibili_App_Dynamic_V2_VipLabel? = nil
}

/// 大会员标签
struct Bilibili_App_Dynamic_V2_VipLabel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 图片地址
  var path: String = String()

  /// 文本值
  var text: String = String()

  /// 对应颜色类型
  var labelTheme: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 直播信息
struct Bilibili_App_Dynamic_V2_LiveInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 是否在直播
  /// 0:未直播 1:正在直播 (废弃)
  var isLiving: Int32 = 0

  /// 跳转链接
  var uri: String = String()

  /// 直播状态
  var liveState: Bilibili_App_Dynamic_V2_LiveState = .liveNone

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 头像挂件信息
struct Bilibili_App_Dynamic_V2_UserPendant {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pid
  var pid: Int64 = 0

  /// 名称
  var name: String = String()

  /// 图片链接
  var image: String = String()

  /// 有效期
  var expire: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 认证名牌
struct Bilibili_App_Dynamic_V2_Nameplate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// nid
  var nid: Int64 = 0

  /// 名称
  var name: String = String()

  /// 图片地址
  var image: String = String()

  /// 小图地址
  var imageSmall: String = String()

  /// 等级
  var level: String = String()

  /// 获取条件
  var condition: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 装扮卡片
struct Bilibili_App_Dynamic_V2_DecorateCard {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 装扮卡片id
  var id: Int64 = 0

  /// 装扮卡片链接
  var cardURL: String = String()

  /// 装扮卡片点击跳转链接
  var jumpURL: String = String()

  /// 粉丝样式
  var fan: Bilibili_App_Dynamic_V2_DecoCardFan {
    get {return _fan ?? Bilibili_App_Dynamic_V2_DecoCardFan()}
    set {_fan = newValue}
  }
  /// Returns true if `fan` has been explicitly set.
  var hasFan: Bool {return self._fan != nil}
  /// Clears the value of `fan`. Subsequent reads from it will return its default value.
  mutating func clearFan() {self._fan = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _fan: Bilibili_App_Dynamic_V2_DecoCardFan? = nil
}

/// 装扮卡片-粉丝勋章信息
struct Bilibili_App_Dynamic_V2_DecoCardFan {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 是否是粉丝
  var isFan: Int32 = 0

  /// 数量
  var number: Int32 = 0

  /// 数量 str
  var numberStr: String = String()

  /// 颜色
  var color: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-争议小黄条模块
struct Bilibili_App_Dynamic_V2_ModuleDispute {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标题
  var title: String = String()

  /// 描述内容
  var desc: String = String()

  /// 跳转链接
  var uri: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-描述文字模块
struct Bilibili_App_Dynamic_V2_ModuleDesc {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 描述信息(已按高亮拆分)
  var desc: [Bilibili_App_Dynamic_V2_Description] = []

  /// 点击跳转链接
  var jumpUri: String = String()

  /// 文本原本
  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Description 文本描述
struct Bilibili_App_Dynamic_V2_Description {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 文本内容
  var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  /// 文本类型
  var type: Bilibili_App_Dynamic_V2_DescType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// 点击跳转链接
  var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  /// emoji类型
  var emojiType: Bilibili_App_Dynamic_V2_EmojiType {
    get {return _storage._emojiType}
    set {_uniqueStorage()._emojiType = newValue}
  }

  /// 商品类型
  var goodsType: String {
    get {return _storage._goodsType}
    set {_uniqueStorage()._goodsType = newValue}
  }

  /// 前置Icon
  var iconURL: String {
    get {return _storage._iconURL}
    set {_uniqueStorage()._iconURL = newValue}
  }

  /// icon_name
  var iconName: String {
    get {return _storage._iconName}
    set {_uniqueStorage()._iconName = newValue}
  }

  /// 资源ID
  var rid: String {
    get {return _storage._rid}
    set {_uniqueStorage()._rid = newValue}
  }

  /// 商品卡特殊字段
  var goods: Bilibili_App_Dynamic_V2_ModuleDescGoods {
    get {return _storage._goods ?? Bilibili_App_Dynamic_V2_ModuleDescGoods()}
    set {_uniqueStorage()._goods = newValue}
  }
  /// Returns true if `goods` has been explicitly set.
  var hasGoods: Bool {return _storage._goods != nil}
  /// Clears the value of `goods`. Subsequent reads from it will return its default value.
  mutating func clearGoods() {_uniqueStorage()._goods = nil}

  /// 文本原始文案
  var origText: String {
    get {return _storage._origText}
    set {_uniqueStorage()._origText = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 正文商品卡参数
struct Bilibili_App_Dynamic_V2_ModuleDescGoods {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 商品类型
  /// 1:淘宝 2:会员购
  var sourceType: Int32 = 0

  /// 跳转链接
  var jumpURL: String = String()

  /// schema_url
  var schemaURL: String = String()

  /// item_id
  var itemID: Int64 = 0

  /// open_white_list
  var openWhiteList: [String] = []

  /// use_web_v2
  var userWebV2: Bool = false

  /// ad mark
  var adMark: String = String()

  /// schemaPackageName(Android用)
  var schemaPackageName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-详情模块
struct Bilibili_App_Dynamic_V2_ModuleDynamic {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 类型
  var type: Bilibili_App_Dynamic_V2_ModuleDynamicType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var moduleItem: OneOf_ModuleItem? {
    get {return _storage._moduleItem}
    set {_uniqueStorage()._moduleItem = newValue}
  }

  ///稿件
  var dynArchive: Bilibili_App_Dynamic_V2_MdlDynArchive {
    get {
      if case .dynArchive(let v)? = _storage._moduleItem {return v}
      return Bilibili_App_Dynamic_V2_MdlDynArchive()
    }
    set {_uniqueStorage()._moduleItem = .dynArchive(newValue)}
  }

  ///pgc
  var dynPgc: Bilibili_App_Dynamic_V2_MdlDynPGC {
    get {
      if case .dynPgc(let v)? = _storage._moduleItem {return v}
      return Bilibili_App_Dynamic_V2_MdlDynPGC()
    }
    set {_uniqueStorage()._moduleItem = .dynPgc(newValue)}
  }

  ///付费课程-系列
  var dynCourSeason: Bilibili_App_Dynamic_V2_MdlDynCourSeason {
    get {
      if case .dynCourSeason(let v)? = _storage._moduleItem {return v}
      return Bilibili_App_Dynamic_V2_MdlDynCourSeason()
    }
    set {_uniqueStorage()._moduleItem = .dynCourSeason(newValue)}
  }

  ///付费课程-批次
  var dynCourBatch: Bilibili_App_Dynamic_V2_MdlDynCourBatch {
    get {
      if case .dynCourBatch(let v)? = _storage._moduleItem {return v}
      return Bilibili_App_Dynamic_V2_MdlDynCourBatch()
    }
    set {_uniqueStorage()._moduleItem = .dynCourBatch(newValue)}
  }

  ///转发卡
  var dynForward: Bilibili_App_Dynamic_V2_MdlDynForward {
    get {
      if case .dynForward(let v)? = _storage._moduleItem {return v}
      return Bilibili_App_Dynamic_V2_MdlDynForward()
    }
    set {_uniqueStorage()._moduleItem = .dynForward(newValue)}
  }

  ///图文
  var dynDraw: Bilibili_App_Dynamic_V2_MdlDynDraw {
    get {
      if case .dynDraw(let v)? = _storage._moduleItem {return v}
      return Bilibili_App_Dynamic_V2_MdlDynDraw()
    }
    set {_uniqueStorage()._moduleItem = .dynDraw(newValue)}
  }

  ///专栏
  var dynArticle: Bilibili_App_Dynamic_V2_MdlDynArticle {
    get {
      if case .dynArticle(let v)? = _storage._moduleItem {return v}
      return Bilibili_App_Dynamic_V2_MdlDynArticle()
    }
    set {_uniqueStorage()._moduleItem = .dynArticle(newValue)}
  }

  ///音频
  var dynMusic: Bilibili_App_Dynamic_V2_MdlDynMusic {
    get {
      if case .dynMusic(let v)? = _storage._moduleItem {return v}
      return Bilibili_App_Dynamic_V2_MdlDynMusic()
    }
    set {_uniqueStorage()._moduleItem = .dynMusic(newValue)}
  }

  ///通用卡方
  var dynCommon: Bilibili_App_Dynamic_V2_MdlDynCommon {
    get {
      if case .dynCommon(let v)? = _storage._moduleItem {return v}
      return Bilibili_App_Dynamic_V2_MdlDynCommon()
    }
    set {_uniqueStorage()._moduleItem = .dynCommon(newValue)}
  }

  ///直播卡
  var dynCommonLive: Bilibili_App_Dynamic_V2_MdlDynLive {
    get {
      if case .dynCommonLive(let v)? = _storage._moduleItem {return v}
      return Bilibili_App_Dynamic_V2_MdlDynLive()
    }
    set {_uniqueStorage()._moduleItem = .dynCommonLive(newValue)}
  }

  ///播单
  var dynMedialist: Bilibili_App_Dynamic_V2_MdlDynMedialist {
    get {
      if case .dynMedialist(let v)? = _storage._moduleItem {return v}
      return Bilibili_App_Dynamic_V2_MdlDynMedialist()
    }
    set {_uniqueStorage()._moduleItem = .dynMedialist(newValue)}
  }

  ///小程序卡
  var dynApplet: Bilibili_App_Dynamic_V2_MdlDynApplet {
    get {
      if case .dynApplet(let v)? = _storage._moduleItem {return v}
      return Bilibili_App_Dynamic_V2_MdlDynApplet()
    }
    set {_uniqueStorage()._moduleItem = .dynApplet(newValue)}
  }

  ///订阅卡
  var dynSubscription: Bilibili_App_Dynamic_V2_MdlDynSubscription {
    get {
      if case .dynSubscription(let v)? = _storage._moduleItem {return v}
      return Bilibili_App_Dynamic_V2_MdlDynSubscription()
    }
    set {_uniqueStorage()._moduleItem = .dynSubscription(newValue)}
  }

  ///直播推荐卡
  var dynLiveRcmd: Bilibili_App_Dynamic_V2_MdlDynLiveRcmd {
    get {
      if case .dynLiveRcmd(let v)? = _storage._moduleItem {return v}
      return Bilibili_App_Dynamic_V2_MdlDynLiveRcmd()
    }
    set {_uniqueStorage()._moduleItem = .dynLiveRcmd(newValue)}
  }

  ///UGC合集
  var dynUgcSeason: Bilibili_App_Dynamic_V2_MdlDynUGCSeason {
    get {
      if case .dynUgcSeason(let v)? = _storage._moduleItem {return v}
      return Bilibili_App_Dynamic_V2_MdlDynUGCSeason()
    }
    set {_uniqueStorage()._moduleItem = .dynUgcSeason(newValue)}
  }

  ///订阅卡
  var dynSubscriptionNew: Bilibili_App_Dynamic_V2_MdlDynSubscriptionNew {
    get {
      if case .dynSubscriptionNew(let v)? = _storage._moduleItem {return v}
      return Bilibili_App_Dynamic_V2_MdlDynSubscriptionNew()
    }
    set {_uniqueStorage()._moduleItem = .dynSubscriptionNew(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ModuleItem: Equatable {
    ///稿件
    case dynArchive(Bilibili_App_Dynamic_V2_MdlDynArchive)
    ///pgc
    case dynPgc(Bilibili_App_Dynamic_V2_MdlDynPGC)
    ///付费课程-系列
    case dynCourSeason(Bilibili_App_Dynamic_V2_MdlDynCourSeason)
    ///付费课程-批次
    case dynCourBatch(Bilibili_App_Dynamic_V2_MdlDynCourBatch)
    ///转发卡
    case dynForward(Bilibili_App_Dynamic_V2_MdlDynForward)
    ///图文
    case dynDraw(Bilibili_App_Dynamic_V2_MdlDynDraw)
    ///专栏
    case dynArticle(Bilibili_App_Dynamic_V2_MdlDynArticle)
    ///音频
    case dynMusic(Bilibili_App_Dynamic_V2_MdlDynMusic)
    ///通用卡方
    case dynCommon(Bilibili_App_Dynamic_V2_MdlDynCommon)
    ///直播卡
    case dynCommonLive(Bilibili_App_Dynamic_V2_MdlDynLive)
    ///播单
    case dynMedialist(Bilibili_App_Dynamic_V2_MdlDynMedialist)
    ///小程序卡
    case dynApplet(Bilibili_App_Dynamic_V2_MdlDynApplet)
    ///订阅卡
    case dynSubscription(Bilibili_App_Dynamic_V2_MdlDynSubscription)
    ///直播推荐卡
    case dynLiveRcmd(Bilibili_App_Dynamic_V2_MdlDynLiveRcmd)
    ///UGC合集
    case dynUgcSeason(Bilibili_App_Dynamic_V2_MdlDynUGCSeason)
    ///订阅卡
    case dynSubscriptionNew(Bilibili_App_Dynamic_V2_MdlDynSubscriptionNew)

  #if !swift(>=4.1)
    static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleDynamic.OneOf_ModuleItem, rhs: Bilibili_App_Dynamic_V2_ModuleDynamic.OneOf_ModuleItem) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.dynArchive, .dynArchive): return {
        guard case .dynArchive(let l) = lhs, case .dynArchive(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dynPgc, .dynPgc): return {
        guard case .dynPgc(let l) = lhs, case .dynPgc(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dynCourSeason, .dynCourSeason): return {
        guard case .dynCourSeason(let l) = lhs, case .dynCourSeason(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dynCourBatch, .dynCourBatch): return {
        guard case .dynCourBatch(let l) = lhs, case .dynCourBatch(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dynForward, .dynForward): return {
        guard case .dynForward(let l) = lhs, case .dynForward(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dynDraw, .dynDraw): return {
        guard case .dynDraw(let l) = lhs, case .dynDraw(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dynArticle, .dynArticle): return {
        guard case .dynArticle(let l) = lhs, case .dynArticle(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dynMusic, .dynMusic): return {
        guard case .dynMusic(let l) = lhs, case .dynMusic(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dynCommon, .dynCommon): return {
        guard case .dynCommon(let l) = lhs, case .dynCommon(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dynCommonLive, .dynCommonLive): return {
        guard case .dynCommonLive(let l) = lhs, case .dynCommonLive(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dynMedialist, .dynMedialist): return {
        guard case .dynMedialist(let l) = lhs, case .dynMedialist(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dynApplet, .dynApplet): return {
        guard case .dynApplet(let l) = lhs, case .dynApplet(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dynSubscription, .dynSubscription): return {
        guard case .dynSubscription(let l) = lhs, case .dynSubscription(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dynLiveRcmd, .dynLiveRcmd): return {
        guard case .dynLiveRcmd(let l) = lhs, case .dynLiveRcmd(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dynUgcSeason, .dynUgcSeason): return {
        guard case .dynUgcSeason(let l) = lhs, case .dynUgcSeason(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dynSubscriptionNew, .dynSubscriptionNew): return {
        guard case .dynSubscriptionNew(let l) = lhs, case .dynSubscriptionNew(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 动态-详情模块-稿件
struct Bilibili_App_Dynamic_V2_MdlDynArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标题
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// 封面图
  var cover: String {
    get {return _storage._cover}
    set {_uniqueStorage()._cover = newValue}
  }

  /// 秒开地址
  var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  /// 视频封面展示项 1
  var coverLeftText1: String {
    get {return _storage._coverLeftText1}
    set {_uniqueStorage()._coverLeftText1 = newValue}
  }

  /// 视频封面展示项 2
  var coverLeftText2: String {
    get {return _storage._coverLeftText2}
    set {_uniqueStorage()._coverLeftText2 = newValue}
  }

  /// 封面视频展示项 3
  var coverLeftText3: String {
    get {return _storage._coverLeftText3}
    set {_uniqueStorage()._coverLeftText3 = newValue}
  }

  /// avid
  var avid: Int64 {
    get {return _storage._avid}
    set {_uniqueStorage()._avid = newValue}
  }

  /// cid
  var cid: Int64 {
    get {return _storage._cid}
    set {_uniqueStorage()._cid = newValue}
  }

  /// 视频源类型
  var mediaType: Bilibili_App_Dynamic_V2_MediaType {
    get {return _storage._mediaType}
    set {_uniqueStorage()._mediaType = newValue}
  }

  /// 尺寸信息
  var dimension: Bilibili_App_Dynamic_V2_Dimension {
    get {return _storage._dimension ?? Bilibili_App_Dynamic_V2_Dimension()}
    set {_uniqueStorage()._dimension = newValue}
  }
  /// Returns true if `dimension` has been explicitly set.
  var hasDimension: Bool {return _storage._dimension != nil}
  /// Clears the value of `dimension`. Subsequent reads from it will return its default value.
  mutating func clearDimension() {_uniqueStorage()._dimension = nil}

  /// 角标，多个角标之前有间距
  var badge: [Bilibili_App_Dynamic_V2_VideoBadge] {
    get {return _storage._badge}
    set {_uniqueStorage()._badge = newValue}
  }

  /// 是否能够自动播放
  var canPlay: Bool {
    get {return _storage._canPlay}
    set {_uniqueStorage()._canPlay = newValue}
  }

  /// stype
  var stype: Bilibili_App_Dynamic_V2_VideoType {
    get {return _storage._stype}
    set {_uniqueStorage()._stype = newValue}
  }

  /// 是否PGC
  var isPgc: Bool {
    get {return _storage._isPgc}
    set {_uniqueStorage()._isPgc = newValue}
  }

  /// inline播放地址
  var inlineURL: String {
    get {return _storage._inlineURL}
    set {_uniqueStorage()._inlineURL = newValue}
  }

  /// PGC的epid
  var episodeID: Int64 {
    get {return _storage._episodeID}
    set {_uniqueStorage()._episodeID = newValue}
  }

  /// 子类型
  var subType: Int32 {
    get {return _storage._subType}
    set {_uniqueStorage()._subType = newValue}
  }

  /// PGC的ssid
  var pgcSeasonID: Int64 {
    get {return _storage._pgcSeasonID}
    set {_uniqueStorage()._pgcSeasonID = newValue}
  }

  /// 播放按钮
  var playIcon: String {
    get {return _storage._playIcon}
    set {_uniqueStorage()._playIcon = newValue}
  }

  /// 时长
  var duration: Int64 {
    get {return _storage._duration}
    set {_uniqueStorage()._duration = newValue}
  }

  /// 跳转地址
  var jumpURL: String {
    get {return _storage._jumpURL}
    set {_uniqueStorage()._jumpURL = newValue}
  }

  /// 番剧是否为预览视频
  var isPreview: Bool {
    get {return _storage._isPreview}
    set {_uniqueStorage()._isPreview = newValue}
  }

  /// 新角标，多个角标之前没有间距
  var badgeCategory: [Bilibili_App_Dynamic_V2_VideoBadge] {
    get {return _storage._badgeCategory}
    set {_uniqueStorage()._badgeCategory = newValue}
  }

  /// 当前是否是pgc正片
  var isFeature: Bool {
    get {return _storage._isFeature}
    set {_uniqueStorage()._isFeature = newValue}
  }

  /// 是否是预约召回
  var reserveType: Bilibili_App_Dynamic_V2_ReserveType {
    get {return _storage._reserveType}
    set {_uniqueStorage()._reserveType = newValue}
  }

  /// bvid
  var bvid: String {
    get {return _storage._bvid}
    set {_uniqueStorage()._bvid = newValue}
  }

  /// 播放数
  var view: Int32 {
    get {return _storage._view}
    set {_uniqueStorage()._view = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Dimension 尺寸信息
struct Bilibili_App_Dynamic_V2_Dimension {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var height: Int64 = 0

  var width: Int64 = 0

  var rotate: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 角标信息
struct Bilibili_App_Dynamic_V2_VideoBadge {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 文案
  var text: String = String()

  /// 文案颜色-日间
  var textColor: String = String()

  /// 文案颜色-夜间
  var textColorNight: String = String()

  /// 背景颜色-日间
  var bgColor: String = String()

  /// 背景颜色-夜间
  var bgColorNight: String = String()

  /// 边框颜色-日间
  var borderColor: String = String()

  /// 边框颜色-夜间
  var borderColorNight: String = String()

  /// 样式
  var bgStyle: Int32 = 0

  /// 背景透明度-日间
  var bgAlpha: Int32 = 0

  /// 背景透明度-夜间
  var bgAlphaNight: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MdlDynPGC 动态-详情模块-pgc
struct Bilibili_App_Dynamic_V2_MdlDynPGC {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标题
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// 封面图
  var cover: String {
    get {return _storage._cover}
    set {_uniqueStorage()._cover = newValue}
  }

  /// 秒开地址
  var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  /// 视频封面展示项 1
  var coverLeftText1: String {
    get {return _storage._coverLeftText1}
    set {_uniqueStorage()._coverLeftText1 = newValue}
  }

  /// 视频封面展示项 2
  var coverLeftText2: String {
    get {return _storage._coverLeftText2}
    set {_uniqueStorage()._coverLeftText2 = newValue}
  }

  /// 封面视频展示项 3
  var coverLeftText3: String {
    get {return _storage._coverLeftText3}
    set {_uniqueStorage()._coverLeftText3 = newValue}
  }

  /// cid
  var cid: Int64 {
    get {return _storage._cid}
    set {_uniqueStorage()._cid = newValue}
  }

  /// season_id
  var seasonID: Int64 {
    get {return _storage._seasonID}
    set {_uniqueStorage()._seasonID = newValue}
  }

  /// epid
  var epid: Int64 {
    get {return _storage._epid}
    set {_uniqueStorage()._epid = newValue}
  }

  /// aid
  var aid: Int64 {
    get {return _storage._aid}
    set {_uniqueStorage()._aid = newValue}
  }

  /// 视频源类型
  var mediaType: Bilibili_App_Dynamic_V2_MediaType {
    get {return _storage._mediaType}
    set {_uniqueStorage()._mediaType = newValue}
  }

  /// 番剧类型
  var subType: Bilibili_App_Dynamic_V2_VideoSubType {
    get {return _storage._subType}
    set {_uniqueStorage()._subType = newValue}
  }

  /// 番剧是否为预览视频
  var isPreview: Bool {
    get {return _storage._isPreview}
    set {_uniqueStorage()._isPreview = newValue}
  }

  /// 尺寸信息
  var dimension: Bilibili_App_Dynamic_V2_Dimension {
    get {return _storage._dimension ?? Bilibili_App_Dynamic_V2_Dimension()}
    set {_uniqueStorage()._dimension = newValue}
  }
  /// Returns true if `dimension` has been explicitly set.
  var hasDimension: Bool {return _storage._dimension != nil}
  /// Clears the value of `dimension`. Subsequent reads from it will return its default value.
  mutating func clearDimension() {_uniqueStorage()._dimension = nil}

  /// 角标，多个角标之前有间距
  var badge: [Bilibili_App_Dynamic_V2_VideoBadge] {
    get {return _storage._badge}
    set {_uniqueStorage()._badge = newValue}
  }

  /// 是否能够自动播放
  var canPlay: Bool {
    get {return _storage._canPlay}
    set {_uniqueStorage()._canPlay = newValue}
  }

  /// season
  var season: Bilibili_App_Dynamic_V2_PGCSeason {
    get {return _storage._season ?? Bilibili_App_Dynamic_V2_PGCSeason()}
    set {_uniqueStorage()._season = newValue}
  }
  /// Returns true if `season` has been explicitly set.
  var hasSeason: Bool {return _storage._season != nil}
  /// Clears the value of `season`. Subsequent reads from it will return its default value.
  mutating func clearSeason() {_uniqueStorage()._season = nil}

  /// 播放按钮
  var playIcon: String {
    get {return _storage._playIcon}
    set {_uniqueStorage()._playIcon = newValue}
  }

  /// 时长
  var duration: Int64 {
    get {return _storage._duration}
    set {_uniqueStorage()._duration = newValue}
  }

  /// 跳转地址
  var jumpURL: String {
    get {return _storage._jumpURL}
    set {_uniqueStorage()._jumpURL = newValue}
  }

  /// 新角标，多个角标之前没有间距
  var badgeCategory: [Bilibili_App_Dynamic_V2_VideoBadge] {
    get {return _storage._badgeCategory}
    set {_uniqueStorage()._badgeCategory = newValue}
  }

  /// 当前是否是pgc正片
  var isFeature: Bool {
    get {return _storage._isFeature}
    set {_uniqueStorage()._isFeature = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// PGC单季信息
struct Bilibili_App_Dynamic_V2_PGCSeason {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 是否完结
  var isFinish: Int32 = 0

  /// 标题
  var title: String = String()

  /// 类型
  var type: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-详情模块-付费课程系列
struct Bilibili_App_Dynamic_V2_MdlDynCourSeason {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标题
  var title: String = String()

  /// 封面图
  var cover: String = String()

  /// 跳转地址
  var uri: String = String()

  /// 展示项 1(更新信息)
  var text1: String = String()

  /// 描述信息
  var desc: String = String()

  /// 角标
  var badge: Bilibili_App_Dynamic_V2_VideoBadge {
    get {return _badge ?? Bilibili_App_Dynamic_V2_VideoBadge()}
    set {_badge = newValue}
  }
  /// Returns true if `badge` has been explicitly set.
  var hasBadge: Bool {return self._badge != nil}
  /// Clears the value of `badge`. Subsequent reads from it will return its default value.
  mutating func clearBadge() {self._badge = nil}

  /// 播放按钮
  var playIcon: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _badge: Bilibili_App_Dynamic_V2_VideoBadge? = nil
}

/// 动态-详情模块-付费课程批次
struct Bilibili_App_Dynamic_V2_MdlDynCourBatch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标题
  var title: String = String()

  /// 封面图
  var cover: String = String()

  /// 跳转地址
  var uri: String = String()

  /// 展示项 1(本集标题)
  var text1: String = String()

  /// 展示项 2(更新了多少个视频)
  var text2: String = String()

  /// 角标
  var badge: Bilibili_App_Dynamic_V2_VideoBadge {
    get {return _badge ?? Bilibili_App_Dynamic_V2_VideoBadge()}
    set {_badge = newValue}
  }
  /// Returns true if `badge` has been explicitly set.
  var hasBadge: Bool {return self._badge != nil}
  /// Clears the value of `badge`. Subsequent reads from it will return its default value.
  mutating func clearBadge() {self._badge = nil}

  /// 播放按钮
  var playIcon: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _badge: Bilibili_App_Dynamic_V2_VideoBadge? = nil
}

/// 动态列表渲染部分-详情模块-转发模块
struct Bilibili_App_Dynamic_V2_MdlDynForward {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 动态转发核心模块 套娃
  var item: Bilibili_App_Dynamic_V2_DynamicItem {
    get {return _item ?? Bilibili_App_Dynamic_V2_DynamicItem()}
    set {_item = newValue}
  }
  /// Returns true if `item` has been explicitly set.
  var hasItem: Bool {return self._item != nil}
  /// Clears the value of `item`. Subsequent reads from it will return its default value.
  mutating func clearItem() {self._item = nil}

  /// 透传类型
  /// 0:分享 1:转发
  var rtype: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _item: Bilibili_App_Dynamic_V2_DynamicItem? = nil
}

/// 动态列表渲染部分-详情模块-图文模块
struct Bilibili_App_Dynamic_V2_MdlDynDraw {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 图片
  var items: [Bilibili_App_Dynamic_V2_MdlDynDrawItem] = []

  /// 跳转地址
  var uri: String = String()

  /// 图文ID
  var id: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MdlDynDrawItem 动态列表渲染部分-详情模块-图文
struct Bilibili_App_Dynamic_V2_MdlDynDrawItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 图片链接
  var src: String = String()

  /// 图片宽度
  var width: Int64 = 0

  /// 图片高度
  var height: Int64 = 0

  /// 图片大小
  var size: Float = 0

  /// 图片标签
  var tags: [Bilibili_App_Dynamic_V2_MdlDynDrawTag] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态列表渲染部分-详情模块-图文-标签
struct Bilibili_App_Dynamic_V2_MdlDynDrawTag {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标签类型
  var type: Bilibili_App_Dynamic_V2_MdlDynDrawTagType = .mdlDrawTagNone

  /// 标签详情
  var item: Bilibili_App_Dynamic_V2_MdlDynDrawTagItem {
    get {return _item ?? Bilibili_App_Dynamic_V2_MdlDynDrawTagItem()}
    set {_item = newValue}
  }
  /// Returns true if `item` has been explicitly set.
  var hasItem: Bool {return self._item != nil}
  /// Clears the value of `item`. Subsequent reads from it will return its default value.
  mutating func clearItem() {self._item = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _item: Bilibili_App_Dynamic_V2_MdlDynDrawTagItem? = nil
}

/// 动态列表部分-详情模块-图文-标签详情
struct Bilibili_App_Dynamic_V2_MdlDynDrawTagItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 跳转链接
  var url: String = String()

  /// 标签内容
  var text: String = String()

  /// 坐标-x
  var x: Int64 = 0

  /// 坐标-y
  var y: Int64 = 0

  /// 方向
  var orientation: Int32 = 0

  /// 来源
  /// 0:未知 1:淘宝 2:自营
  var source: Int32 = 0

  /// 商品id
  var itemID: Int64 = 0

  /// 用户mid
  var mid: Int64 = 0

  /// 话题id
  var tid: Int64 = 0

  /// lbs信息
  var poi: String = String()

  /// 商品标签链接
  var schemaURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态列表渲染部分-详情模块-专栏模块
struct Bilibili_App_Dynamic_V2_MdlDynArticle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 专栏id
  var id: Int64 = 0

  /// 跳转地址
  var uri: String = String()

  /// 标题
  var title: String = String()

  /// 文案部分
  var desc: String = String()

  /// 配图
  var covers: [String] = []

  /// 阅读量标签
  var label: String = String()

  /// 模板类型
  var templateID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态列表渲染部分-详情模块-音频模块
struct Bilibili_App_Dynamic_V2_MdlDynMusic {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 音频id
  var id: Int64 = 0

  /// 跳转地址
  var uri: String = String()

  /// upId
  var upID: Int64 = 0

  /// 歌名
  var title: String = String()

  /// 专辑封面
  var cover: String = String()

  /// 展示项1
  var label1: String = String()

  /// upper
  var upper: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态列表渲染部分-详情模块-通用
struct Bilibili_App_Dynamic_V2_MdlDynCommon {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 物料id
  var oid: Int64 = 0

  /// 跳转地址
  var uri: String = String()

  /// 标题
  var title: String = String()

  /// 描述 漫画卡标题下第一行
  var desc: String = String()

  /// 封面
  var cover: String = String()

  /// 标签1 漫画卡标题下第二行
  var label: String = String()

  /// 所属业务类型
  var bizType: Int32 = 0

  /// 镜像数据ID
  var sketchID: Int64 = 0

  /// 卡片样式
  var style: Bilibili_App_Dynamic_V2_MdlDynCommonType = .mdlDynCommonNone

  /// 角标
  var badge: [Bilibili_App_Dynamic_V2_VideoBadge] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态列表渲染部分-详情模块-直播
struct Bilibili_App_Dynamic_V2_MdlDynLive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 房间号
  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// 跳转地址
  var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  /// 直播间标题
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// 直播间封面
  var cover: String {
    get {return _storage._cover}
    set {_uniqueStorage()._cover = newValue}
  }

  /// 标题1 例: 陪伴学习
  var coverLabel: String {
    get {return _storage._coverLabel}
    set {_uniqueStorage()._coverLabel = newValue}
  }

  /// 标题2 例: 54.6万人气
  var coverLabel2: String {
    get {return _storage._coverLabel2}
    set {_uniqueStorage()._coverLabel2 = newValue}
  }

  /// 直播状态
  var liveState: Bilibili_App_Dynamic_V2_LiveState {
    get {return _storage._liveState}
    set {_uniqueStorage()._liveState = newValue}
  }

  /// 直播角标
  var badge: Bilibili_App_Dynamic_V2_VideoBadge {
    get {return _storage._badge ?? Bilibili_App_Dynamic_V2_VideoBadge()}
    set {_uniqueStorage()._badge = newValue}
  }
  /// Returns true if `badge` has been explicitly set.
  var hasBadge: Bool {return _storage._badge != nil}
  /// Clears the value of `badge`. Subsequent reads from it will return its default value.
  mutating func clearBadge() {_uniqueStorage()._badge = nil}

  /// 是否是预约召回
  var reserveType: Bilibili_App_Dynamic_V2_ReserveType {
    get {return _storage._reserveType}
    set {_uniqueStorage()._reserveType = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 动态列表渲染部分-详情模块-播单
struct Bilibili_App_Dynamic_V2_MdlDynMedialist {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 播单id
  var id: Int64 = 0

  /// 跳转地址
  var uri: String = String()

  /// 主标题
  var title: String = String()

  /// 副标题
  var subTitle: String = String()

  /// 封面图
  var cover: String = String()

  /// 封面类型
  var coverType: Int32 = 0

  /// 角标
  var badge: Bilibili_App_Dynamic_V2_VideoBadge {
    get {return _badge ?? Bilibili_App_Dynamic_V2_VideoBadge()}
    set {_badge = newValue}
  }
  /// Returns true if `badge` has been explicitly set.
  var hasBadge: Bool {return self._badge != nil}
  /// Clears the value of `badge`. Subsequent reads from it will return its default value.
  mutating func clearBadge() {self._badge = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _badge: Bilibili_App_Dynamic_V2_VideoBadge? = nil
}

/// 动态列表渲染部分-详情模块-小程序/小游戏
struct Bilibili_App_Dynamic_V2_MdlDynApplet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 小程序id
  var id: Int64 = 0

  /// 跳转地址
  var uri: String = String()

  /// 主标题
  var title: String = String()

  /// 副标题
  var subTitle: String = String()

  /// 封面图
  var cover: String = String()

  /// 小程序icon
  var icon: String = String()

  /// 小程序标题
  var label: String = String()

  /// 按钮文案
  var buttonTitle: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态列表渲染部分-详情模块-订阅卡
struct Bilibili_App_Dynamic_V2_MdlDynSubscription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 卡片物料id
  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// 广告创意id
  var adID: Int64 {
    get {return _storage._adID}
    set {_uniqueStorage()._adID = newValue}
  }

  /// 跳转地址
  var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  /// 标题
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// 封面图
  var cover: String {
    get {return _storage._cover}
    set {_uniqueStorage()._cover = newValue}
  }

  /// 广告标题
  var adTitle: String {
    get {return _storage._adTitle}
    set {_uniqueStorage()._adTitle = newValue}
  }

  /// 角标
  var badge: Bilibili_App_Dynamic_V2_VideoBadge {
    get {return _storage._badge ?? Bilibili_App_Dynamic_V2_VideoBadge()}
    set {_uniqueStorage()._badge = newValue}
  }
  /// Returns true if `badge` has been explicitly set.
  var hasBadge: Bool {return _storage._badge != nil}
  /// Clears the value of `badge`. Subsequent reads from it will return its default value.
  mutating func clearBadge() {_uniqueStorage()._badge = nil}

  /// 小提示
  var tips: String {
    get {return _storage._tips}
    set {_uniqueStorage()._tips = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 动态列表渲染部分-详情模块-直播推荐
struct Bilibili_App_Dynamic_V2_MdlDynLiveRcmd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 直播数据
  var content: String = String()

  /// 是否是预约召回
  var reserveType: Bilibili_App_Dynamic_V2_ReserveType = .reserveNone

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态列表渲染部分-UGC合集
struct Bilibili_App_Dynamic_V2_MdlDynUGCSeason {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标题
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// 封面图
  var cover: String {
    get {return _storage._cover}
    set {_uniqueStorage()._cover = newValue}
  }

  /// 秒开地址
  var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  /// 视频封面展示项 1
  var coverLeftText1: String {
    get {return _storage._coverLeftText1}
    set {_uniqueStorage()._coverLeftText1 = newValue}
  }

  /// 视频封面展示项 2
  var coverLeftText2: String {
    get {return _storage._coverLeftText2}
    set {_uniqueStorage()._coverLeftText2 = newValue}
  }

  /// 封面视频展示项 3
  var coverLeftText3: String {
    get {return _storage._coverLeftText3}
    set {_uniqueStorage()._coverLeftText3 = newValue}
  }

  /// 卡片物料id
  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// inline播放地址
  var inlineURL: String {
    get {return _storage._inlineURL}
    set {_uniqueStorage()._inlineURL = newValue}
  }

  /// 是否能够自动播放
  var canPlay: Bool {
    get {return _storage._canPlay}
    set {_uniqueStorage()._canPlay = newValue}
  }

  /// 播放按钮
  var playIcon: String {
    get {return _storage._playIcon}
    set {_uniqueStorage()._playIcon = newValue}
  }

  /// avid
  var avid: Int64 {
    get {return _storage._avid}
    set {_uniqueStorage()._avid = newValue}
  }

  /// cid
  var cid: Int64 {
    get {return _storage._cid}
    set {_uniqueStorage()._cid = newValue}
  }

  /// 尺寸信息
  var dimension: Bilibili_App_Dynamic_V2_Dimension {
    get {return _storage._dimension ?? Bilibili_App_Dynamic_V2_Dimension()}
    set {_uniqueStorage()._dimension = newValue}
  }
  /// Returns true if `dimension` has been explicitly set.
  var hasDimension: Bool {return _storage._dimension != nil}
  /// Clears the value of `dimension`. Subsequent reads from it will return its default value.
  mutating func clearDimension() {_uniqueStorage()._dimension = nil}

  /// 时长
  var duration: Int64 {
    get {return _storage._duration}
    set {_uniqueStorage()._duration = newValue}
  }

  /// 跳转地址
  var jumpURL: String {
    get {return _storage._jumpURL}
    set {_uniqueStorage()._jumpURL = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 动态新附加卡
struct Bilibili_App_Dynamic_V2_MdlDynSubscriptionNew {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///样式类型
  var style: Bilibili_App_Dynamic_V2_MdlDynSubscriptionNewStyle = .nont

  /// 新订阅卡数据
  var item: Bilibili_App_Dynamic_V2_MdlDynSubscriptionNew.OneOf_Item? = nil

  var dynSubscription: Bilibili_App_Dynamic_V2_MdlDynSubscription {
    get {
      if case .dynSubscription(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_MdlDynSubscription()
    }
    set {item = .dynSubscription(newValue)}
  }

  /// 直播推荐
  var dynLiveRcmd: Bilibili_App_Dynamic_V2_MdlDynLiveRcmd {
    get {
      if case .dynLiveRcmd(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_MdlDynLiveRcmd()
    }
    set {item = .dynLiveRcmd(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// 新订阅卡数据
  enum OneOf_Item: Equatable {
    case dynSubscription(Bilibili_App_Dynamic_V2_MdlDynSubscription)
    /// 直播推荐
    case dynLiveRcmd(Bilibili_App_Dynamic_V2_MdlDynLiveRcmd)

  #if !swift(>=4.1)
    static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynSubscriptionNew.OneOf_Item, rhs: Bilibili_App_Dynamic_V2_MdlDynSubscriptionNew.OneOf_Item) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.dynSubscription, .dynSubscription): return {
        guard case .dynSubscription(let l) = lhs, case .dynSubscription(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dynLiveRcmd, .dynLiveRcmd): return {
        guard case .dynLiveRcmd(let l) = lhs, case .dynLiveRcmd(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// 动态-附加卡模块
struct Bilibili_App_Dynamic_V2_ModuleAdditional {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 类型
  var type: Bilibili_App_Dynamic_V2_AdditionalType = .additionalNone

  var item: Bilibili_App_Dynamic_V2_ModuleAdditional.OneOf_Item? = nil

  /// 废弃
  var pgc: Bilibili_App_Dynamic_V2_AdditionalPGC {
    get {
      if case .pgc(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_AdditionalPGC()
    }
    set {item = .pgc(newValue)}
  }

  var goods: Bilibili_App_Dynamic_V2_AdditionGoods {
    get {
      if case .goods(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_AdditionGoods()
    }
    set {item = .goods(newValue)}
  }

  /// 废弃
  var vote: Bilibili_App_Dynamic_V2_AdditionVote {
    get {
      if case .vote(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_AdditionVote()
    }
    set {item = .vote(newValue)}
  }

  var common: Bilibili_App_Dynamic_V2_AdditionCommon {
    get {
      if case .common(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_AdditionCommon()
    }
    set {item = .common(newValue)}
  }

  var esport: Bilibili_App_Dynamic_V2_AdditionEsport {
    get {
      if case .esport(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_AdditionEsport()
    }
    set {item = .esport(newValue)}
  }

  /// 投票
  var vote2: Bilibili_App_Dynamic_V2_AdditionVote2 {
    get {
      if case .vote2(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_AdditionVote2()
    }
    set {item = .vote2(newValue)}
  }

  var ugc: Bilibili_App_Dynamic_V2_AdditionUgc {
    get {
      if case .ugc(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_AdditionUgc()
    }
    set {item = .ugc(newValue)}
  }

  /// up主预约发布卡
  var up: Bilibili_App_Dynamic_V2_AdditionUP {
    get {
      if case .up(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_AdditionUP()
    }
    set {item = .up(newValue)}
  }

  /// 附加卡物料ID
  var rid: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Item: Equatable {
    /// 废弃
    case pgc(Bilibili_App_Dynamic_V2_AdditionalPGC)
    case goods(Bilibili_App_Dynamic_V2_AdditionGoods)
    /// 废弃
    case vote(Bilibili_App_Dynamic_V2_AdditionVote)
    case common(Bilibili_App_Dynamic_V2_AdditionCommon)
    case esport(Bilibili_App_Dynamic_V2_AdditionEsport)
    /// 投票
    case vote2(Bilibili_App_Dynamic_V2_AdditionVote2)
    case ugc(Bilibili_App_Dynamic_V2_AdditionUgc)
    /// up主预约发布卡
    case up(Bilibili_App_Dynamic_V2_AdditionUP)

  #if !swift(>=4.1)
    static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleAdditional.OneOf_Item, rhs: Bilibili_App_Dynamic_V2_ModuleAdditional.OneOf_Item) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.pgc, .pgc): return {
        guard case .pgc(let l) = lhs, case .pgc(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.goods, .goods): return {
        guard case .goods(let l) = lhs, case .goods(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.vote, .vote): return {
        guard case .vote(let l) = lhs, case .vote(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.common, .common): return {
        guard case .common(let l) = lhs, case .common(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.esport, .esport): return {
        guard case .esport(let l) = lhs, case .esport(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.vote2, .vote2): return {
        guard case .vote2(let l) = lhs, case .vote2(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.ugc, .ugc): return {
        guard case .ugc(let l) = lhs, case .ugc(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.up, .up): return {
        guard case .up(let l) = lhs, case .up(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// 动态-附加卡-番剧卡
struct Bilibili_App_Dynamic_V2_AdditionalPGC {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 头部说明文案
  var headText: String = String()

  /// 标题
  var title: String = String()

  /// 展示图
  var imageURL: String = String()

  /// 描述文字1
  var descText1: String = String()

  /// 描述文字2
  var descText2: String = String()

  /// 点击跳转链接
  var url: String = String()

  /// 按钮
  var button: Bilibili_App_Dynamic_V2_AdditionalButton {
    get {return _button ?? Bilibili_App_Dynamic_V2_AdditionalButton()}
    set {_button = newValue}
  }
  /// Returns true if `button` has been explicitly set.
  var hasButton: Bool {return self._button != nil}
  /// Clears the value of `button`. Subsequent reads from it will return its default value.
  mutating func clearButton() {self._button = nil}

  /// 头部icon
  var headIcon: String = String()

  /// style
  var style: Bilibili_App_Dynamic_V2_ImageStyle = .addStyleVertical

  /// 动态本身的类型 type
  var type: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _button: Bilibili_App_Dynamic_V2_AdditionalButton? = nil
}

/// 动态-附加卡-按钮
struct Bilibili_App_Dynamic_V2_AdditionalButton {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 按钮类型
  var type: Bilibili_App_Dynamic_V2_AddButtonType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// jump-跳转样式
  var jumpStyle: Bilibili_App_Dynamic_V2_AdditionalButtonStyle {
    get {return _storage._jumpStyle ?? Bilibili_App_Dynamic_V2_AdditionalButtonStyle()}
    set {_uniqueStorage()._jumpStyle = newValue}
  }
  /// Returns true if `jumpStyle` has been explicitly set.
  var hasJumpStyle: Bool {return _storage._jumpStyle != nil}
  /// Clears the value of `jumpStyle`. Subsequent reads from it will return its default value.
  mutating func clearJumpStyle() {_uniqueStorage()._jumpStyle = nil}

  /// jump-跳转链接
  var jumpURL: String {
    get {return _storage._jumpURL}
    set {_uniqueStorage()._jumpURL = newValue}
  }

  /// button-未点样式
  var uncheck: Bilibili_App_Dynamic_V2_AdditionalButtonStyle {
    get {return _storage._uncheck ?? Bilibili_App_Dynamic_V2_AdditionalButtonStyle()}
    set {_uniqueStorage()._uncheck = newValue}
  }
  /// Returns true if `uncheck` has been explicitly set.
  var hasUncheck: Bool {return _storage._uncheck != nil}
  /// Clears the value of `uncheck`. Subsequent reads from it will return its default value.
  mutating func clearUncheck() {_uniqueStorage()._uncheck = nil}

  /// button-已点样式
  var check: Bilibili_App_Dynamic_V2_AdditionalButtonStyle {
    get {return _storage._check ?? Bilibili_App_Dynamic_V2_AdditionalButtonStyle()}
    set {_uniqueStorage()._check = newValue}
  }
  /// Returns true if `check` has been explicitly set.
  var hasCheck: Bool {return _storage._check != nil}
  /// Clears the value of `check`. Subsequent reads from it will return its default value.
  mutating func clearCheck() {_uniqueStorage()._check = nil}

  /// button-当前状态
  var status: Bilibili_App_Dynamic_V2_AdditionalButtonStatus {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// 按钮点击样式
  var clickType: Bilibili_App_Dynamic_V2_AdditionalButtonClickType {
    get {return _storage._clickType}
    set {_uniqueStorage()._clickType = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 动态-附加卡-按钮样式
struct Bilibili_App_Dynamic_V2_AdditionalButtonStyle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// icon
  var icon: String = String()

  /// 文案
  var text: String = String()

  /// 按钮点击交互
  var interactive: Bilibili_App_Dynamic_V2_AdditionalButtonInteractive {
    get {return _interactive ?? Bilibili_App_Dynamic_V2_AdditionalButtonInteractive()}
    set {_interactive = newValue}
  }
  /// Returns true if `interactive` has been explicitly set.
  var hasInteractive: Bool {return self._interactive != nil}
  /// Clears the value of `interactive`. Subsequent reads from it will return its default value.
  mutating func clearInteractive() {self._interactive = nil}

  /// 当前按钮填充样式
  var bgStyle: Bilibili_App_Dynamic_V2_AddButtonBgStyle = .fill

  /// toast文案, 当disable=1时有效
  var toast: String = String()

  /// 当前按钮样式,
  /// 0:高亮 1:置灰(按钮不可点击)
  var disable: Bilibili_App_Dynamic_V2_DisableState = .highlight

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _interactive: Bilibili_App_Dynamic_V2_AdditionalButtonInteractive? = nil
}

struct Bilibili_App_Dynamic_V2_AdditionalButtonInteractive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 是否弹窗
  var popups: String = String()

  /// 弹窗确认文案
  var confirm: String = String()

  /// 弹窗取消文案
  var cancel: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-附加卡-商品卡
struct Bilibili_App_Dynamic_V2_AdditionGoods {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 推荐文案
  var rcmdDesc: String = String()

  /// 商品信息
  var goodsItems: [Bilibili_App_Dynamic_V2_GoodsItem] = []

  /// 附加卡类型
  var cardType: String = String()

  /// 头部icon
  var icon: String = String()

  /// 商品附加卡整卡跳转
  var uri: String = String()

  /// 商品类型
  /// 1:淘宝 2:会员购，注：实际是获取的goods_items里面的第一个source_type
  var sourceType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-附加卡-商品卡-商品
struct Bilibili_App_Dynamic_V2_GoodsItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 图片
  var cover: String = String()

  /// schemaPackageName(Android用)
  var schemaPackageName: String = String()

  /// 商品类型
  /// 1:淘宝 2:会员购
  var sourceType: Int32 = 0

  /// 跳转链接
  var jumpURL: String = String()

  /// 跳转文案
  var jumpDesc: String = String()

  /// 标题
  var title: String = String()

  /// 摘要
  var brief: String = String()

  /// 价格
  var price: String = String()

  /// item_id
  var itemID: Int64 = 0

  /// schema_url
  var schemaURL: String = String()

  /// open_white_list
  var openWhiteList: [String] = []

  /// use_web_v2
  var userWebV2: Bool = false

  /// ad mark
  var adMark: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-附加卡-投票
struct Bilibili_App_Dynamic_V2_AdditionVote {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 封面图
  var imageURL: String = String()

  /// 标题
  var title: String = String()

  /// 展示项1
  var text1: String = String()

  /// button文案
  var buttonText: String = String()

  /// 点击跳转链接
  var url: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-附加卡-UGC视频附加卡
struct Bilibili_App_Dynamic_V2_AdditionUgc {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 说明文案
  var headText: String = String()

  /// 稿件标题
  var title: String = String()

  /// 封面
  var cover: String = String()

  /// 描述文字1
  var descText1: String = String()

  /// 描述文字2
  var descText2: String = String()

  /// 接秒开
  var uri: String = String()

  /// 时长
  var duration: String = String()

  /// 标题支持换行-标题支持单行和双行，本期不支持填充up昵称，支持双行展示，字段默认为true
  var lineFeed: Bool = false

  /// 附加卡类型
  var cardType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-附加卡-通用卡
struct Bilibili_App_Dynamic_V2_AdditionCommon {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 头部说明文案
  var headText: String = String()

  /// 标题
  var title: String = String()

  /// 展示图
  var imageURL: String = String()

  /// 描述文字1
  var descText1: String = String()

  /// 描述文字2
  var descText2: String = String()

  /// 点击跳转链接
  var url: String = String()

  /// 按钮
  var button: Bilibili_App_Dynamic_V2_AdditionalButton {
    get {return _button ?? Bilibili_App_Dynamic_V2_AdditionalButton()}
    set {_button = newValue}
  }
  /// Returns true if `button` has been explicitly set.
  var hasButton: Bool {return self._button != nil}
  /// Clears the value of `button`. Subsequent reads from it will return its default value.
  mutating func clearButton() {self._button = nil}

  /// 头部icon
  var headIcon: String = String()

  /// style
  var style: Bilibili_App_Dynamic_V2_ImageStyle = .addStyleVertical

  /// 动态本身的类型 type
  var type: String = String()

  /// 附加卡类型
  var cardType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _button: Bilibili_App_Dynamic_V2_AdditionalButton? = nil
}

/// 动态-附加卡-电竞卡
struct Bilibili_App_Dynamic_V2_AdditionEsport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 电竞类型
  var style: Bilibili_App_Dynamic_V2_EspaceStyle {
    get {return _storage._style}
    set {_uniqueStorage()._style = newValue}
  }

  var item: OneOf_Item? {
    get {return _storage._item}
    set {_uniqueStorage()._item = newValue}
  }

  /// moba类
  var additionEsportMoba: Bilibili_App_Dynamic_V2_AdditionEsportMoba {
    get {
      if case .additionEsportMoba(let v)? = _storage._item {return v}
      return Bilibili_App_Dynamic_V2_AdditionEsportMoba()
    }
    set {_uniqueStorage()._item = .additionEsportMoba(newValue)}
  }

  /// 动态本身的类型 type
  var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// 附加卡类型
  var cardType: String {
    get {return _storage._cardType}
    set {_uniqueStorage()._cardType = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Item: Equatable {
    /// moba类
    case additionEsportMoba(Bilibili_App_Dynamic_V2_AdditionEsportMoba)

  #if !swift(>=4.1)
    static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionEsport.OneOf_Item, rhs: Bilibili_App_Dynamic_V2_AdditionEsport.OneOf_Item) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.additionEsportMoba, .additionEsportMoba): return {
        guard case .additionEsportMoba(let l) = lhs, case .additionEsportMoba(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 动态-附加卡-电竞卡-moba类
struct Bilibili_App_Dynamic_V2_AdditionEsportMoba {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 头部说明文案
  var headText: String = String()

  /// 标题
  var title: String = String()

  /// 战队列表
  var matchTeam: [Bilibili_App_Dynamic_V2_MatchTeam] = []

  /// 比赛信息
  var additionEsportMobaStatus: Bilibili_App_Dynamic_V2_AdditionEsportMobaStatus {
    get {return _additionEsportMobaStatus ?? Bilibili_App_Dynamic_V2_AdditionEsportMobaStatus()}
    set {_additionEsportMobaStatus = newValue}
  }
  /// Returns true if `additionEsportMobaStatus` has been explicitly set.
  var hasAdditionEsportMobaStatus: Bool {return self._additionEsportMobaStatus != nil}
  /// Clears the value of `additionEsportMobaStatus`. Subsequent reads from it will return its default value.
  mutating func clearAdditionEsportMobaStatus() {self._additionEsportMobaStatus = nil}

  /// 卡片跳转
  var uri: String = String()

  /// 按钮
  var button: Bilibili_App_Dynamic_V2_AdditionalButton {
    get {return _button ?? Bilibili_App_Dynamic_V2_AdditionalButton()}
    set {_button = newValue}
  }
  /// Returns true if `button` has been explicitly set.
  var hasButton: Bool {return self._button != nil}
  /// Clears the value of `button`. Subsequent reads from it will return its default value.
  mutating func clearButton() {self._button = nil}

  /// 副标题
  var subTitle: String = String()

  /// 动态本身的类型 type
  var type: String = String()

  /// 附加卡类型
  var cardType: String = String()

  /// 附加卡图标
  var headIcon: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _additionEsportMobaStatus: Bilibili_App_Dynamic_V2_AdditionEsportMobaStatus? = nil
  fileprivate var _button: Bilibili_App_Dynamic_V2_AdditionalButton? = nil
}

/// 动态-附加卡-电竞卡-moba类-比赛信息
struct Bilibili_App_Dynamic_V2_AdditionEsportMobaStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 文案类
  var additionEsportMobaStatusDesc: [Bilibili_App_Dynamic_V2_AdditionEsportMobaStatusDesc] = []

  /// 比赛状态文案
  var title: String = String()

  /// 比赛状态状态
  var status: Int32 = 0

  /// 日间色值
  var color: String = String()

  /// 夜间色值
  var nightColor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-附加卡-电竞卡-moba类-比赛信息-文案类
struct Bilibili_App_Dynamic_V2_AdditionEsportMobaStatusDesc {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 文案
  var title: String = String()

  /// 日间色值
  var color: String = String()

  /// 夜间色值
  var nightColor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-附加卡-电竞卡-战队
struct Bilibili_App_Dynamic_V2_MatchTeam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 战队ID
  var id: Int64 = 0

  /// 战队名
  var name: String = String()

  /// 战队图标
  var cover: String = String()

  /// 日间色值
  var color: String = String()

  /// 夜间色值
  var nightColor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// up主预约发布卡
struct Bilibili_App_Dynamic_V2_AdditionUP {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标题
  var title: String = String()

  /// 高亮文本，描述文字1
  var descText1: Bilibili_App_Dynamic_V2_HighlightText {
    get {return _descText1 ?? Bilibili_App_Dynamic_V2_HighlightText()}
    set {_descText1 = newValue}
  }
  /// Returns true if `descText1` has been explicitly set.
  var hasDescText1: Bool {return self._descText1 != nil}
  /// Clears the value of `descText1`. Subsequent reads from it will return its default value.
  mutating func clearDescText1() {self._descText1 = nil}

  /// 描述文字2
  var descText2: String = String()

  /// 点击跳转链接
  var url: String = String()

  /// 按钮
  var button: Bilibili_App_Dynamic_V2_AdditionalButton {
    get {return _button ?? Bilibili_App_Dynamic_V2_AdditionalButton()}
    set {_button = newValue}
  }
  /// Returns true if `button` has been explicitly set.
  var hasButton: Bool {return self._button != nil}
  /// Clears the value of `button`. Subsequent reads from it will return its default value.
  mutating func clearButton() {self._button = nil}

  /// 附加卡类型
  var cardType: String = String()

  /// 预约人数(用于预约人数变化)
  var reserveTotal: Int64 = 0

  /// 活动皮肤
  var actSkin: Bilibili_App_Dynamic_V2_AdditionalActSkin {
    get {return _actSkin ?? Bilibili_App_Dynamic_V2_AdditionalActSkin()}
    set {_actSkin = newValue}
  }
  /// Returns true if `actSkin` has been explicitly set.
  var hasActSkin: Bool {return self._actSkin != nil}
  /// Clears the value of `actSkin`. Subsequent reads from it will return its default value.
  mutating func clearActSkin() {self._actSkin = nil}

  /// 预约id
  var rid: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _descText1: Bilibili_App_Dynamic_V2_HighlightText? = nil
  fileprivate var _button: Bilibili_App_Dynamic_V2_AdditionalButton? = nil
  fileprivate var _actSkin: Bilibili_App_Dynamic_V2_AdditionalActSkin? = nil
}

/// 活动皮肤
struct Bilibili_App_Dynamic_V2_AdditionalActSkin {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 动画SVGA资源
  var svga: String = String()

  /// 动画SVGA最后一帧图片资源
  var lastImage: String = String()

  /// 动画播放次数
  var playTimes: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 高亮文本
struct Bilibili_App_Dynamic_V2_HighlightText {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 展示文本
  var text: String = String()

  /// 高亮类型
  var textStyle: Bilibili_App_Dynamic_V2_HighlightTextStyle = .styleNone

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-小卡模块
struct Bilibili_App_Dynamic_V2_ModuleExtend {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 详情
  var extend: [Bilibili_App_Dynamic_V2_ModuleExtendItem] = []

  /// 模块整体跳转uri
  var uri: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-拓展小卡模块
struct Bilibili_App_Dynamic_V2_ModuleExtendItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 类型
  var type: Bilibili_App_Dynamic_V2_DynExtendType = .dynExtTypeNone

  /// 卡片详情
  var extend: Bilibili_App_Dynamic_V2_ModuleExtendItem.OneOf_Extend? = nil

  /// 废弃
  var extInfoTopic: Bilibili_App_Dynamic_V2_ExtInfoTopic {
    get {
      if case .extInfoTopic(let v)? = extend {return v}
      return Bilibili_App_Dynamic_V2_ExtInfoTopic()
    }
    set {extend = .extInfoTopic(newValue)}
  }

  /// 废弃
  var extInfoLbs: Bilibili_App_Dynamic_V2_ExtInfoLBS {
    get {
      if case .extInfoLbs(let v)? = extend {return v}
      return Bilibili_App_Dynamic_V2_ExtInfoLBS()
    }
    set {extend = .extInfoLbs(newValue)}
  }

  /// 废弃
  var extInfoHot: Bilibili_App_Dynamic_V2_ExtInfoHot {
    get {
      if case .extInfoHot(let v)? = extend {return v}
      return Bilibili_App_Dynamic_V2_ExtInfoHot()
    }
    set {extend = .extInfoHot(newValue)}
  }

  /// 废弃
  var extInfoGame: Bilibili_App_Dynamic_V2_ExtInfoGame {
    get {
      if case .extInfoGame(let v)? = extend {return v}
      return Bilibili_App_Dynamic_V2_ExtInfoGame()
    }
    set {extend = .extInfoGame(newValue)}
  }

  var extInfoCommon: Bilibili_App_Dynamic_V2_ExtInfoCommon {
    get {
      if case .extInfoCommon(let v)? = extend {return v}
      return Bilibili_App_Dynamic_V2_ExtInfoCommon()
    }
    set {extend = .extInfoCommon(newValue)}
  }

  var extInfoOgv: Bilibili_App_Dynamic_V2_ExtInfoOGV {
    get {
      if case .extInfoOgv(let v)? = extend {return v}
      return Bilibili_App_Dynamic_V2_ExtInfoOGV()
    }
    set {extend = .extInfoOgv(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// 卡片详情
  enum OneOf_Extend: Equatable {
    /// 废弃
    case extInfoTopic(Bilibili_App_Dynamic_V2_ExtInfoTopic)
    /// 废弃
    case extInfoLbs(Bilibili_App_Dynamic_V2_ExtInfoLBS)
    /// 废弃
    case extInfoHot(Bilibili_App_Dynamic_V2_ExtInfoHot)
    /// 废弃
    case extInfoGame(Bilibili_App_Dynamic_V2_ExtInfoGame)
    case extInfoCommon(Bilibili_App_Dynamic_V2_ExtInfoCommon)
    case extInfoOgv(Bilibili_App_Dynamic_V2_ExtInfoOGV)

  #if !swift(>=4.1)
    static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleExtendItem.OneOf_Extend, rhs: Bilibili_App_Dynamic_V2_ModuleExtendItem.OneOf_Extend) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.extInfoTopic, .extInfoTopic): return {
        guard case .extInfoTopic(let l) = lhs, case .extInfoTopic(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.extInfoLbs, .extInfoLbs): return {
        guard case .extInfoLbs(let l) = lhs, case .extInfoLbs(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.extInfoHot, .extInfoHot): return {
        guard case .extInfoHot(let l) = lhs, case .extInfoHot(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.extInfoGame, .extInfoGame): return {
        guard case .extInfoGame(let l) = lhs, case .extInfoGame(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.extInfoCommon, .extInfoCommon): return {
        guard case .extInfoCommon(let l) = lhs, case .extInfoCommon(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.extInfoOgv, .extInfoOgv): return {
        guard case .extInfoOgv(let l) = lhs, case .extInfoOgv(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// 动态-拓展小卡模块-话题小卡
struct Bilibili_App_Dynamic_V2_ExtInfoTopic {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标题-话题名
  var title: String = String()

  /// 跳转地址
  var uri: String = String()

  /// 小图标
  var icon: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-拓展小卡模块-lbs小卡
struct Bilibili_App_Dynamic_V2_ExtInfoLBS {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标题
  var title: String = String()

  /// 跳转地址
  var uri: String = String()

  /// 小图标
  var icon: String = String()

  /// poiType
  var poiType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-拓展小卡模块-热门小卡
struct Bilibili_App_Dynamic_V2_ExtInfoHot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标题
  var title: String = String()

  /// 跳转地址
  var uri: String = String()

  /// 小图标
  var icon: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-拓展小卡模块-游戏小卡
struct Bilibili_App_Dynamic_V2_ExtInfoGame {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标题
  var title: String = String()

  /// 跳转地址
  var uri: String = String()

  /// 小图标
  var icon: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-拓展小卡模块-通用小卡
struct Bilibili_App_Dynamic_V2_ExtInfoCommon {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标题
  var title: String = String()

  /// 跳转地址
  var uri: String = String()

  /// 小图标
  var icon: String = String()

  /// poiType
  var poiType: Int32 = 0

  /// 类型
  var type: Bilibili_App_Dynamic_V2_DynExtendType = .dynExtTypeNone

  /// 客户端埋点用
  var subModule: String = String()

  /// 行动点文案
  var actionText: String = String()

  /// 行动点链接
  var actionURL: String = String()

  /// 资源rid
  var rid: Int64 = 0

  /// 轻浏览是否展示
  var isShowLight: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-拓展小卡模块-ogv小卡
struct Bilibili_App_Dynamic_V2_ExtInfoOGV {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ogv小卡
  var infoOgv: [Bilibili_App_Dynamic_V2_InfoOGV] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-拓展小卡模块-ogv小卡-(one of 片单、榜单、分区)
struct Bilibili_App_Dynamic_V2_InfoOGV {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标题
  var title: String = String()

  /// 跳转地址
  var uri: String = String()

  /// 小图标
  var icon: String = String()

  /// 客户端埋点用
  var subModule: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 外露交互模块
struct Bilibili_App_Dynamic_V2_ModuleInteraction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 外露交互模块
  var interactionItem: [Bilibili_App_Dynamic_V2_InteractionItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 外露交互模块
struct Bilibili_App_Dynamic_V2_InteractionItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 外露模块类型
  var iconType: Bilibili_App_Dynamic_V2_LocalIconType = .localIconComment

  /// 外露模块文案
  var desc: [Bilibili_App_Dynamic_V2_Description] = []

  /// 外露模块uri相关 根据type不同用法不同
  var uri: String = String()

  /// 动态id
  var dynamicID: String = String()

  /// 评论mid
  var commentMid: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态-计数模块
struct Bilibili_App_Dynamic_V2_ModuleStat {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 转发数
  var repost: Int64 = 0

  /// 点赞数
  var like: Int64 = 0

  /// 评论数
  var reply: Int64 = 0

  /// 点赞拓展信息
  var likeInfo: Bilibili_App_Dynamic_V2_LikeInfo {
    get {return _likeInfo ?? Bilibili_App_Dynamic_V2_LikeInfo()}
    set {_likeInfo = newValue}
  }
  /// Returns true if `likeInfo` has been explicitly set.
  var hasLikeInfo: Bool {return self._likeInfo != nil}
  /// Clears the value of `likeInfo`. Subsequent reads from it will return its default value.
  mutating func clearLikeInfo() {self._likeInfo = nil}

  /// 禁评
  var noComment: Bool = false

  /// 禁转
  var noForward: Bool = false

  /// 点击评论跳转链接
  var replyURL: String = String()

  /// 禁评文案
  var noCommentText: String = String()

  /// 禁转文案
  var noForwardText: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _likeInfo: Bilibili_App_Dynamic_V2_LikeInfo? = nil
}

/// 动态-折叠模块
struct Bilibili_App_Dynamic_V2_ModuleFold {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 折叠分类
  var foldType: Bilibili_App_Dynamic_V2_FoldType = .zore

  /// 折叠文案
  var text: String = String()

  /// 被折叠的动态
  var foldIds: String = String()

  /// 被折叠的用户信息
  var foldUsers: [Bilibili_App_Dynamic_V2_UserInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态综合页-请求
struct Bilibili_App_Dynamic_V2_DynAllReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 透传 update_baseline
  var updateBaseline: String {
    get {return _storage._updateBaseline}
    set {_uniqueStorage()._updateBaseline = newValue}
  }

  /// 透传 history_offset
  var offset: String {
    get {return _storage._offset}
    set {_uniqueStorage()._offset = newValue}
  }

  /// 向下翻页数
  var page: Int32 {
    get {return _storage._page}
    set {_uniqueStorage()._page = newValue}
  }

  /// 刷新方式 1向上刷新 2向下翻页
  var refreshType: Bilibili_App_Dynamic_V2_Refresh {
    get {return _storage._refreshType}
    set {_uniqueStorage()._refreshType = newValue}
  }

  /// 秒开参数 新版本废弃，统一使用player_args
  var playurlParam: Bilibili_App_Dynamic_V2_PlayurlParam {
    get {return _storage._playurlParam ?? Bilibili_App_Dynamic_V2_PlayurlParam()}
    set {_uniqueStorage()._playurlParam = newValue}
  }
  /// Returns true if `playurlParam` has been explicitly set.
  var hasPlayurlParam: Bool {return _storage._playurlParam != nil}
  /// Clears the value of `playurlParam`. Subsequent reads from it will return its default value.
  mutating func clearPlayurlParam() {_uniqueStorage()._playurlParam = nil}

  /// 综合页当前更新的最大值
  var assistBaseline: String {
    get {return _storage._assistBaseline}
    set {_uniqueStorage()._assistBaseline = newValue}
  }

  /// 客户端时区 兼容UTC-14和Etc/GMT+12,时区区间[-12,14] 东八区为8
  var localTime: Int32 {
    get {return _storage._localTime}
    set {_uniqueStorage()._localTime = newValue}
  }

  /// 推荐up主入参(new的时候传)
  var rcmdUpsParam: Bilibili_App_Dynamic_V2_RcmdUPsParam {
    get {return _storage._rcmdUpsParam ?? Bilibili_App_Dynamic_V2_RcmdUPsParam()}
    set {_uniqueStorage()._rcmdUpsParam = newValue}
  }
  /// Returns true if `rcmdUpsParam` has been explicitly set.
  var hasRcmdUpsParam: Bool {return _storage._rcmdUpsParam != nil}
  /// Clears the value of `rcmdUpsParam`. Subsequent reads from it will return its default value.
  mutating func clearRcmdUpsParam() {_uniqueStorage()._rcmdUpsParam = nil}

  /// 广告参数
  var adParam: Bilibili_App_Dynamic_V2_AdParam {
    get {return _storage._adParam ?? Bilibili_App_Dynamic_V2_AdParam()}
    set {_uniqueStorage()._adParam = newValue}
  }
  /// Returns true if `adParam` has been explicitly set.
  var hasAdParam: Bool {return _storage._adParam != nil}
  /// Clears the value of `adParam`. Subsequent reads from it will return its default value.
  mutating func clearAdParam() {_uniqueStorage()._adParam = nil}

  /// 是否冷启
  var coldStart: Int32 {
    get {return _storage._coldStart}
    set {_uniqueStorage()._coldStart = newValue}
  }

  /// 来源
  var from: String {
    get {return _storage._from}
    set {_uniqueStorage()._from = newValue}
  }

  /// 秒开参数
  var playerArgs: Bilibili_App_Archive_Middleware_V1_PlayerArgs {
    get {return _storage._playerArgs ?? Bilibili_App_Archive_Middleware_V1_PlayerArgs()}
    set {_uniqueStorage()._playerArgs = newValue}
  }
  /// Returns true if `playerArgs` has been explicitly set.
  var hasPlayerArgs: Bool {return _storage._playerArgs != nil}
  /// Clears the value of `playerArgs`. Subsequent reads from it will return its default value.
  mutating func clearPlayerArgs() {_uniqueStorage()._playerArgs = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 推荐up主入参
struct Bilibili_App_Dynamic_V2_RcmdUPsParam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dislikeTs: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 综合页请求广告所需字段，由客户端-网关透传
struct Bilibili_App_Dynamic_V2_AdParam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///综合页请求广告所需字段，由客户端-网关透传
  var adExtra: String = String()

  /// request_id
  var requestID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态综合页-响应
struct Bilibili_App_Dynamic_V2_DynAllReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 卡片列表
  var dynamicList: Bilibili_App_Dynamic_V2_DynamicList {
    get {return _storage._dynamicList ?? Bilibili_App_Dynamic_V2_DynamicList()}
    set {_uniqueStorage()._dynamicList = newValue}
  }
  /// Returns true if `dynamicList` has been explicitly set.
  var hasDynamicList: Bool {return _storage._dynamicList != nil}
  /// Clears the value of `dynamicList`. Subsequent reads from it will return its default value.
  mutating func clearDynamicList() {_uniqueStorage()._dynamicList = nil}

  /// 顶部up list
  var upList: Bilibili_App_Dynamic_V2_CardVideoUpList {
    get {return _storage._upList ?? Bilibili_App_Dynamic_V2_CardVideoUpList()}
    set {_uniqueStorage()._upList = newValue}
  }
  /// Returns true if `upList` has been explicitly set.
  var hasUpList: Bool {return _storage._upList != nil}
  /// Clears the value of `upList`. Subsequent reads from it will return its default value.
  mutating func clearUpList() {_uniqueStorage()._upList = nil}

  /// 话题广场
  var topicList: Bilibili_App_Dynamic_V2_TopicList {
    get {return _storage._topicList ?? Bilibili_App_Dynamic_V2_TopicList()}
    set {_uniqueStorage()._topicList = newValue}
  }
  /// Returns true if `topicList` has been explicitly set.
  var hasTopicList: Bool {return _storage._topicList != nil}
  /// Clears the value of `topicList`. Subsequent reads from it will return its default value.
  mutating func clearTopicList() {_uniqueStorage()._topicList = nil}

  /// 无关注推荐
  var unfollow: Bilibili_App_Dynamic_V2_Unfollow {
    get {return _storage._unfollow ?? Bilibili_App_Dynamic_V2_Unfollow()}
    set {_uniqueStorage()._unfollow = newValue}
  }
  /// Returns true if `unfollow` has been explicitly set.
  var hasUnfollow: Bool {return _storage._unfollow != nil}
  /// Clears the value of `unfollow`. Subsequent reads from it will return its default value.
  mutating func clearUnfollow() {_uniqueStorage()._unfollow = nil}

  /// 分区UP推荐
  var regionRcmd: Bilibili_App_Dynamic_V2_DynRegionRcmd {
    get {return _storage._regionRcmd ?? Bilibili_App_Dynamic_V2_DynRegionRcmd()}
    set {_uniqueStorage()._regionRcmd = newValue}
  }
  /// Returns true if `regionRcmd` has been explicitly set.
  var hasRegionRcmd: Bool {return _storage._regionRcmd != nil}
  /// Clears the value of `regionRcmd`. Subsequent reads from it will return its default value.
  mutating func clearRegionRcmd() {_uniqueStorage()._regionRcmd = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///动态卡片列表
struct Bilibili_App_Dynamic_V2_DynamicList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 动态列表
  var list: [Bilibili_App_Dynamic_V2_DynamicItem] = []

  /// 更新的动态数
  var updateNum: Int64 = 0

  /// 历史偏移
  var historyOffset: String = String()

  /// 更新基础信息
  var updateBaseline: String = String()

  /// 是否还有更多数据
  var hasMore_p: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 综合页-话题广场
struct Bilibili_App_Dynamic_V2_TopicList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 模块标题
  var title: String = String()

  /// 话题列表
  var topicListItem: [Bilibili_App_Dynamic_V2_TopicListItem] = []

  /// 发起活动
  var actButton: Bilibili_App_Dynamic_V2_TopicButton {
    get {return _actButton ?? Bilibili_App_Dynamic_V2_TopicButton()}
    set {_actButton = newValue}
  }
  /// Returns true if `actButton` has been explicitly set.
  var hasActButton: Bool {return self._actButton != nil}
  /// Clears the value of `actButton`. Subsequent reads from it will return its default value.
  mutating func clearActButton() {self._actButton = nil}

  /// 查看更多
  var moreButton: Bilibili_App_Dynamic_V2_TopicButton {
    get {return _moreButton ?? Bilibili_App_Dynamic_V2_TopicButton()}
    set {_moreButton = newValue}
  }
  /// Returns true if `moreButton` has been explicitly set.
  var hasMoreButton: Bool {return self._moreButton != nil}
  /// Clears the value of `moreButton`. Subsequent reads from it will return its default value.
  mutating func clearMoreButton() {self._moreButton = nil}

  /// 透传服务端上报
  var serverInfo: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _actButton: Bilibili_App_Dynamic_V2_TopicButton? = nil
  fileprivate var _moreButton: Bilibili_App_Dynamic_V2_TopicButton? = nil
}

/// 综合页-话题广场-话题
struct Bilibili_App_Dynamic_V2_TopicListItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 前置图标
  var icon: String = String()

  /// 前置图标文案
  var iconTitle: String = String()

  /// 话题id
  var topicID: Int64 = 0

  /// 话题名
  var topicName: String = String()

  /// 跳转链接
  var url: String = String()

  /// 卡片位次
  var pos: Int64 = 0

  /// 透传服务端上报
  var serverInfo: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 话题广场操作按钮
struct Bilibili_App_Dynamic_V2_TopicButton {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 按钮图标
  var icon: String = String()

  /// 按钮文案
  var title: String = String()

  /// 跳转
  var jumpUri: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 综合页-无关注列表
struct Bilibili_App_Dynamic_V2_Unfollow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标题展示文案
  var title: String = String()

  /// 无关注列表
  var list: [Bilibili_App_Dynamic_V2_UnfollowUserItem] = []

  /// trackID
  var trackID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 综合页-无关注列表
struct Bilibili_App_Dynamic_V2_UnfollowUserItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 是否有更新
  var hasUpdate_p: Bool {
    get {return _storage._hasUpdate_p}
    set {_uniqueStorage()._hasUpdate_p = newValue}
  }

  /// up主头像
  var face: String {
    get {return _storage._face}
    set {_uniqueStorage()._face = newValue}
  }

  /// up主昵称
  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// up主uid
  var uid: Int64 {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  /// 排序字段 从1开始
  var pos: Int32 {
    get {return _storage._pos}
    set {_uniqueStorage()._pos = newValue}
  }

  /// 直播状态
  var liveState: Bilibili_App_Dynamic_V2_LiveState {
    get {return _storage._liveState}
    set {_uniqueStorage()._liveState = newValue}
  }

  /// 认证信息
  var official: Bilibili_App_Dynamic_V2_OfficialVerify {
    get {return _storage._official ?? Bilibili_App_Dynamic_V2_OfficialVerify()}
    set {_uniqueStorage()._official = newValue}
  }
  /// Returns true if `official` has been explicitly set.
  var hasOfficial: Bool {return _storage._official != nil}
  /// Clears the value of `official`. Subsequent reads from it will return its default value.
  mutating func clearOfficial() {_uniqueStorage()._official = nil}

  /// 大会员信息
  var vip: Bilibili_App_Dynamic_V2_VipInfo {
    get {return _storage._vip ?? Bilibili_App_Dynamic_V2_VipInfo()}
    set {_uniqueStorage()._vip = newValue}
  }
  /// Returns true if `vip` has been explicitly set.
  var hasVip: Bool {return _storage._vip != nil}
  /// Clears the value of `vip`. Subsequent reads from it will return its default value.
  mutating func clearVip() {_uniqueStorage()._vip = nil}

  /// up介绍
  var sign: String {
    get {return _storage._sign}
    set {_uniqueStorage()._sign = newValue}
  }

  /// 标签信息
  var label: String {
    get {return _storage._label}
    set {_uniqueStorage()._label = newValue}
  }

  /// 按钮
  var button: Bilibili_App_Dynamic_V2_AdditionalButton {
    get {return _storage._button ?? Bilibili_App_Dynamic_V2_AdditionalButton()}
    set {_uniqueStorage()._button = newValue}
  }
  /// Returns true if `button` has been explicitly set.
  var hasButton: Bool {return _storage._button != nil}
  /// Clears the value of `button`. Subsequent reads from it will return its default value.
  mutating func clearButton() {_uniqueStorage()._button = nil}

  /// 跳转地址
  var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 批量动态id获取动态详情-请求
struct Bilibili_App_Dynamic_V2_DynDetailsReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 动态id
  var dynamicIds: String = String()

  /// 秒开参数 新版本废弃，统一使用player_args
  var playurlParam: Bilibili_App_Dynamic_V2_PlayurlParam {
    get {return _playurlParam ?? Bilibili_App_Dynamic_V2_PlayurlParam()}
    set {_playurlParam = newValue}
  }
  /// Returns true if `playurlParam` has been explicitly set.
  var hasPlayurlParam: Bool {return self._playurlParam != nil}
  /// Clears the value of `playurlParam`. Subsequent reads from it will return its default value.
  mutating func clearPlayurlParam() {self._playurlParam = nil}

  /// 客户端时区 兼容UTC-14和Etc/GMT+12,时区区间[-12,14] 东八区为8
  var localTime: Int32 = 0

  /// 秒开参数
  var playerArgs: Bilibili_App_Archive_Middleware_V1_PlayerArgs {
    get {return _playerArgs ?? Bilibili_App_Archive_Middleware_V1_PlayerArgs()}
    set {_playerArgs = newValue}
  }
  /// Returns true if `playerArgs` has been explicitly set.
  var hasPlayerArgs: Bool {return self._playerArgs != nil}
  /// Clears the value of `playerArgs`. Subsequent reads from it will return its default value.
  mutating func clearPlayerArgs() {self._playerArgs = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _playurlParam: Bilibili_App_Dynamic_V2_PlayurlParam? = nil
  fileprivate var _playerArgs: Bilibili_App_Archive_Middleware_V1_PlayerArgs? = nil
}

/// 批量动态id获取动态详情-响应
struct Bilibili_App_Dynamic_V2_DynDetailsReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 动态列表
  var list: [Bilibili_App_Dynamic_V2_DynamicItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 最近访问-个人feed流列表-请求
struct Bilibili_App_Dynamic_V2_DynVideoPersonalReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 被访问者的 UID
  var hostUid: Int64 = 0

  /// 偏移量 第一页可传空
  var offset: String = String()

  /// 标明下拉几次
  var page: Int32 = 0

  /// 是否是预加载
  var isPreload: Int32 = 0

  /// 秒开参数 新版本废弃，统一使用player_args
  var playurlParam: Bilibili_App_Dynamic_V2_PlayurlParam {
    get {return _playurlParam ?? Bilibili_App_Dynamic_V2_PlayurlParam()}
    set {_playurlParam = newValue}
  }
  /// Returns true if `playurlParam` has been explicitly set.
  var hasPlayurlParam: Bool {return self._playurlParam != nil}
  /// Clears the value of `playurlParam`. Subsequent reads from it will return its default value.
  mutating func clearPlayurlParam() {self._playurlParam = nil}

  /// 客户端时区 兼容UTC-14和Etc/GMT+12,时区区间[-12,14] 东八区为8
  var localTime: Int32 = 0

  /// 服务端生成的透传上报字段
  var footprint: String = String()

  /// 来源
  var from: String = String()

  /// 秒开参数
  var playerArgs: Bilibili_App_Archive_Middleware_V1_PlayerArgs {
    get {return _playerArgs ?? Bilibili_App_Archive_Middleware_V1_PlayerArgs()}
    set {_playerArgs = newValue}
  }
  /// Returns true if `playerArgs` has been explicitly set.
  var hasPlayerArgs: Bool {return self._playerArgs != nil}
  /// Clears the value of `playerArgs`. Subsequent reads from it will return its default value.
  mutating func clearPlayerArgs() {self._playerArgs = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _playurlParam: Bilibili_App_Dynamic_V2_PlayurlParam? = nil
  fileprivate var _playerArgs: Bilibili_App_Archive_Middleware_V1_PlayerArgs? = nil
}

/// 最近访问-个人feed流列表-响应
struct Bilibili_App_Dynamic_V2_DynVideoPersonalReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 动态列表
  var list: [Bilibili_App_Dynamic_V2_DynamicItem] = []

  /// 偏移量
  var offset: String = String()

  /// 是否还有更多数据
  var hasMore_p: Bool = false

  /// 已读进度
  var readOffset: String = String()

  /// 关注状态
  var relation: Bilibili_App_Dynamic_V2_Relation {
    get {return _relation ?? Bilibili_App_Dynamic_V2_Relation()}
    set {_relation = newValue}
  }
  /// Returns true if `relation` has been explicitly set.
  var hasRelation: Bool {return self._relation != nil}
  /// Clears the value of `relation`. Subsequent reads from it will return its default value.
  mutating func clearRelation() {self._relation = nil}

  /// 顶部预约卡
  var additionUp: Bilibili_App_Dynamic_V2_TopAdditionUP {
    get {return _additionUp ?? Bilibili_App_Dynamic_V2_TopAdditionUP()}
    set {_additionUp = newValue}
  }
  /// Returns true if `additionUp` has been explicitly set.
  var hasAdditionUp: Bool {return self._additionUp != nil}
  /// Clears the value of `additionUp`. Subsequent reads from it will return its default value.
  mutating func clearAdditionUp() {self._additionUp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _relation: Bilibili_App_Dynamic_V2_Relation? = nil
  fileprivate var _additionUp: Bilibili_App_Dynamic_V2_TopAdditionUP? = nil
}

/// 最近访问-标记已读-请求
struct Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 被访问者的UID
  var hostUid: Int64 = 0

  /// 用户已读进度
  var readOffset: String = String()

  /// 服务端生成的透传上报字段
  var footprint: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 视频页-最近访问
struct Bilibili_App_Dynamic_V2_CardVideoUpList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标题展示文案
  var title: String = String()

  /// up主列表
  var list: [Bilibili_App_Dynamic_V2_UpListItem] = []

  /// 服务端生成的透传上报字段
  var footprint: String = String()

  /// 直播数
  var showLiveNum: Int32 = 0

  /// 跳转label
  var moreLabel: Bilibili_App_Dynamic_V2_UpListMoreLabel {
    get {return _moreLabel ?? Bilibili_App_Dynamic_V2_UpListMoreLabel()}
    set {_moreLabel = newValue}
  }
  /// Returns true if `moreLabel` has been explicitly set.
  var hasMoreLabel: Bool {return self._moreLabel != nil}
  /// Clears the value of `moreLabel`. Subsequent reads from it will return its default value.
  mutating func clearMoreLabel() {self._moreLabel = nil}

  /// 标题开关(综合页)
  var titleSwitch: Int32 = 0

  /// 是否展示右上角查看更多label
  var showMoreLabel: Bool = false

  /// 是否在快速消费页查看更多按钮
  var showInPersonal: Bool = false

  /// 是否展示右侧查看更多按钮
  var showMoreButton: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _moreLabel: Bilibili_App_Dynamic_V2_UpListMoreLabel? = nil
}

/// 最常访问-查看更多
struct Bilibili_App_Dynamic_V2_UpListMoreLabel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 文案
  var title: String = String()

  /// 跳转地址
  var uri: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态顶部up列表-up主信息
struct Bilibili_App_Dynamic_V2_UpListItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 是否有更新
  var hasUpdate_p: Bool {
    get {return _storage._hasUpdate_p}
    set {_uniqueStorage()._hasUpdate_p = newValue}
  }

  /// up主头像
  var face: String {
    get {return _storage._face}
    set {_uniqueStorage()._face = newValue}
  }

  /// up主昵称
  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// up主uid
  var uid: Int64 {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  /// 排序字段 从1开始
  var pos: Int64 {
    get {return _storage._pos}
    set {_uniqueStorage()._pos = newValue}
  }

  /// 用户类型
  var userItemType: Bilibili_App_Dynamic_V2_UserItemType {
    get {return _storage._userItemType}
    set {_uniqueStorage()._userItemType = newValue}
  }

  /// 直播头像样式-日
  var displayStyleDay: Bilibili_App_Dynamic_V2_UserItemStyle {
    get {return _storage._displayStyleDay ?? Bilibili_App_Dynamic_V2_UserItemStyle()}
    set {_uniqueStorage()._displayStyleDay = newValue}
  }
  /// Returns true if `displayStyleDay` has been explicitly set.
  var hasDisplayStyleDay: Bool {return _storage._displayStyleDay != nil}
  /// Clears the value of `displayStyleDay`. Subsequent reads from it will return its default value.
  mutating func clearDisplayStyleDay() {_uniqueStorage()._displayStyleDay = nil}

  /// 直播头像样式-夜
  var displayStyleNight: Bilibili_App_Dynamic_V2_UserItemStyle {
    get {return _storage._displayStyleNight ?? Bilibili_App_Dynamic_V2_UserItemStyle()}
    set {_uniqueStorage()._displayStyleNight = newValue}
  }
  /// Returns true if `displayStyleNight` has been explicitly set.
  var hasDisplayStyleNight: Bool {return _storage._displayStyleNight != nil}
  /// Clears the value of `displayStyleNight`. Subsequent reads from it will return its default value.
  mutating func clearDisplayStyleNight() {_uniqueStorage()._displayStyleNight = nil}

  /// 直播埋点
  var styleID: Int64 {
    get {return _storage._styleID}
    set {_uniqueStorage()._styleID = newValue}
  }

  /// 直播状态
  var liveState: Bilibili_App_Dynamic_V2_LiveState {
    get {return _storage._liveState}
    set {_uniqueStorage()._liveState = newValue}
  }

  /// 分割线
  var separator: Bool {
    get {return _storage._separator}
    set {_uniqueStorage()._separator = newValue}
  }

  /// 跳转
  var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  /// UP主预约上报使用
  var isRecall: Bool {
    get {return _storage._isRecall}
    set {_uniqueStorage()._isRecall = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 直播头像样式
struct Bilibili_App_Dynamic_V2_UserItemStyle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rectText: String = String()

  var rectTextColor: String = String()

  var rectIcon: String = String()

  var rectBgColor: String = String()

  var outerAnimation: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 视频页-我的追番
struct Bilibili_App_Dynamic_V2_CardVideoFollowList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 查看全部(跳转链接)
  var viewAllLink: String = String()

  /// 追番列表
  var list: [Bilibili_App_Dynamic_V2_FollowListItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 视频页-我的追番-番剧信息
struct Bilibili_App_Dynamic_V2_FollowListItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// season_id
  var seasonID: Int64 = 0

  /// 标题
  var title: String = String()

  /// 封面图
  var cover: String = String()

  /// 跳转链接
  var url: String = String()

  /// new_ep
  var newEp: Bilibili_App_Dynamic_V2_NewEP {
    get {return _newEp ?? Bilibili_App_Dynamic_V2_NewEP()}
    set {_newEp = newValue}
  }
  /// Returns true if `newEp` has been explicitly set.
  var hasNewEp: Bool {return self._newEp != nil}
  /// Clears the value of `newEp`. Subsequent reads from it will return its default value.
  mutating func clearNewEp() {self._newEp = nil}

  /// 子标题
  var subTitle: String = String()

  /// 卡片位次
  var pos: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _newEp: Bilibili_App_Dynamic_V2_NewEP? = nil
}

/// 最新ep
struct Bilibili_App_Dynamic_V2_NewEP {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 最新话epid
  var id: Int32 = 0

  /// 更新至XX话
  var indexShow: String = String()

  /// 更新剧集的封面
  var cover: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 扩展字段，用于动态部分操作使用
struct Bilibili_App_Dynamic_V2_Extend {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 动态id
  var dynIDStr: String {
    get {return _storage._dynIDStr}
    set {_uniqueStorage()._dynIDStr = newValue}
  }

  /// 业务方id
  var businessID: String {
    get {return _storage._businessID}
    set {_uniqueStorage()._businessID = newValue}
  }

  /// 源动态id
  var origDynIDStr: String {
    get {return _storage._origDynIDStr}
    set {_uniqueStorage()._origDynIDStr = newValue}
  }

  /// 转发卡：用户名
  var origName: String {
    get {return _storage._origName}
    set {_uniqueStorage()._origName = newValue}
  }

  /// 转发卡：图片url
  var origImgURL: String {
    get {return _storage._origImgURL}
    set {_uniqueStorage()._origImgURL = newValue}
  }

  /// 转发卡：文字内容
  var origDesc: [Bilibili_App_Dynamic_V2_Description] {
    get {return _storage._origDesc}
    set {_uniqueStorage()._origDesc = newValue}
  }

  /// 填充文字内容
  var desc: [Bilibili_App_Dynamic_V2_Description] {
    get {return _storage._desc}
    set {_uniqueStorage()._desc = newValue}
  }

  /// 被转发的源动态类型
  var origDynType: Bilibili_App_Dynamic_V2_DynamicType {
    get {return _storage._origDynType}
    set {_uniqueStorage()._origDynType = newValue}
  }

  /// 分享到站外展示类型
  var shareType: String {
    get {return _storage._shareType}
    set {_uniqueStorage()._shareType = newValue}
  }

  /// 分享的场景
  var shareScene: String {
    get {return _storage._shareScene}
    set {_uniqueStorage()._shareScene = newValue}
  }

  /// 是否快速转发
  var isFastShare: Bool {
    get {return _storage._isFastShare}
    set {_uniqueStorage()._isFastShare = newValue}
  }

  /// r_type 分享和转发
  var rType: Int32 {
    get {return _storage._rType}
    set {_uniqueStorage()._rType = newValue}
  }

  /// 数据源的动态类型
  var dynType: Int64 {
    get {return _storage._dynType}
    set {_uniqueStorage()._dynType = newValue}
  }

  /// 用户id
  var uid: Int64 {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  /// 卡片跳转
  var cardURL: String {
    get {return _storage._cardURL}
    set {_uniqueStorage()._cardURL = newValue}
  }

  /// 透传字段
  var sourceContent: SwiftProtobuf.Google_Protobuf_Any {
    get {return _storage._sourceContent ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_uniqueStorage()._sourceContent = newValue}
  }
  /// Returns true if `sourceContent` has been explicitly set.
  var hasSourceContent: Bool {return _storage._sourceContent != nil}
  /// Clears the value of `sourceContent`. Subsequent reads from it will return its default value.
  mutating func clearSourceContent() {_uniqueStorage()._sourceContent = nil}

  /// 转发卡：用户头像
  var origFace: String {
    get {return _storage._origFace}
    set {_uniqueStorage()._origFace = newValue}
  }

  /// 评论跳转
  var reply: Bilibili_App_Dynamic_V2_ExtendReply {
    get {return _storage._reply ?? Bilibili_App_Dynamic_V2_ExtendReply()}
    set {_uniqueStorage()._reply = newValue}
  }
  /// Returns true if `reply` has been explicitly set.
  var hasReply: Bool {return _storage._reply != nil}
  /// Clears the value of `reply`. Subsequent reads from it will return its default value.
  mutating func clearReply() {_uniqueStorage()._reply = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 评论扩展
struct Bilibili_App_Dynamic_V2_ExtendReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 基础跳转地址
  var uri: String = String()

  /// 参数部分
  var params: [Bilibili_App_Dynamic_V2_ExtendReplyParam] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 评论扩展参数部分
struct Bilibili_App_Dynamic_V2_ExtendReplyParam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 参数名
  var key: String = String()

  /// 参数值
  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态列表-用户模块-转发模板
struct Bilibili_App_Dynamic_V2_ModuleAuthorForward {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 展示标题
  var title: [Bilibili_App_Dynamic_V2_ModuleAuthorForwardTitle] = []

  /// 源卡片跳转链接
  var url: String = String()

  /// 用户uid
  var uid: Int64 = 0

  /// 时间标签
  var ptimeLabelText: String = String()

  /// 是否展示关注
  var showFollow: Bool = false

  /// 源up主头像
  var faceURL: String = String()

  /// 双向关系
  var relation: Bilibili_App_Dynamic_V2_Relation {
    get {return _relation ?? Bilibili_App_Dynamic_V2_Relation()}
    set {_relation = newValue}
  }
  /// Returns true if `relation` has been explicitly set.
  var hasRelation: Bool {return self._relation != nil}
  /// Clears the value of `relation`. Subsequent reads from it will return its default value.
  mutating func clearRelation() {self._relation = nil}

  /// 右侧操作区域 - 三点样式
  var tpList: [Bilibili_App_Dynamic_V2_ThreePointItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _relation: Bilibili_App_Dynamic_V2_Relation? = nil
}

/// 动态列表-用户模块-转发模板-title部分
struct Bilibili_App_Dynamic_V2_ModuleAuthorForwardTitle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 文案
  var text: String = String()

  /// 跳转链接
  var url: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态列表-用户模块-广告卡
struct Bilibili_App_Dynamic_V2_ModuleAd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 广告透传信息
  var sourceContent: SwiftProtobuf.Google_Protobuf_Any {
    get {return _sourceContent ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_sourceContent = newValue}
  }
  /// Returns true if `sourceContent` has been explicitly set.
  var hasSourceContent: Bool {return self._sourceContent != nil}
  /// Clears the value of `sourceContent`. Subsequent reads from it will return its default value.
  mutating func clearSourceContent() {self._sourceContent = nil}

  /// 用户模块
  var moduleAuthor: Bilibili_App_Dynamic_V2_ModuleAuthor {
    get {return _moduleAuthor ?? Bilibili_App_Dynamic_V2_ModuleAuthor()}
    set {_moduleAuthor = newValue}
  }
  /// Returns true if `moduleAuthor` has been explicitly set.
  var hasModuleAuthor: Bool {return self._moduleAuthor != nil}
  /// Clears the value of `moduleAuthor`. Subsequent reads from it will return its default value.
  mutating func clearModuleAuthor() {self._moduleAuthor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sourceContent: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _moduleAuthor: Bilibili_App_Dynamic_V2_ModuleAuthor? = nil
}

/// 动态列表-通栏
struct Bilibili_App_Dynamic_V2_ModuleBanner {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 模块标题
  var title: String = String()

  /// 卡片类型
  var type: Bilibili_App_Dynamic_V2_ModuleBannerType = .none

  /// 卡片
  var item: Bilibili_App_Dynamic_V2_ModuleBanner.OneOf_Item? = nil

  var user: Bilibili_App_Dynamic_V2_ModuleBannerUser {
    get {
      if case .user(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_ModuleBannerUser()
    }
    set {item = .user(newValue)}
  }

  /// 不感兴趣文案
  var dislikeText: String = String()

  /// 不感兴趣图标
  var dislikeIcon: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// 卡片
  enum OneOf_Item: Equatable {
    case user(Bilibili_App_Dynamic_V2_ModuleBannerUser)

  #if !swift(>=4.1)
    static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleBanner.OneOf_Item, rhs: Bilibili_App_Dynamic_V2_ModuleBanner.OneOf_Item) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.user, .user): return {
        guard case .user(let l) = lhs, case .user(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  init() {}
}

/// 动态模块-投票
struct Bilibili_App_Dynamic_V2_AdditionVote2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 投票类型
  var additionVoteType: Bilibili_App_Dynamic_V2_AdditionVoteType {
    get {return _storage._additionVoteType}
    set {_uniqueStorage()._additionVoteType = newValue}
  }

  /// 投票ID
  var voteID: Int64 {
    get {return _storage._voteID}
    set {_uniqueStorage()._voteID = newValue}
  }

  /// 标题
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// 已过期： xxx人参与· 投票已过期。button 展示去查看
  /// 未过期： xxx人参与· 剩xx天xx时xx分。button展示去投票
  var label: String {
    get {return _storage._label}
    set {_uniqueStorage()._label = newValue}
  }

  /// 剩余时间
  var deadline: Int64 {
    get {return _storage._deadline}
    set {_uniqueStorage()._deadline = newValue}
  }

  /// 生效文案
  var openText: String {
    get {return _storage._openText}
    set {_uniqueStorage()._openText = newValue}
  }

  /// 过期文案
  var closeText: String {
    get {return _storage._closeText}
    set {_uniqueStorage()._closeText = newValue}
  }

  /// 已投票
  var votedText: String {
    get {return _storage._votedText}
    set {_uniqueStorage()._votedText = newValue}
  }

  /// 投票状态
  var state: Bilibili_App_Dynamic_V2_AdditionVoteState {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  /// 投票信息
  var item: OneOf_Item? {
    get {return _storage._item}
    set {_uniqueStorage()._item = newValue}
  }

  var additionVoteWord: Bilibili_App_Dynamic_V2_AdditionVoteWord {
    get {
      if case .additionVoteWord(let v)? = _storage._item {return v}
      return Bilibili_App_Dynamic_V2_AdditionVoteWord()
    }
    set {_uniqueStorage()._item = .additionVoteWord(newValue)}
  }

  var additionVotePic: Bilibili_App_Dynamic_V2_AdditionVotePic {
    get {
      if case .additionVotePic(let v)? = _storage._item {return v}
      return Bilibili_App_Dynamic_V2_AdditionVotePic()
    }
    set {_uniqueStorage()._item = .additionVotePic(newValue)}
  }

  var additionVoteDefaule: Bilibili_App_Dynamic_V2_AdditionVoteDefaule {
    get {
      if case .additionVoteDefaule(let v)? = _storage._item {return v}
      return Bilibili_App_Dynamic_V2_AdditionVoteDefaule()
    }
    set {_uniqueStorage()._item = .additionVoteDefaule(newValue)}
  }

  /// 业务类型
  /// 0:动态投票 1:话题h5组件
  var bizType: Int32 {
    get {return _storage._bizType}
    set {_uniqueStorage()._bizType = newValue}
  }

  /// 投票总人数
  var total: Int64 {
    get {return _storage._total}
    set {_uniqueStorage()._total = newValue}
  }

  /// 附加卡类型
  var cardType: String {
    get {return _storage._cardType}
    set {_uniqueStorage()._cardType = newValue}
  }

  /// 异常提示
  var tips: String {
    get {return _storage._tips}
    set {_uniqueStorage()._tips = newValue}
  }

  /// 跳转地址
  var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  /// 是否投票
  var isVoted: Bool {
    get {return _storage._isVoted}
    set {_uniqueStorage()._isVoted = newValue}
  }

  /// 投票最多多选个数，单选为1
  var choiceCnt: Int32 {
    get {return _storage._choiceCnt}
    set {_uniqueStorage()._choiceCnt = newValue}
  }

  /// 是否默认选中分享到动态
  var defauleSelectShare: Bool {
    get {return _storage._defauleSelectShare}
    set {_uniqueStorage()._defauleSelectShare = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// 投票信息
  enum OneOf_Item: Equatable {
    case additionVoteWord(Bilibili_App_Dynamic_V2_AdditionVoteWord)
    case additionVotePic(Bilibili_App_Dynamic_V2_AdditionVotePic)
    case additionVoteDefaule(Bilibili_App_Dynamic_V2_AdditionVoteDefaule)

  #if !swift(>=4.1)
    static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionVote2.OneOf_Item, rhs: Bilibili_App_Dynamic_V2_AdditionVote2.OneOf_Item) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.additionVoteWord, .additionVoteWord): return {
        guard case .additionVoteWord(let l) = lhs, case .additionVoteWord(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.additionVotePic, .additionVotePic): return {
        guard case .additionVotePic(let l) = lhs, case .additionVotePic(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.additionVoteDefaule, .additionVoteDefaule): return {
        guard case .additionVoteDefaule(let l) = lhs, case .additionVoteDefaule(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 外露文字类型
struct Bilibili_App_Dynamic_V2_AdditionVoteWord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 外露文字投票详情
  var item: [Bilibili_App_Dynamic_V2_AdditionVoteWordItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 外露文字投票详情
struct Bilibili_App_Dynamic_V2_AdditionVoteWordItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 选项索引，从1开始
  var optIdx: Int32 = 0

  /// 文案
  var title: String = String()

  /// 选中状态
  var isVote: Bool = false

  /// 人数
  var total: Int32 = 0

  /// 占比
  var persent: Double = 0

  /// 是否投票人数最多的选项
  var isMaxOption: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 外露图片类型
struct Bilibili_App_Dynamic_V2_AdditionVotePic {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 图片投票详情
  var item: [Bilibili_App_Dynamic_V2_AdditionVotePicItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 图片投票详情
struct Bilibili_App_Dynamic_V2_AdditionVotePicItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 选项索引，从1开始
  var optIdx: Int32 = 0

  /// 图片
  var cover: String = String()

  /// 选中状态
  var isVote: Bool = false

  /// 人数
  var total: Int32 = 0

  /// 占比
  var persent: Double = 0

  /// 标题文案
  var title: String = String()

  /// 是否投票人数最多的选项
  var isMaxOption: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 外露投票
struct Bilibili_App_Dynamic_V2_AdditionVoteDefaule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 图片 多张
  var cover: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 获取物料失败模块
struct Bilibili_App_Dynamic_V2_ModuleItemNull {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 图标
  var icon: String = String()

  /// 文案
  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态通栏-用户
struct Bilibili_App_Dynamic_V2_ModuleBannerUser {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 卡片列表
  var list: [Bilibili_App_Dynamic_V2_ModuleBannerUserItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态通栏-推荐用户卡
struct Bilibili_App_Dynamic_V2_ModuleBannerUserItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// up主头像
  var face: String {
    get {return _storage._face}
    set {_uniqueStorage()._face = newValue}
  }

  /// up主昵称
  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// up主uid
  var uid: Int64 {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  /// 直播状态
  var liveState: Bilibili_App_Dynamic_V2_LiveState {
    get {return _storage._liveState}
    set {_uniqueStorage()._liveState = newValue}
  }

  /// 认证信息
  var official: Bilibili_App_Dynamic_V2_OfficialVerify {
    get {return _storage._official ?? Bilibili_App_Dynamic_V2_OfficialVerify()}
    set {_uniqueStorage()._official = newValue}
  }
  /// Returns true if `official` has been explicitly set.
  var hasOfficial: Bool {return _storage._official != nil}
  /// Clears the value of `official`. Subsequent reads from it will return its default value.
  mutating func clearOfficial() {_uniqueStorage()._official = nil}

  /// 大会员信息
  var vip: Bilibili_App_Dynamic_V2_VipInfo {
    get {return _storage._vip ?? Bilibili_App_Dynamic_V2_VipInfo()}
    set {_uniqueStorage()._vip = newValue}
  }
  /// Returns true if `vip` has been explicitly set.
  var hasVip: Bool {return _storage._vip != nil}
  /// Clears the value of `vip`. Subsequent reads from it will return its default value.
  mutating func clearVip() {_uniqueStorage()._vip = nil}

  /// 标签信息
  var label: String {
    get {return _storage._label}
    set {_uniqueStorage()._label = newValue}
  }

  /// 按钮
  var button: Bilibili_App_Dynamic_V2_AdditionalButton {
    get {return _storage._button ?? Bilibili_App_Dynamic_V2_AdditionalButton()}
    set {_uniqueStorage()._button = newValue}
  }
  /// Returns true if `button` has been explicitly set.
  var hasButton: Bool {return _storage._button != nil}
  /// Clears the value of `button`. Subsequent reads from it will return its default value.
  mutating func clearButton() {_uniqueStorage()._button = nil}

  /// 跳转地址
  var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 动态-点赞用户模块
struct Bilibili_App_Dynamic_V2_ModuleLikeUser {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 点赞用户
  var likeUsers: [Bilibili_App_Dynamic_V2_LikeUser] = []

  /// 文案
  var displayText: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 点赞用户
struct Bilibili_App_Dynamic_V2_LikeUser {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户mid
  var uid: Int64 = 0

  /// 用户昵称
  var uname: String = String()

  /// 点击跳转链接
  var uri: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 点赞拓展信息
struct Bilibili_App_Dynamic_V2_LikeInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 点赞动画
  var animation: Bilibili_App_Dynamic_V2_LikeAnimation {
    get {return _animation ?? Bilibili_App_Dynamic_V2_LikeAnimation()}
    set {_animation = newValue}
  }
  /// Returns true if `animation` has been explicitly set.
  var hasAnimation: Bool {return self._animation != nil}
  /// Clears the value of `animation`. Subsequent reads from it will return its default value.
  mutating func clearAnimation() {self._animation = nil}

  /// 是否点赞
  var isLike: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _animation: Bilibili_App_Dynamic_V2_LikeAnimation? = nil
}

/// 点赞动画
struct Bilibili_App_Dynamic_V2_LikeAnimation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 开始动画
  var begin: String = String()

  /// 过程动画
  var proc: String = String()

  /// 结束动画
  var end: String = String()

  /// id
  var likeIconID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 三点Item
struct Bilibili_App_Dynamic_V2_ThreePointItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///类型
  var type: Bilibili_App_Dynamic_V2_ThreePointType = .tpNone

  var item: Bilibili_App_Dynamic_V2_ThreePointItem.OneOf_Item? = nil

  /// 默认结构
  var `default`: Bilibili_App_Dynamic_V2_ThreePointDefault {
    get {
      if case .default(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_ThreePointDefault()
    }
    set {item = .default(newValue)}
  }

  /// 自动播放
  var autoPlayer: Bilibili_App_Dynamic_V2_ThreePointAutoPlay {
    get {
      if case .autoPlayer(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_ThreePointAutoPlay()
    }
    set {item = .autoPlayer(newValue)}
  }

  /// 分享
  var share: Bilibili_App_Dynamic_V2_ThreePointShare {
    get {
      if case .share(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_ThreePointShare()
    }
    set {item = .share(newValue)}
  }

  /// 关注
  var attention: Bilibili_App_Dynamic_V2_ThreePointAttention {
    get {
      if case .attention(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_ThreePointAttention()
    }
    set {item = .attention(newValue)}
  }

  /// 稍后在看
  var wait: Bilibili_App_Dynamic_V2_ThreePointWait {
    get {
      if case .wait(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_ThreePointWait()
    }
    set {item = .wait(newValue)}
  }

  /// 不感兴趣
  var dislike: Bilibili_App_Dynamic_V2_ThreePointDislike {
    get {
      if case .dislike(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_ThreePointDislike()
    }
    set {item = .dislike(newValue)}
  }

  /// 收藏
  var favorite: Bilibili_App_Dynamic_V2_ThreePointFavorite {
    get {
      if case .favorite(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_ThreePointFavorite()
    }
    set {item = .favorite(newValue)}
  }

  /// 置顶
  var top: Bilibili_App_Dynamic_V2_ThreePointTop {
    get {
      if case .top(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_ThreePointTop()
    }
    set {item = .top(newValue)}
  }

  /// 评论
  var comment: Bilibili_App_Dynamic_V2_ThreePointComment {
    get {
      if case .comment(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_ThreePointComment()
    }
    set {item = .comment(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Item: Equatable {
    /// 默认结构
    case `default`(Bilibili_App_Dynamic_V2_ThreePointDefault)
    /// 自动播放
    case autoPlayer(Bilibili_App_Dynamic_V2_ThreePointAutoPlay)
    /// 分享
    case share(Bilibili_App_Dynamic_V2_ThreePointShare)
    /// 关注
    case attention(Bilibili_App_Dynamic_V2_ThreePointAttention)
    /// 稍后在看
    case wait(Bilibili_App_Dynamic_V2_ThreePointWait)
    /// 不感兴趣
    case dislike(Bilibili_App_Dynamic_V2_ThreePointDislike)
    /// 收藏
    case favorite(Bilibili_App_Dynamic_V2_ThreePointFavorite)
    /// 置顶
    case top(Bilibili_App_Dynamic_V2_ThreePointTop)
    /// 评论
    case comment(Bilibili_App_Dynamic_V2_ThreePointComment)

  #if !swift(>=4.1)
    static func ==(lhs: Bilibili_App_Dynamic_V2_ThreePointItem.OneOf_Item, rhs: Bilibili_App_Dynamic_V2_ThreePointItem.OneOf_Item) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.default, .default): return {
        guard case .default(let l) = lhs, case .default(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.autoPlayer, .autoPlayer): return {
        guard case .autoPlayer(let l) = lhs, case .autoPlayer(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.share, .share): return {
        guard case .share(let l) = lhs, case .share(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.attention, .attention): return {
        guard case .attention(let l) = lhs, case .attention(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.wait, .wait): return {
        guard case .wait(let l) = lhs, case .wait(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dislike, .dislike): return {
        guard case .dislike(let l) = lhs, case .dislike(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.favorite, .favorite): return {
        guard case .favorite(let l) = lhs, case .favorite(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.top, .top): return {
        guard case .top(let l) = lhs, case .top(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.comment, .comment): return {
        guard case .comment(let l) = lhs, case .comment(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// 动态列表渲染部分-用户模块-按钮
struct Bilibili_App_Dynamic_V2_ModuleAuthorBadgeButton {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 图标
  var icon: String = String()

  /// 文案
  var title: String = String()

  /// 状态
  var state: Int32 = 0

  /// 物料ID
  var id: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 三点-默认结构(使用此背景、举报、删除)
struct Bilibili_App_Dynamic_V2_ThreePointDefault {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// icon
  var icon: String = String()

  /// 标题
  var title: String = String()

  /// 跳转链接
  var uri: String = String()

  /// id
  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 三点-自动播放 旧版不维护
struct Bilibili_App_Dynamic_V2_ThreePointAutoPlay {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// open icon
  var openIcon: String = String()

  /// 开启时显示文案
  var openText: String = String()

  /// close icon
  var closeIcon: String = String()

  /// 关闭时显示文案
  var closeText: String = String()

  /// 开启时显示文案v2
  var openTextV2: String = String()

  /// 关闭时显示文案v2
  var closeTextV2: String = String()

  /// 仅wifi/免流 icon
  var onlyIcon: String = String()

  /// 仅wifi/免流 文案
  var onlyText: String = String()

  /// open icon v2
  var openIconV2: String = String()

  /// close icon v2
  var closeIconV2: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 三点-分享
struct Bilibili_App_Dynamic_V2_ThreePointShare {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// icon
  var icon: String = String()

  /// 标题
  var title: String = String()

  /// 分享渠道
  var channel: [Bilibili_App_Dynamic_V2_ThreePointShareChannel] = []

  /// 分享渠道名
  var channelName: String = String()

  /// 预约卡分享图信息，仅分享有预约信息的动态时存在
  var reserve: Bilibili_App_Dynamic_V2_ShareReserve {
    get {return _reserve ?? Bilibili_App_Dynamic_V2_ShareReserve()}
    set {_reserve = newValue}
  }
  /// Returns true if `reserve` has been explicitly set.
  var hasReserve: Bool {return self._reserve != nil}
  /// Clears the value of `reserve`. Subsequent reads from it will return its default value.
  mutating func clearReserve() {self._reserve = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _reserve: Bilibili_App_Dynamic_V2_ShareReserve? = nil
}

/// 三点-分享渠道
struct Bilibili_App_Dynamic_V2_ThreePointShareChannel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// icon
  var icon: String = String()

  /// 名称
  var title: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 三点-关注
struct Bilibili_App_Dynamic_V2_ThreePointAttention {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// attention icon
  var attentionIcon: String = String()

  /// 关注时显示的文案
  var attentionText: String = String()

  /// not attention icon
  var notAttentionIcon: String = String()

  /// 未关注时显示的文案
  var notAttentionText: String = String()

  /// 当前关注状态
  var status: Bilibili_App_Dynamic_V2_ThreePointAttentionStatus = .tpNotAttention

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 三点-稍后在看
struct Bilibili_App_Dynamic_V2_ThreePointWait {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// addition icon
  var additionIcon: String = String()

  /// 已添加时的文案
  var additionText: String = String()

  /// no addition icon
  var noAdditionIcon: String = String()

  /// 未添加时的文案
  var noAdditionText: String = String()

  /// avid
  var id: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 三点-不感兴趣
struct Bilibili_App_Dynamic_V2_ThreePointDislike {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// icon
  var icon: String = String()

  /// 标题
  var title: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 三点-收藏
struct Bilibili_App_Dynamic_V2_ThreePointFavorite {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// icon
  var icon: String = String()

  /// 标题
  var title: String = String()

  /// 物料ID
  var id: Int64 = 0

  /// 是否订阅
  var isFavourite: Bool = false

  /// 取消收藏图标
  var cancelIcon: String = String()

  /// 取消收藏文案
  var cancelTitle: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 三点-置顶
struct Bilibili_App_Dynamic_V2_ThreePointTop {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// icon
  var icon: String = String()

  /// 标题
  var title: String = String()

  /// 状态
  var type: Bilibili_App_Dynamic_V2_TopType = .topNone

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 三点-评论
struct Bilibili_App_Dynamic_V2_ThreePointComment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 精选评论区功能
  var upSelection: Bilibili_App_Dynamic_V2_CommentDetail {
    get {return _upSelection ?? Bilibili_App_Dynamic_V2_CommentDetail()}
    set {_upSelection = newValue}
  }
  /// Returns true if `upSelection` has been explicitly set.
  var hasUpSelection: Bool {return self._upSelection != nil}
  /// Clears the value of `upSelection`. Subsequent reads from it will return its default value.
  mutating func clearUpSelection() {self._upSelection = nil}

  /// up关闭评论区功能
  var upClose: Bilibili_App_Dynamic_V2_CommentDetail {
    get {return _upClose ?? Bilibili_App_Dynamic_V2_CommentDetail()}
    set {_upClose = newValue}
  }
  /// Returns true if `upClose` has been explicitly set.
  var hasUpClose: Bool {return self._upClose != nil}
  /// Clears the value of `upClose`. Subsequent reads from it will return its default value.
  mutating func clearUpClose() {self._upClose = nil}

  /// icon
  var icon: String = String()

  /// 标题
  var title: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _upSelection: Bilibili_App_Dynamic_V2_CommentDetail? = nil
  fileprivate var _upClose: Bilibili_App_Dynamic_V2_CommentDetail? = nil
}

/// 精选评论区
struct Bilibili_App_Dynamic_V2_CommentDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 该功能能不能用
  var canModify: Bool = false

  /// up关闭评论区功能 1允许关闭 0允许开放
  /// 精选评论区功能 1允许停止评论精选 0允许评论精选
  var status: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 提权样式
struct Bilibili_App_Dynamic_V2_Weight {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 提权展示标题
  var title: String = String()

  /// 下拉框内容
  var items: [Bilibili_App_Dynamic_V2_WeightItem] = []

  /// icon
  var icon: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 提权样式
struct Bilibili_App_Dynamic_V2_WeightItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 类型
  var type: Bilibili_App_Dynamic_V2_WeightType = .weightNone

  var item: Bilibili_App_Dynamic_V2_WeightItem.OneOf_Item? = nil

  /// 热门默认跳转按钮
  var button: Bilibili_App_Dynamic_V2_WeightButton {
    get {
      if case .button(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_WeightButton()
    }
    set {item = .button(newValue)}
  }

  /// 提权不感兴趣
  var dislike: Bilibili_App_Dynamic_V2_WeightDislike {
    get {
      if case .dislike(let v)? = item {return v}
      return Bilibili_App_Dynamic_V2_WeightDislike()
    }
    set {item = .dislike(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Item: Equatable {
    /// 热门默认跳转按钮
    case button(Bilibili_App_Dynamic_V2_WeightButton)
    /// 提权不感兴趣
    case dislike(Bilibili_App_Dynamic_V2_WeightDislike)

  #if !swift(>=4.1)
    static func ==(lhs: Bilibili_App_Dynamic_V2_WeightItem.OneOf_Item, rhs: Bilibili_App_Dynamic_V2_WeightItem.OneOf_Item) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.button, .button): return {
        guard case .button(let l) = lhs, case .button(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dislike, .dislike): return {
        guard case .dislike(let l) = lhs, case .dislike(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// 提权不感兴趣
struct Bilibili_App_Dynamic_V2_WeightDislike {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 负反馈业务类型 作为客户端调用负反馈接口的参数
  var feedBackType: String = String()

  /// 展示文案
  var title: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 热门默认跳转按钮
struct Bilibili_App_Dynamic_V2_WeightButton {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jumpURL: String = String()

  /// 展示文案
  var title: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 评论外露模块
struct Bilibili_App_Dynamic_V2_ModuleComment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 评论外露展示项
  var cmtShowItem: [Bilibili_App_Dynamic_V2_CmtShowItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 评论外露展示项
struct Bilibili_App_Dynamic_V2_CmtShowItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户mid
  var uid: Int64 = 0

  /// 用户昵称
  var uname: String = String()

  /// 点击跳转链接
  var uri: String = String()

  /// 评论内容
  var comment: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态通用附加卡-follow/取消follow-请求
struct Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Bilibili_App_Dynamic_V2_AdditionalButtonStatus = .none

  var dynID: String = String()

  var cardType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态通用附加卡-follow/取消follow-响应
struct Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Bilibili_App_Dynamic_V2_AdditionalButtonStatus = .none

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态点赞-请求
struct Bilibili_App_Dynamic_V2_DynThumbReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户uid
  var uid: Int64 = 0

  /// 动态id
  var dynID: String = String()

  /// 动态类型(透传extend中的dyn_type)
  var dynType: Int64 = 0

  /// 业务方资源id
  var rid: String = String()

  /// 点赞类型
  var type: Bilibili_App_Dynamic_V2_ThumbType = .cancel

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态发布生成临时卡-请求
struct Bilibili_App_Dynamic_V2_DynFakeCardReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///卡片内容json string
  var content: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 动态发布生成临时卡-响应
struct Bilibili_App_Dynamic_V2_DynFakeCardReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 动态卡片
  var item: Bilibili_App_Dynamic_V2_DynamicItem {
    get {return _item ?? Bilibili_App_Dynamic_V2_DynamicItem()}
    set {_item = newValue}
  }
  /// Returns true if `item` has been explicitly set.
  var hasItem: Bool {return self._item != nil}
  /// Clears the value of `item`. Subsequent reads from it will return its default value.
  mutating func clearItem() {self._item = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _item: Bilibili_App_Dynamic_V2_DynamicItem? = nil
}

/// 关注推荐up主换一换-请求
struct Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 登录用户id
  var uid: Int64 = 0

  /// 上一次不感兴趣的ts，单位：秒；该字段透传给搜索
  var dislikeTs: Int64 = 0

  /// 需要与服务端确认或参照客户端现有参数
  var from: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 关注推荐up主换一换-响应
struct Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 无关注推荐
  var unfollow: Bilibili_App_Dynamic_V2_Unfollow {
    get {return _unfollow ?? Bilibili_App_Dynamic_V2_Unfollow()}
    set {_unfollow = newValue}
  }
  /// Returns true if `unfollow` has been explicitly set.
  var hasUnfollow: Bool {return self._unfollow != nil}
  /// Clears the value of `unfollow`. Subsequent reads from it will return its default value.
  mutating func clearUnfollow() {self._unfollow = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _unfollow: Bilibili_App_Dynamic_V2_Unfollow? = nil
}

/// 最近访问-个人feed流列表-请求
struct Bilibili_App_Dynamic_V2_DynAllPersonalReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 被访问者的 UID
  var hostUid: Int64 = 0

  /// 偏移量 第一页可传空
  var offset: String = String()

  /// 标明下拉几次
  var page: Int32 = 0

  /// 是否是预加载 默认是1；客户端预加载。1：是预加载，不更新已读进度，不会影响小红点；0：非预加载，更新已读进度
  var isPreload: Int32 = 0

  /// 秒开参数 新版本废弃，统一使用player_args
  var playurlParam: Bilibili_App_Dynamic_V2_PlayurlParam {
    get {return _playurlParam ?? Bilibili_App_Dynamic_V2_PlayurlParam()}
    set {_playurlParam = newValue}
  }
  /// Returns true if `playurlParam` has been explicitly set.
  var hasPlayurlParam: Bool {return self._playurlParam != nil}
  /// Clears the value of `playurlParam`. Subsequent reads from it will return its default value.
  mutating func clearPlayurlParam() {self._playurlParam = nil}

  /// 客户端时区 兼容UTC-14和Etc/GMT+12,时区区间[-12,14] 东八区为8
  var localTime: Int32 = 0

  /// 服务端生成的透传上报字段
  var footprint: String = String()

  /// 来源
  var from: String = String()

  /// 秒开用
  var playerArgs: Bilibili_App_Archive_Middleware_V1_PlayerArgs {
    get {return _playerArgs ?? Bilibili_App_Archive_Middleware_V1_PlayerArgs()}
    set {_playerArgs = newValue}
  }
  /// Returns true if `playerArgs` has been explicitly set.
  var hasPlayerArgs: Bool {return self._playerArgs != nil}
  /// Clears the value of `playerArgs`. Subsequent reads from it will return its default value.
  mutating func clearPlayerArgs() {self._playerArgs = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _playurlParam: Bilibili_App_Dynamic_V2_PlayurlParam? = nil
  fileprivate var _playerArgs: Bilibili_App_Archive_Middleware_V1_PlayerArgs? = nil
}

/// 最近访问-个人feed流列表-返回
struct Bilibili_App_Dynamic_V2_DynAllPersonalReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 动态列表
  var list: [Bilibili_App_Dynamic_V2_DynamicItem] = []

  /// 偏移量
  var offset: String = String()

  /// 是否还有更多数据
  var hasMore_p: Bool = false

  /// 已读进度
  var readOffset: String = String()

  /// 关注状态
  var relation: Bilibili_App_Dynamic_V2_Relation {
    get {return _relation ?? Bilibili_App_Dynamic_V2_Relation()}
    set {_relation = newValue}
  }
  /// Returns true if `relation` has been explicitly set.
  var hasRelation: Bool {return self._relation != nil}
  /// Clears the value of `relation`. Subsequent reads from it will return its default value.
  mutating func clearRelation() {self._relation = nil}

  /// 顶部预约卡
  var additionUp: Bilibili_App_Dynamic_V2_TopAdditionUP {
    get {return _additionUp ?? Bilibili_App_Dynamic_V2_TopAdditionUP()}
    set {_additionUp = newValue}
  }
  /// Returns true if `additionUp` has been explicitly set.
  var hasAdditionUp: Bool {return self._additionUp != nil}
  /// Clears the value of `additionUp`. Subsequent reads from it will return its default value.
  mutating func clearAdditionUp() {self._additionUp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _relation: Bilibili_App_Dynamic_V2_Relation? = nil
  fileprivate var _additionUp: Bilibili_App_Dynamic_V2_TopAdditionUP? = nil
}

/// 顶部预约卡
struct Bilibili_App_Dynamic_V2_TopAdditionUP {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 预约卡
  var up: [Bilibili_App_Dynamic_V2_AdditionUP] = []

  /// 折叠数量，大于多少个进行折叠
  var hasFold_p: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 最近访问-标记已读-请求
struct Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 被访问者的UID
  var hostUid: Int64 = 0

  /// 用户已读进度
  var readOffset: String = String()

  /// 服务端生成的透传上报字段
  var footprint: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 投票操作-请求
struct Bilibili_App_Dynamic_V2_DynVoteReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 投票ID
  var voteID: Int64 = 0

  /// 选项索引数组
  var votes: [Int64] = []

  /// 状态
  var status: Bilibili_App_Dynamic_V2_VoteStatus = .normal

  /// 动态ID
  var dynamicID: String = String()

  /// 是否分享
  var share: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 投票操作-响应
struct Bilibili_App_Dynamic_V2_DynVoteReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 投票详情
  var item: Bilibili_App_Dynamic_V2_AdditionVote2 {
    get {return _item ?? Bilibili_App_Dynamic_V2_AdditionVote2()}
    set {_item = newValue}
  }
  /// Returns true if `item` has been explicitly set.
  var hasItem: Bool {return self._item != nil}
  /// Clears the value of `item`. Subsequent reads from it will return its default value.
  mutating func clearItem() {self._item = nil}

  /// 投票操作返回状态
  var toast: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _item: Bilibili_App_Dynamic_V2_AdditionVote2? = nil
}

/// 关注关系
struct Bilibili_App_Dynamic_V2_Relation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 关注状态
  var status: Bilibili_App_Dynamic_V2_RelationStatus = .none

  /// 关注
  var isFollow: Int32 = 0

  /// 被关注
  var isFollowed: Int32 = 0

  /// 文案
  var title: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_App_Dynamic_V2_MixUpListLiveItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 直播状态
  /// 0:未直播 1:直播中
  var status: Bool = false

  /// 房间号
  var roomID: Int64 = 0

  /// 跳转地址
  var uri: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 查看更多-列表单条数据
struct Bilibili_App_Dynamic_V2_MixUpListItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户mid
  var uid: Int64 {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  /// 特别关注
  /// 0:否 1:是
  var specialAttention: Int32 {
    get {return _storage._specialAttention}
    set {_uniqueStorage()._specialAttention = newValue}
  }

  /// 小红点状态
  /// 0:没有 1:有
  var reddotState: Int32 {
    get {return _storage._reddotState}
    set {_uniqueStorage()._reddotState = newValue}
  }

  /// 直播信息
  var liveInfo: Bilibili_App_Dynamic_V2_MixUpListLiveItem {
    get {return _storage._liveInfo ?? Bilibili_App_Dynamic_V2_MixUpListLiveItem()}
    set {_uniqueStorage()._liveInfo = newValue}
  }
  /// Returns true if `liveInfo` has been explicitly set.
  var hasLiveInfo: Bool {return _storage._liveInfo != nil}
  /// Clears the value of `liveInfo`. Subsequent reads from it will return its default value.
  mutating func clearLiveInfo() {_uniqueStorage()._liveInfo = nil}

  /// 昵称
  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// 头像
  var face: String {
    get {return _storage._face}
    set {_uniqueStorage()._face = newValue}
  }

  /// 认证信息
  var official: Bilibili_App_Dynamic_V2_OfficialVerify {
    get {return _storage._official ?? Bilibili_App_Dynamic_V2_OfficialVerify()}
    set {_uniqueStorage()._official = newValue}
  }
  /// Returns true if `official` has been explicitly set.
  var hasOfficial: Bool {return _storage._official != nil}
  /// Clears the value of `official`. Subsequent reads from it will return its default value.
  mutating func clearOfficial() {_uniqueStorage()._official = nil}

  /// 大会员信息
  var vip: Bilibili_App_Dynamic_V2_VipInfo {
    get {return _storage._vip ?? Bilibili_App_Dynamic_V2_VipInfo()}
    set {_uniqueStorage()._vip = newValue}
  }
  /// Returns true if `vip` has been explicitly set.
  var hasVip: Bool {return _storage._vip != nil}
  /// Clears the value of `vip`. Subsequent reads from it will return its default value.
  mutating func clearVip() {_uniqueStorage()._vip = nil}

  /// 关注状态
  var relation: Bilibili_App_Dynamic_V2_Relation {
    get {return _storage._relation ?? Bilibili_App_Dynamic_V2_Relation()}
    set {_uniqueStorage()._relation = newValue}
  }
  /// Returns true if `relation` has been explicitly set.
  var hasRelation: Bool {return _storage._relation != nil}
  /// Clears the value of `relation`. Subsequent reads from it will return its default value.
  mutating func clearRelation() {_uniqueStorage()._relation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 查看更多-请求
struct Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 排序策略
  /// 1:推荐排序 2:最常访问 3:最近关注，其他值为默认排序
  var sortType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 排序类型
struct Bilibili_App_Dynamic_V2_SortType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 排序策略
  /// 1:推荐排序 2:最常访问 3:最近关注
  var sortType: Int32 = 0

  /// 排序策略名称
  var sortTypeName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 查看更多-列表-响应
struct Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var items: [Bilibili_App_Dynamic_V2_MixUpListItem] = []

  var searchDefaultText: String = String()

  /// 排序类型列表
  var sortTypes: [Bilibili_App_Dynamic_V2_SortType] = []

  /// 是否展示更多的排序策略
  var showMoreSortTypes: Bool = false

  /// 默认排序策略
  var defaultSortType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 轻浏览-请求
struct Bilibili_App_Dynamic_V2_DynLightReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 透传 history_offset
  var historyOffset: String = String()

  /// 向下翻页数
  var page: Int32 = 0

  /// 来源
  var from: String = String()

  /// 秒开参数
  var playerArgs: Bilibili_App_Archive_Middleware_V1_PlayerArgs {
    get {return _playerArgs ?? Bilibili_App_Archive_Middleware_V1_PlayerArgs()}
    set {_playerArgs = newValue}
  }
  /// Returns true if `playerArgs` has been explicitly set.
  var hasPlayerArgs: Bool {return self._playerArgs != nil}
  /// Clears the value of `playerArgs`. Subsequent reads from it will return its default value.
  mutating func clearPlayerArgs() {self._playerArgs = nil}

  /// 客户端时区 兼容UTC-14和Etc/GMT+12,时区区间[-12,14] 东八区为8
  var localTime: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _playerArgs: Bilibili_App_Archive_Middleware_V1_PlayerArgs? = nil
}

/// 轻浏览-响应
struct Bilibili_App_Dynamic_V2_DynLightReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 卡片列表
  var dynamicList: Bilibili_App_Dynamic_V2_DynamicList {
    get {return _dynamicList ?? Bilibili_App_Dynamic_V2_DynamicList()}
    set {_dynamicList = newValue}
  }
  /// Returns true if `dynamicList` has been explicitly set.
  var hasDynamicList: Bool {return self._dynamicList != nil}
  /// Clears the value of `dynamicList`. Subsequent reads from it will return its default value.
  mutating func clearDynamicList() {self._dynamicList = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dynamicList: Bilibili_App_Dynamic_V2_DynamicList? = nil
}

/// 动态详情页-请求
struct Bilibili_App_Dynamic_V2_DynDetailReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// up主uid
  var uid: Int64 = 0

  /// 动态ID
  var dynamicID: String = String()

  /// 动态类型
  var dynType: Int64 = 0

  /// 业务方资源id
  var rid: Int64 = 0

  /// 广告参数
  var adParam: Bilibili_App_Dynamic_V2_AdParam {
    get {return _adParam ?? Bilibili_App_Dynamic_V2_AdParam()}
    set {_adParam = newValue}
  }
  /// Returns true if `adParam` has been explicitly set.
  var hasAdParam: Bool {return self._adParam != nil}
  /// Clears the value of `adParam`. Subsequent reads from it will return its default value.
  mutating func clearAdParam() {self._adParam = nil}

  /// From来源
  var from: String = String()

  /// 秒开参数
  var playerArgs: Bilibili_App_Archive_Middleware_V1_PlayerArgs {
    get {return _playerArgs ?? Bilibili_App_Archive_Middleware_V1_PlayerArgs()}
    set {_playerArgs = newValue}
  }
  /// Returns true if `playerArgs` has been explicitly set.
  var hasPlayerArgs: Bool {return self._playerArgs != nil}
  /// Clears the value of `playerArgs`. Subsequent reads from it will return its default value.
  mutating func clearPlayerArgs() {self._playerArgs = nil}

  /// 分享id
  var shareID: String = String()

  /// 分享类型
  /// 1:文字 2:图片 3:链接 4:视频 5:音频
  var shareMode: Int32 = 0

  /// 客户端时区 兼容UTC-14和Etc/GMT+12,时区区间[-12,14] 东八区为8
  var localTime: Int32 = 0

  /// pattern
  var pattern: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _adParam: Bilibili_App_Dynamic_V2_AdParam? = nil
  fileprivate var _playerArgs: Bilibili_App_Archive_Middleware_V1_PlayerArgs? = nil
}

/// 动态详情页-响应
struct Bilibili_App_Dynamic_V2_DynDetailReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 动态详情
  var item: Bilibili_App_Dynamic_V2_DynamicItem {
    get {return _item ?? Bilibili_App_Dynamic_V2_DynamicItem()}
    set {_item = newValue}
  }
  /// Returns true if `item` has been explicitly set.
  var hasItem: Bool {return self._item != nil}
  /// Clears the value of `item`. Subsequent reads from it will return its default value.
  mutating func clearItem() {self._item = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _item: Bilibili_App_Dynamic_V2_DynamicItem? = nil
}

/// 点赞列表-请求
struct Bilibili_App_Dynamic_V2_LikeListReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 动态ID
  var dynamicID: String = String()

  /// 动态类型
  var dynType: Int64 = 0

  /// 业务方资源id
  var rid: Int64 = 0

  ///上一页最后一个uid
  var uidOffset: Int64 = 0

  /// 下拉页数
  var page: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 点赞列表-响应
struct Bilibili_App_Dynamic_V2_LikeListReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户模块列表
  var list: [Bilibili_App_Dynamic_V2_ModuleAuthor] = []

  /// 是否还有更多数据
  var hasMore_p: Bool = false

  /// 点赞总数
  var totalCount: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 转发列表-请求
struct Bilibili_App_Dynamic_V2_RepostListReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 动态ID
  var dynamicID: String = String()

  /// 动态类型
  var dynType: Int64 = 0

  /// 业务方资源id
  var rid: Int64 = 0

  /// 偏移,使用上一页回包中的offset字段；第一页不传。
  var offset: String = String()

  /// 来源
  var from: String = String()

  /// 评论类型
  var repostType: Bilibili_App_Dynamic_V2_RepostType = .repostHot

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 转发列表-响应
struct Bilibili_App_Dynamic_V2_RepostListRsp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 列表
  var list: [Bilibili_App_Dynamic_V2_DynamicItem] = []

  /// 偏移
  var offset: String = String()

  /// 是否还有更多
  var hasMore_p: Bool = false

  /// 转发总数
  var totalCount: Int64 = 0

  /// 评论类型
  var repostType: Bilibili_App_Dynamic_V2_RepostType = .repostHot

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 分享模块
struct Bilibili_App_Dynamic_V2_ModuleShareInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 展示标题
  var title: String = String()

  /// 分享组件列表
  var shareChannels: [Bilibili_App_Dynamic_V2_ShareChannel] = []

  /// share_origin
  var shareOrigin: String = String()

  /// 业务id
  var oid: String = String()

  /// sid
  var sid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 分享渠道组件
struct Bilibili_App_Dynamic_V2_ShareChannel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 分享名称
  var name: String = String()

  /// 分享按钮图片
  var image: String = String()

  /// 分享渠道
  var channel: String = String()

  /// 预约卡分享图信息，仅分享有预约信息的动态时存在
  var reserve: Bilibili_App_Dynamic_V2_ShareReserve {
    get {return _reserve ?? Bilibili_App_Dynamic_V2_ShareReserve()}
    set {_reserve = newValue}
  }
  /// Returns true if `reserve` has been explicitly set.
  var hasReserve: Bool {return self._reserve != nil}
  /// Clears the value of `reserve`. Subsequent reads from it will return its default value.
  mutating func clearReserve() {self._reserve = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _reserve: Bilibili_App_Dynamic_V2_ShareReserve? = nil
}

/// 预约卡分享图信息
struct Bilibili_App_Dynamic_V2_ShareReserve {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 展示标题
  var title: String = String()

  /// 描述(时间+类型)
  var desc: String = String()

  /// 二维码附带icon
  var qrCodeIcon: String = String()

  /// 二维码附带文本
  var qrCodeText: String = String()

  /// 二维码url
  var qrCodeURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 相关推荐模块
struct Bilibili_App_Dynamic_V2_ModuleRecommend {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 模块标题
  var moduleTitle: String = String()

  /// 图片
  var image: String = String()

  /// 标签
  var tag: String = String()

  /// 标题
  var title: String = String()

  /// 跳转链接
  var jumpURL: String = String()

  /// 序列化的广告信息
  var ad: [SwiftProtobuf.Google_Protobuf_Any] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 空间页动态-请求
struct Bilibili_App_Dynamic_V2_DynSpaceReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 被访问者，也就是空间主人的uid
  var hostUid: Int64 = 0

  /// 动态偏移history_offset
  var historyOffset: String = String()

  /// 秒开参数
  var playerArgs: Bilibili_App_Archive_Middleware_V1_PlayerArgs {
    get {return _playerArgs ?? Bilibili_App_Archive_Middleware_V1_PlayerArgs()}
    set {_playerArgs = newValue}
  }
  /// Returns true if `playerArgs` has been explicitly set.
  var hasPlayerArgs: Bool {return self._playerArgs != nil}
  /// Clears the value of `playerArgs`. Subsequent reads from it will return its default value.
  mutating func clearPlayerArgs() {self._playerArgs = nil}

  /// 客户端时区 兼容UTC-14和Etc/GMT+12,时区区间[-12,14] 东八区为8
  var localTime: Int32 = 0

  /// 向下翻页数，默认从1开始
  var page: Int64 = 0

  /// 来源，空间页：space，直播tab：live
  var from: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _playerArgs: Bilibili_App_Archive_Middleware_V1_PlayerArgs? = nil
}

/// 空间页动态-响应
struct Bilibili_App_Dynamic_V2_DynSpaceRsp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 卡片列表
  var list: [Bilibili_App_Dynamic_V2_DynamicItem] = []

  /// 历史偏移
  var historyOffset: String = String()

  /// 是否还有更多数据
  var hasMore_p: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 顶部模块
struct Bilibili_App_Dynamic_V2_ModuleTop {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 三点模块
  var tpList: [Bilibili_App_Dynamic_V2_ThreePointItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 底部模块
struct Bilibili_App_Dynamic_V2_ModuleButtom {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 计数模块
  var moduleStat: Bilibili_App_Dynamic_V2_ModuleStat {
    get {return _moduleStat ?? Bilibili_App_Dynamic_V2_ModuleStat()}
    set {_moduleStat = newValue}
  }
  /// Returns true if `moduleStat` has been explicitly set.
  var hasModuleStat: Bool {return self._moduleStat != nil}
  /// Clears the value of `moduleStat`. Subsequent reads from it will return its default value.
  mutating func clearModuleStat() {self._moduleStat = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _moduleStat: Bilibili_App_Dynamic_V2_ModuleStat? = nil
}

/// 推荐页-请求
struct Bilibili_App_Dynamic_V2_DynRcmdReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 秒开参数
  var playerArgs: Bilibili_App_Archive_Middleware_V1_PlayerArgs {
    get {return _playerArgs ?? Bilibili_App_Archive_Middleware_V1_PlayerArgs()}
    set {_playerArgs = newValue}
  }
  /// Returns true if `playerArgs` has been explicitly set.
  var hasPlayerArgs: Bool {return self._playerArgs != nil}
  /// Clears the value of `playerArgs`. Subsequent reads from it will return its default value.
  mutating func clearPlayerArgs() {self._playerArgs = nil}

  /// 客户端时区 兼容UTC-14和Etc/GMT+12,时区区间[-12,14] 东八区为8
  var localTime: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _playerArgs: Bilibili_App_Archive_Middleware_V1_PlayerArgs? = nil
}

/// 推荐页-响应
struct Bilibili_App_Dynamic_V2_DynRcmdReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 推荐页返回参数
  var regionRcmd: Bilibili_App_Dynamic_V2_DynRegionRcmd {
    get {return _regionRcmd ?? Bilibili_App_Dynamic_V2_DynRegionRcmd()}
    set {_regionRcmd = newValue}
  }
  /// Returns true if `regionRcmd` has been explicitly set.
  var hasRegionRcmd: Bool {return self._regionRcmd != nil}
  /// Clears the value of `regionRcmd`. Subsequent reads from it will return its default value.
  mutating func clearRegionRcmd() {self._regionRcmd = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _regionRcmd: Bilibili_App_Dynamic_V2_DynRegionRcmd? = nil
}

/// 推荐页返回参数
struct Bilibili_App_Dynamic_V2_DynRegionRcmd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 分区推荐项目列表
  var items: [Bilibili_App_Dynamic_V2_DynRegionRcmdItem] = []

  /// 分区聚类推荐选项
  var opts: Bilibili_App_Dynamic_V2_RcmdOption {
    get {return _opts ?? Bilibili_App_Dynamic_V2_RcmdOption()}
    set {_opts = newValue}
  }
  /// Returns true if `opts` has been explicitly set.
  var hasOpts: Bool {return self._opts != nil}
  /// Clears the value of `opts`. Subsequent reads from it will return its default value.
  mutating func clearOpts() {self._opts = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _opts: Bilibili_App_Dynamic_V2_RcmdOption? = nil
}

/// 分区聚类推荐选项
struct Bilibili_App_Dynamic_V2_RcmdOption {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 视频是否展示标题
  var showTitle: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 分区推荐项目
struct Bilibili_App_Dynamic_V2_DynRegionRcmdItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 分区id
  var rid: Int64 = 0

  /// 标题
  var title: String = String()

  /// 推荐模块
  var items: [Bilibili_App_Dynamic_V2_ModuleRcmd] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 推荐模块
struct Bilibili_App_Dynamic_V2_ModuleRcmd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户头像
  var author: Bilibili_App_Dynamic_V2_RcmdAuthor {
    get {return _author ?? Bilibili_App_Dynamic_V2_RcmdAuthor()}
    set {_author = newValue}
  }
  /// Returns true if `author` has been explicitly set.
  var hasAuthor: Bool {return self._author != nil}
  /// Clears the value of `author`. Subsequent reads from it will return its default value.
  mutating func clearAuthor() {self._author = nil}

  /// 推荐卡片列表
  var items: [Bilibili_App_Dynamic_V2_RcmdItem] = []

  /// 透传到客户端的埋点字段
  var serverInfo: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _author: Bilibili_App_Dynamic_V2_RcmdAuthor? = nil
}

/// 推荐UP主用户模块
struct Bilibili_App_Dynamic_V2_RcmdAuthor {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户详情
  var author: Bilibili_App_Dynamic_V2_UserInfo {
    get {return _author ?? Bilibili_App_Dynamic_V2_UserInfo()}
    set {_author = newValue}
  }
  /// Returns true if `author` has been explicitly set.
  var hasAuthor: Bool {return self._author != nil}
  /// Clears the value of `author`. Subsequent reads from it will return its default value.
  mutating func clearAuthor() {self._author = nil}

  /// 描述：粉丝数、推荐理由
  var desc: String = String()

  /// 关注状态
  var relation: Bilibili_App_Dynamic_V2_Relation {
    get {return _relation ?? Bilibili_App_Dynamic_V2_Relation()}
    set {_relation = newValue}
  }
  /// Returns true if `relation` has been explicitly set.
  var hasRelation: Bool {return self._relation != nil}
  /// Clears the value of `relation`. Subsequent reads from it will return its default value.
  mutating func clearRelation() {self._relation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _author: Bilibili_App_Dynamic_V2_UserInfo? = nil
  fileprivate var _relation: Bilibili_App_Dynamic_V2_Relation? = nil
}

/// 推荐卡片列表
struct Bilibili_App_Dynamic_V2_RcmdItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 卡片类型
  var type: Bilibili_App_Dynamic_V2_RcmdType = .rcmdArchive

  /// 卡片列表
  var rcmdItem: Bilibili_App_Dynamic_V2_RcmdItem.OneOf_RcmdItem? = nil

  var rcmdArchive: Bilibili_App_Dynamic_V2_RcmdArchive {
    get {
      if case .rcmdArchive(let v)? = rcmdItem {return v}
      return Bilibili_App_Dynamic_V2_RcmdArchive()
    }
    set {rcmdItem = .rcmdArchive(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// 卡片列表
  enum OneOf_RcmdItem: Equatable {
    case rcmdArchive(Bilibili_App_Dynamic_V2_RcmdArchive)

  #if !swift(>=4.1)
    static func ==(lhs: Bilibili_App_Dynamic_V2_RcmdItem.OneOf_RcmdItem, rhs: Bilibili_App_Dynamic_V2_RcmdItem.OneOf_RcmdItem) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.rcmdArchive, .rcmdArchive): return {
        guard case .rcmdArchive(let l) = lhs, case .rcmdArchive(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  init() {}
}

struct Bilibili_App_Dynamic_V2_RcmdArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标题
  var title: String = String()

  /// 封面图
  var cover: String = String()

  /// 视频封面展示项 1
  var coverLeftIcon1: Bilibili_App_Dynamic_V2_CoverIcon = .none

  /// 视频封面展示项 1
  var coverLeftText1: String = String()

  /// 秒开地址
  var uri: String = String()

  /// 是否PGC
  var isPgc: Bool = false

  /// aid
  var aid: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Bilibili_App_Dynamic_V2_Refresh: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynamicType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_LiveState: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DescType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_EmojiType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleDynamicType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MediaType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ReserveType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_VideoType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_VideoSubType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynDrawTagType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynCommonType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynSubscriptionNewStyle: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionalType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ImageStyle: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AddButtonType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionalButtonStatus: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionalButtonClickType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DisableState: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AddButtonBgStyle: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_EspaceStyle: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_HighlightTextStyle: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynExtendType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_LocalIconType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynUriType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_FoldType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_UserItemType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynModuleType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionVoteType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionVoteState: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleBannerType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleAuthorBadgeType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ThreePointType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ThreePointAttentionStatus: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_TopType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_WeightType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_FollowType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ThumbType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_VoteStatus: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_RelationStatus: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_RepostType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_RcmdType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_CoverIcon: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_NoReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_NoReply: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynVideoReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_PlayurlParam: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynVideoReply: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_CardVideoDynList: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynamicItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_Module: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_Module.OneOf_ModuleItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleAuthor: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_UserInfo: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_OfficialVerify: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_VipInfo: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_VipLabel: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_LiveInfo: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_UserPendant: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_Nameplate: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DecorateCard: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DecoCardFan: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleDispute: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleDesc: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_Description: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleDescGoods: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleDynamic: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleDynamic.OneOf_ModuleItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynArchive: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_Dimension: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_VideoBadge: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynPGC: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_PGCSeason: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynCourSeason: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynCourBatch: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynForward: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynDraw: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynDrawItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynDrawTag: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynDrawTagItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynArticle: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynMusic: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynCommon: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynLive: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynMedialist: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynApplet: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynSubscription: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynLiveRcmd: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynUGCSeason: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynSubscriptionNew: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MdlDynSubscriptionNew.OneOf_Item: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleAdditional: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleAdditional.OneOf_Item: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionalPGC: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionalButton: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionalButtonStyle: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionalButtonInteractive: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionGoods: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_GoodsItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionVote: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionUgc: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionCommon: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionEsport: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionEsport.OneOf_Item: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionEsportMoba: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionEsportMobaStatus: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionEsportMobaStatusDesc: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MatchTeam: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionUP: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionalActSkin: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_HighlightText: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleExtend: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleExtendItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleExtendItem.OneOf_Extend: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ExtInfoTopic: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ExtInfoLBS: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ExtInfoHot: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ExtInfoGame: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ExtInfoCommon: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ExtInfoOGV: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_InfoOGV: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleInteraction: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_InteractionItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleStat: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleFold: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynAllReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_RcmdUPsParam: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdParam: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynAllReply: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynamicList: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_TopicList: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_TopicListItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_TopicButton: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_Unfollow: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_UnfollowUserItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynDetailsReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynDetailsReply: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynVideoPersonalReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynVideoPersonalReply: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_CardVideoUpList: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_UpListMoreLabel: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_UpListItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_UserItemStyle: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_CardVideoFollowList: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_FollowListItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_NewEP: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_Extend: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ExtendReply: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ExtendReplyParam: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleAuthorForward: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleAuthorForwardTitle: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleAd: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleBanner: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleBanner.OneOf_Item: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionVote2: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionVote2.OneOf_Item: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionVoteWord: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionVoteWordItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionVotePic: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionVotePicItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_AdditionVoteDefaule: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleItemNull: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleBannerUser: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleBannerUserItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleLikeUser: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_LikeUser: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_LikeInfo: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_LikeAnimation: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ThreePointItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ThreePointItem.OneOf_Item: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleAuthorBadgeButton: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ThreePointDefault: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ThreePointAutoPlay: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ThreePointShare: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ThreePointShareChannel: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ThreePointAttention: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ThreePointWait: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ThreePointDislike: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ThreePointFavorite: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ThreePointTop: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ThreePointComment: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_CommentDetail: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_Weight: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_WeightItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_WeightItem.OneOf_Item: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_WeightDislike: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_WeightButton: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleComment: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_CmtShowItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReply: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynThumbReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynFakeCardReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynFakeCardReply: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReply: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynAllPersonalReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynAllPersonalReply: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_TopAdditionUP: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynVoteReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynVoteReply: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_Relation: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MixUpListLiveItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_MixUpListItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_SortType: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReply: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynLightReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynLightReply: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynDetailReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynDetailReply: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_LikeListReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_LikeListReply: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_RepostListReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_RepostListRsp: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleShareInfo: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ShareChannel: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ShareReserve: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleRecommend: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynSpaceReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynSpaceRsp: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleTop: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleButtom: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynRcmdReq: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynRcmdReply: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynRegionRcmd: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_RcmdOption: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_DynRegionRcmdItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_ModuleRcmd: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_RcmdAuthor: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_RcmdItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_RcmdItem.OneOf_RcmdItem: @unchecked Sendable {}
extension Bilibili_App_Dynamic_V2_RcmdArchive: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bilibili.app.dynamic.v2"

extension Bilibili_App_Dynamic_V2_Refresh: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "refresh_new"),
    1: .same(proto: "refresh_history"),
  ]
}

extension Bilibili_App_Dynamic_V2_DynamicType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "dyn_none"),
    1: .same(proto: "forward"),
    2: .same(proto: "av"),
    3: .same(proto: "pgc"),
    4: .same(proto: "courses"),
    5: .same(proto: "fold"),
    6: .same(proto: "word"),
    7: .same(proto: "draw"),
    8: .same(proto: "article"),
    9: .same(proto: "music"),
    10: .same(proto: "common_square"),
    11: .same(proto: "common_vertical"),
    12: .same(proto: "live"),
    13: .same(proto: "medialist"),
    14: .same(proto: "courses_season"),
    15: .same(proto: "ad"),
    16: .same(proto: "applet"),
    17: .same(proto: "subscription"),
    18: .same(proto: "live_rcmd"),
    19: .same(proto: "banner"),
    20: .same(proto: "ugc_season"),
    21: .same(proto: "subscription_new"),
  ]
}

extension Bilibili_App_Dynamic_V2_LiveState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "live_none"),
    1: .same(proto: "live_live"),
    2: .same(proto: "live_rotation"),
  ]
}

extension Bilibili_App_Dynamic_V2_DescType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "desc_type_none"),
    1: .same(proto: "desc_type_text"),
    2: .same(proto: "desc_type_aite"),
    3: .same(proto: "desc_type_lottery"),
    4: .same(proto: "desc_type_vote"),
    5: .same(proto: "desc_type_topic"),
    6: .same(proto: "desc_type_goods"),
    7: .same(proto: "desc_type_bv"),
    8: .same(proto: "desc_type_av"),
    9: .same(proto: "desc_type_emoji"),
    10: .same(proto: "desc_type_user"),
    11: .same(proto: "desc_type_cv"),
    12: .same(proto: "desc_type_vc"),
    13: .same(proto: "desc_type_web"),
    14: .same(proto: "desc_type_taobao"),
    15: .same(proto: "desc_type_mail"),
    16: .same(proto: "desc_type_ogv_season"),
    17: .same(proto: "desc_type_ogv_ep"),
  ]
}

extension Bilibili_App_Dynamic_V2_EmojiType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "emoji_none"),
    1: .same(proto: "emoji_old"),
    2: .same(proto: "emoji_new"),
    3: .same(proto: "vip"),
  ]
}

extension Bilibili_App_Dynamic_V2_ModuleDynamicType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "mdl_dyn_archive"),
    1: .same(proto: "mdl_dyn_pgc"),
    2: .same(proto: "mdl_dyn_cour_season"),
    3: .same(proto: "mdl_dyn_cour_batch"),
    4: .same(proto: "mdl_dyn_forward"),
    5: .same(proto: "mdl_dyn_draw"),
    6: .same(proto: "mdl_dyn_article"),
    7: .same(proto: "mdl_dyn_music"),
    8: .same(proto: "mdl_dyn_common"),
    9: .same(proto: "mdl_dyn_live"),
    10: .same(proto: "mdl_dyn_medialist"),
    11: .same(proto: "mdl_dyn_applet"),
    12: .same(proto: "mdl_dyn_subscription"),
    13: .same(proto: "mdl_dyn_live_rcmd"),
    14: .same(proto: "mdl_dyn_ugc_season"),
    15: .same(proto: "mdl_dyn_subscription_new"),
  ]
}

extension Bilibili_App_Dynamic_V2_MediaType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MediaTypeNone"),
    1: .same(proto: "MediaTypeUGC"),
    2: .same(proto: "MediaTypePGC"),
    3: .same(proto: "MediaTypeLive"),
    4: .same(proto: "MediaTypeVCS"),
  ]
}

extension Bilibili_App_Dynamic_V2_ReserveType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "reserve_none"),
    1: .same(proto: "reserve_recall"),
  ]
}

extension Bilibili_App_Dynamic_V2_VideoType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "video_type_general"),
    1: .same(proto: "video_type_dynamic"),
    2: .same(proto: "video_type_playback"),
  ]
}

extension Bilibili_App_Dynamic_V2_VideoSubType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VideoSubTypeNone"),
    1: .same(proto: "VideoSubTypeBangumi"),
    2: .same(proto: "VideoSubTypeMovie"),
    3: .same(proto: "VideoSubTypeDocumentary"),
    4: .same(proto: "VideoSubTypeDomestic"),
    5: .same(proto: "VideoSubTypeTeleplay"),
  ]
}

extension Bilibili_App_Dynamic_V2_MdlDynDrawTagType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "mdl_draw_tag_none"),
    1: .same(proto: "mdl_draw_tag_common"),
    2: .same(proto: "mdl_draw_tag_goods"),
    3: .same(proto: "mdl_draw_tag_user"),
    4: .same(proto: "mdl_draw_tag_topic"),
    5: .same(proto: "mdl_draw_tag_lbs"),
  ]
}

extension Bilibili_App_Dynamic_V2_MdlDynCommonType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "mdl_dyn_common_none"),
    1: .same(proto: "mdl_dyn_common_square"),
    2: .same(proto: "mdl_dyn_common_vertica"),
  ]
}

extension Bilibili_App_Dynamic_V2_MdlDynSubscriptionNewStyle: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "mdl_dyn_subscription_new_style_nont"),
    1: .same(proto: "mdl_dyn_subscription_new_style_live"),
    2: .same(proto: "mdl_dyn_subscription_new_style_draw"),
  ]
}

extension Bilibili_App_Dynamic_V2_AdditionalType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "additional_none"),
    1: .same(proto: "additional_type_pgc"),
    2: .same(proto: "additional_type_goods"),
    3: .same(proto: "additional_type_vote"),
    4: .same(proto: "additional_type_common"),
    5: .same(proto: "additional_type_esport"),
    6: .same(proto: "additional_type_up_rcmd"),
    7: .same(proto: "additional_type_ugc"),
    8: .same(proto: "additional_type_up_reservation"),
  ]
}

extension Bilibili_App_Dynamic_V2_ImageStyle: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "add_style_vertical"),
    1: .same(proto: "add_style_square"),
  ]
}

extension Bilibili_App_Dynamic_V2_AddButtonType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "bt_none"),
    1: .same(proto: "bt_jump"),
    2: .same(proto: "bt_button"),
  ]
}

extension Bilibili_App_Dynamic_V2_AdditionalButtonStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "none"),
    1: .same(proto: "uncheck"),
    2: .same(proto: "check"),
  ]
}

extension Bilibili_App_Dynamic_V2_AdditionalButtonClickType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "click_none"),
    1: .same(proto: "click_up"),
  ]
}

extension Bilibili_App_Dynamic_V2_DisableState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "highlight"),
    1: .same(proto: "gary"),
  ]
}

extension Bilibili_App_Dynamic_V2_AddButtonBgStyle: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "fill"),
    1: .same(proto: "stroke"),
    2: .same(proto: "gray"),
  ]
}

extension Bilibili_App_Dynamic_V2_EspaceStyle: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "moba"),
  ]
}

extension Bilibili_App_Dynamic_V2_HighlightTextStyle: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "style_none"),
    1: .same(proto: "style_highlight"),
  ]
}

extension Bilibili_App_Dynamic_V2_DynExtendType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "dyn_ext_type_none"),
    1: .same(proto: "dyn_ext_type_topic"),
    2: .same(proto: "dyn_ext_type_lbs"),
    3: .same(proto: "dyn_ext_type_hot"),
    4: .same(proto: "dyn_ext_type_game"),
    5: .same(proto: "dyn_ext_type_common"),
    6: .same(proto: "dyn_ext_type_biliCut"),
    7: .same(proto: "dyn_ext_type_ogv"),
    8: .same(proto: "dyn_ext_type_auto_ogv"),
  ]
}

extension Bilibili_App_Dynamic_V2_LocalIconType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "local_icon_comment"),
    1: .same(proto: "local_icon_like"),
  ]
}

extension Bilibili_App_Dynamic_V2_DynUriType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "dyn_uri_type_none"),
    1: .same(proto: "dyn_uri_type_direct"),
    2: .same(proto: "dyn_uri_type_suffix"),
  ]
}

extension Bilibili_App_Dynamic_V2_FoldType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FoldTypeZore"),
    1: .same(proto: "FoldTypePublish"),
    2: .same(proto: "FoldTypeFrequent"),
    3: .same(proto: "FoldTypeUnite"),
    4: .same(proto: "FoldTypeLimit"),
  ]
}

extension Bilibili_App_Dynamic_V2_UserItemType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "user_item_type_none"),
    1: .same(proto: "user_item_type_live"),
    2: .same(proto: "user_item_type_live_custom"),
    3: .same(proto: "user_item_type_normal"),
    4: .same(proto: "user_item_type_extend"),
  ]
}

extension Bilibili_App_Dynamic_V2_DynModuleType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "module_none"),
    1: .same(proto: "module_author"),
    2: .same(proto: "module_dispute"),
    3: .same(proto: "module_desc"),
    4: .same(proto: "module_dynamic"),
    5: .same(proto: "module_forward"),
    6: .same(proto: "module_likeUser"),
    7: .same(proto: "module_extend"),
    8: .same(proto: "module_additional"),
    9: .same(proto: "module_stat"),
    10: .same(proto: "module_fold"),
    11: .same(proto: "module_comment"),
    12: .same(proto: "module_interaction"),
    13: .same(proto: "module_author_forward"),
    14: .same(proto: "module_ad"),
    15: .same(proto: "module_banner"),
    16: .same(proto: "module_item_null"),
    17: .same(proto: "module_share_info"),
    18: .same(proto: "module_recommend"),
    19: .same(proto: "module_stat_forward"),
    20: .same(proto: "module_top"),
    21: .same(proto: "module_bottom"),
  ]
}

extension Bilibili_App_Dynamic_V2_AdditionVoteType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "addition_vote_type_none"),
    1: .same(proto: "addition_vote_type_word"),
    2: .same(proto: "addition_vote_type_pic"),
    3: .same(proto: "addition_vote_type_default"),
  ]
}

extension Bilibili_App_Dynamic_V2_AdditionVoteState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "addition_vote_state_none"),
    1: .same(proto: "addition_vote_state_open"),
    2: .same(proto: "addition_vote_state_close"),
  ]
}

extension Bilibili_App_Dynamic_V2_ModuleBannerType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "module_banner_type_none"),
    1: .same(proto: "module_banner_type_user"),
  ]
}

extension Bilibili_App_Dynamic_V2_ModuleAuthorBadgeType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "module_author_badge_type_none"),
    1: .same(proto: "module_author_badge_type_threePoint"),
    2: .same(proto: "module_author_badge_type_button"),
    3: .same(proto: "module_author_badge_type_weight"),
  ]
}

extension Bilibili_App_Dynamic_V2_ThreePointType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "tp_none"),
    1: .same(proto: "background"),
    2: .same(proto: "auto_play"),
    3: .same(proto: "share"),
    4: .same(proto: "wait"),
    5: .same(proto: "attention"),
    6: .same(proto: "report"),
    7: .same(proto: "delete"),
    8: .same(proto: "dislike"),
    9: .same(proto: "favorite"),
    10: .same(proto: "top"),
    11: .same(proto: "comment"),
  ]
}

extension Bilibili_App_Dynamic_V2_ThreePointAttentionStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "tp_not_attention"),
    1: .same(proto: "tp_attention"),
  ]
}

extension Bilibili_App_Dynamic_V2_TopType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "top_none"),
    1: .same(proto: "top_cancel"),
  ]
}

extension Bilibili_App_Dynamic_V2_WeightType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "weight_none"),
    1: .same(proto: "weight_dislike"),
    2: .same(proto: "weight_jump"),
  ]
}

extension Bilibili_App_Dynamic_V2_FollowType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ft_not_follow"),
    1: .same(proto: "ft_follow"),
  ]
}

extension Bilibili_App_Dynamic_V2_ThumbType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "cancel"),
    1: .same(proto: "thumb"),
  ]
}

extension Bilibili_App_Dynamic_V2_VoteStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "normal"),
    1: .same(proto: "anonymous"),
  ]
}

extension Bilibili_App_Dynamic_V2_RelationStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "relation_status_none"),
    1: .same(proto: "relation_status_nofollow"),
    2: .same(proto: "relation_status_follow"),
    3: .same(proto: "relation_status_followed"),
    4: .same(proto: "relation_status_mutual_concern"),
    5: .same(proto: "relation_status_special"),
  ]
}

extension Bilibili_App_Dynamic_V2_RepostType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "repost_hot"),
    1: .same(proto: "repost_general"),
  ]
}

extension Bilibili_App_Dynamic_V2_RcmdType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "rcmd_archive"),
  ]
}

extension Bilibili_App_Dynamic_V2_CoverIcon: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "cover_icon_none"),
    1: .same(proto: "cover_icon_play"),
  ]
}

extension Bilibili_App_Dynamic_V2_NoReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NoReq"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_NoReq, rhs: Bilibili_App_Dynamic_V2_NoReq) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_NoReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NoReply"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_NoReply, rhs: Bilibili_App_Dynamic_V2_NoReply) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynVideoReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynVideoReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "update_baseline"),
    2: .same(proto: "offset"),
    3: .same(proto: "page"),
    4: .standard(proto: "refresh_type"),
    5: .standard(proto: "playurl_param"),
    6: .standard(proto: "assist_baseline"),
    7: .standard(proto: "local_time"),
    8: .same(proto: "from"),
    9: .standard(proto: "player_args"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.updateBaseline) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.offset) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.page) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.refreshType) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._playurlParam) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.assistBaseline) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.localTime) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._playerArgs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.updateBaseline.isEmpty {
      try visitor.visitSingularStringField(value: self.updateBaseline, fieldNumber: 1)
    }
    if !self.offset.isEmpty {
      try visitor.visitSingularStringField(value: self.offset, fieldNumber: 2)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 3)
    }
    if self.refreshType != .new {
      try visitor.visitSingularEnumField(value: self.refreshType, fieldNumber: 4)
    }
    try { if let v = self._playurlParam {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.assistBaseline.isEmpty {
      try visitor.visitSingularStringField(value: self.assistBaseline, fieldNumber: 6)
    }
    if self.localTime != 0 {
      try visitor.visitSingularInt32Field(value: self.localTime, fieldNumber: 7)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 8)
    }
    try { if let v = self._playerArgs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynVideoReq, rhs: Bilibili_App_Dynamic_V2_DynVideoReq) -> Bool {
    if lhs.updateBaseline != rhs.updateBaseline {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.page != rhs.page {return false}
    if lhs.refreshType != rhs.refreshType {return false}
    if lhs._playurlParam != rhs._playurlParam {return false}
    if lhs.assistBaseline != rhs.assistBaseline {return false}
    if lhs.localTime != rhs.localTime {return false}
    if lhs.from != rhs.from {return false}
    if lhs._playerArgs != rhs._playerArgs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_PlayurlParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayurlParam"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "qn"),
    2: .same(proto: "fnver"),
    3: .same(proto: "fnval"),
    4: .standard(proto: "force_host"),
    5: .same(proto: "fourk"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.qn) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.fnver) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.fnval) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.forceHost) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.fourk) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.qn != 0 {
      try visitor.visitSingularInt32Field(value: self.qn, fieldNumber: 1)
    }
    if self.fnver != 0 {
      try visitor.visitSingularInt32Field(value: self.fnver, fieldNumber: 2)
    }
    if self.fnval != 0 {
      try visitor.visitSingularInt32Field(value: self.fnval, fieldNumber: 3)
    }
    if self.forceHost != 0 {
      try visitor.visitSingularInt32Field(value: self.forceHost, fieldNumber: 4)
    }
    if self.fourk != 0 {
      try visitor.visitSingularInt32Field(value: self.fourk, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_PlayurlParam, rhs: Bilibili_App_Dynamic_V2_PlayurlParam) -> Bool {
    if lhs.qn != rhs.qn {return false}
    if lhs.fnver != rhs.fnver {return false}
    if lhs.fnval != rhs.fnval {return false}
    if lhs.forceHost != rhs.forceHost {return false}
    if lhs.fourk != rhs.fourk {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynVideoReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynVideoReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dynamic_list"),
    2: .standard(proto: "video_up_list"),
    3: .standard(proto: "video_follow_list"),
  ]

  fileprivate class _StorageClass {
    var _dynamicList: Bilibili_App_Dynamic_V2_CardVideoDynList? = nil
    var _videoUpList: Bilibili_App_Dynamic_V2_CardVideoUpList? = nil
    var _videoFollowList: Bilibili_App_Dynamic_V2_CardVideoFollowList? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _dynamicList = source._dynamicList
      _videoUpList = source._videoUpList
      _videoFollowList = source._videoFollowList
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._dynamicList) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._videoUpList) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._videoFollowList) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._dynamicList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._videoUpList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._videoFollowList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynVideoReply, rhs: Bilibili_App_Dynamic_V2_DynVideoReply) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._dynamicList != rhs_storage._dynamicList {return false}
        if _storage._videoUpList != rhs_storage._videoUpList {return false}
        if _storage._videoFollowList != rhs_storage._videoFollowList {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_CardVideoDynList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CardVideoDynList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .standard(proto: "update_num"),
    3: .standard(proto: "history_offset"),
    4: .standard(proto: "update_baseline"),
    5: .standard(proto: "has_more"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.updateNum) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.historyOffset) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.updateBaseline) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.hasMore_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if self.updateNum != 0 {
      try visitor.visitSingularInt64Field(value: self.updateNum, fieldNumber: 2)
    }
    if !self.historyOffset.isEmpty {
      try visitor.visitSingularStringField(value: self.historyOffset, fieldNumber: 3)
    }
    if !self.updateBaseline.isEmpty {
      try visitor.visitSingularStringField(value: self.updateBaseline, fieldNumber: 4)
    }
    if self.hasMore_p != false {
      try visitor.visitSingularBoolField(value: self.hasMore_p, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_CardVideoDynList, rhs: Bilibili_App_Dynamic_V2_CardVideoDynList) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.updateNum != rhs.updateNum {return false}
    if lhs.historyOffset != rhs.historyOffset {return false}
    if lhs.updateBaseline != rhs.updateBaseline {return false}
    if lhs.hasMore_p != rhs.hasMore_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynamicItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynamicItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "card_type"),
    2: .standard(proto: "item_type"),
    3: .same(proto: "modules"),
    4: .same(proto: "extend"),
    5: .standard(proto: "has_fold"),
    6: .standard(proto: "server_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.cardType) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.itemType) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.modules) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._extend) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.hasFold_p) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.serverInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.cardType != .dynNone {
      try visitor.visitSingularEnumField(value: self.cardType, fieldNumber: 1)
    }
    if self.itemType != .dynNone {
      try visitor.visitSingularEnumField(value: self.itemType, fieldNumber: 2)
    }
    if !self.modules.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.modules, fieldNumber: 3)
    }
    try { if let v = self._extend {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.hasFold_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasFold_p, fieldNumber: 5)
    }
    if !self.serverInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.serverInfo, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynamicItem, rhs: Bilibili_App_Dynamic_V2_DynamicItem) -> Bool {
    if lhs.cardType != rhs.cardType {return false}
    if lhs.itemType != rhs.itemType {return false}
    if lhs.modules != rhs.modules {return false}
    if lhs._extend != rhs._extend {return false}
    if lhs.hasFold_p != rhs.hasFold_p {return false}
    if lhs.serverInfo != rhs.serverInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_Module: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Module"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "module_type"),
    2: .standard(proto: "module_author"),
    3: .standard(proto: "module_dispute"),
    4: .standard(proto: "module_desc"),
    5: .standard(proto: "module_dynamic"),
    6: .standard(proto: "module_likeUser"),
    7: .standard(proto: "module_extend"),
    8: .standard(proto: "module_additional"),
    9: .standard(proto: "module_stat"),
    10: .standard(proto: "module_fold"),
    11: .standard(proto: "module_comment"),
    12: .standard(proto: "module_interaction"),
    13: .standard(proto: "module_author_forward"),
    14: .standard(proto: "module_ad"),
    15: .standard(proto: "module_banner"),
    16: .standard(proto: "module_item_null"),
    17: .standard(proto: "module_share_info"),
    18: .standard(proto: "module_recommend"),
    19: .standard(proto: "module_top"),
    20: .standard(proto: "module_buttom"),
    21: .standard(proto: "module_stat_forward"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.moduleType) }()
      case 2: try {
        var v: Bilibili_App_Dynamic_V2_ModuleAuthor?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleAuthor(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleAuthor(v)
        }
      }()
      case 3: try {
        var v: Bilibili_App_Dynamic_V2_ModuleDispute?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleDispute(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleDispute(v)
        }
      }()
      case 4: try {
        var v: Bilibili_App_Dynamic_V2_ModuleDesc?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleDesc(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleDesc(v)
        }
      }()
      case 5: try {
        var v: Bilibili_App_Dynamic_V2_ModuleDynamic?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleDynamic(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleDynamic(v)
        }
      }()
      case 6: try {
        var v: Bilibili_App_Dynamic_V2_ModuleLikeUser?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleLikeUser(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleLikeUser(v)
        }
      }()
      case 7: try {
        var v: Bilibili_App_Dynamic_V2_ModuleExtend?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleExtend(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleExtend(v)
        }
      }()
      case 8: try {
        var v: Bilibili_App_Dynamic_V2_ModuleAdditional?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleAdditional(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleAdditional(v)
        }
      }()
      case 9: try {
        var v: Bilibili_App_Dynamic_V2_ModuleStat?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleStat(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleStat(v)
        }
      }()
      case 10: try {
        var v: Bilibili_App_Dynamic_V2_ModuleFold?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleFold(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleFold(v)
        }
      }()
      case 11: try {
        var v: Bilibili_App_Dynamic_V2_ModuleComment?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleComment(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleComment(v)
        }
      }()
      case 12: try {
        var v: Bilibili_App_Dynamic_V2_ModuleInteraction?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleInteraction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleInteraction(v)
        }
      }()
      case 13: try {
        var v: Bilibili_App_Dynamic_V2_ModuleAuthorForward?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleAuthorForward(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleAuthorForward(v)
        }
      }()
      case 14: try {
        var v: Bilibili_App_Dynamic_V2_ModuleAd?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleAd(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleAd(v)
        }
      }()
      case 15: try {
        var v: Bilibili_App_Dynamic_V2_ModuleBanner?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleBanner(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleBanner(v)
        }
      }()
      case 16: try {
        var v: Bilibili_App_Dynamic_V2_ModuleItemNull?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleItemNull(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleItemNull(v)
        }
      }()
      case 17: try {
        var v: Bilibili_App_Dynamic_V2_ModuleShareInfo?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleShareInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleShareInfo(v)
        }
      }()
      case 18: try {
        var v: Bilibili_App_Dynamic_V2_ModuleRecommend?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleRecommend(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleRecommend(v)
        }
      }()
      case 19: try {
        var v: Bilibili_App_Dynamic_V2_ModuleTop?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleTop(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleTop(v)
        }
      }()
      case 20: try {
        var v: Bilibili_App_Dynamic_V2_ModuleButtom?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleButtom(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleButtom(v)
        }
      }()
      case 21: try {
        var v: Bilibili_App_Dynamic_V2_ModuleStat?
        var hadOneofValue = false
        if let current = self.moduleItem {
          hadOneofValue = true
          if case .moduleStatForward(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.moduleItem = .moduleStatForward(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.moduleType != .moduleNone {
      try visitor.visitSingularEnumField(value: self.moduleType, fieldNumber: 1)
    }
    switch self.moduleItem {
    case .moduleAuthor?: try {
      guard case .moduleAuthor(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .moduleDispute?: try {
      guard case .moduleDispute(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .moduleDesc?: try {
      guard case .moduleDesc(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .moduleDynamic?: try {
      guard case .moduleDynamic(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .moduleLikeUser?: try {
      guard case .moduleLikeUser(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .moduleExtend?: try {
      guard case .moduleExtend(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .moduleAdditional?: try {
      guard case .moduleAdditional(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .moduleStat?: try {
      guard case .moduleStat(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .moduleFold?: try {
      guard case .moduleFold(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .moduleComment?: try {
      guard case .moduleComment(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .moduleInteraction?: try {
      guard case .moduleInteraction(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .moduleAuthorForward?: try {
      guard case .moduleAuthorForward(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .moduleAd?: try {
      guard case .moduleAd(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .moduleBanner?: try {
      guard case .moduleBanner(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .moduleItemNull?: try {
      guard case .moduleItemNull(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .moduleShareInfo?: try {
      guard case .moduleShareInfo(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case .moduleRecommend?: try {
      guard case .moduleRecommend(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
    }()
    case .moduleTop?: try {
      guard case .moduleTop(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
    }()
    case .moduleButtom?: try {
      guard case .moduleButtom(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    }()
    case .moduleStatForward?: try {
      guard case .moduleStatForward(let v)? = self.moduleItem else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_Module, rhs: Bilibili_App_Dynamic_V2_Module) -> Bool {
    if lhs.moduleType != rhs.moduleType {return false}
    if lhs.moduleItem != rhs.moduleItem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleAuthor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleAuthor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mid"),
    2: .standard(proto: "ptime_label_text"),
    3: .same(proto: "author"),
    4: .standard(proto: "decorate_card"),
    5: .same(proto: "uri"),
    6: .standard(proto: "tp_list"),
    7: .standard(proto: "badge_type"),
    8: .standard(proto: "badge_button"),
    9: .same(proto: "attend"),
    10: .same(proto: "relation"),
    11: .same(proto: "weight"),
    12: .standard(proto: "show_follow"),
    13: .standard(proto: "is_top"),
  ]

  fileprivate class _StorageClass {
    var _mid: Int64 = 0
    var _ptimeLabelText: String = String()
    var _author: Bilibili_App_Dynamic_V2_UserInfo? = nil
    var _decorateCard: Bilibili_App_Dynamic_V2_DecorateCard? = nil
    var _uri: String = String()
    var _tpList: [Bilibili_App_Dynamic_V2_ThreePointItem] = []
    var _badgeType: Bilibili_App_Dynamic_V2_ModuleAuthorBadgeType = .none
    var _badgeButton: Bilibili_App_Dynamic_V2_ModuleAuthorBadgeButton? = nil
    var _attend: Int32 = 0
    var _relation: Bilibili_App_Dynamic_V2_Relation? = nil
    var _weight: Bilibili_App_Dynamic_V2_Weight? = nil
    var _showFollow: Bool = false
    var _isTop: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mid = source._mid
      _ptimeLabelText = source._ptimeLabelText
      _author = source._author
      _decorateCard = source._decorateCard
      _uri = source._uri
      _tpList = source._tpList
      _badgeType = source._badgeType
      _badgeButton = source._badgeButton
      _attend = source._attend
      _relation = source._relation
      _weight = source._weight
      _showFollow = source._showFollow
      _isTop = source._isTop
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._mid) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._ptimeLabelText) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._author) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._decorateCard) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._uri) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._tpList) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._badgeType) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._badgeButton) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._attend) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._relation) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._weight) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._showFollow) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._isTop) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._mid != 0 {
        try visitor.visitSingularInt64Field(value: _storage._mid, fieldNumber: 1)
      }
      if !_storage._ptimeLabelText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ptimeLabelText, fieldNumber: 2)
      }
      try { if let v = _storage._author {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._decorateCard {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 5)
      }
      if !_storage._tpList.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tpList, fieldNumber: 6)
      }
      if _storage._badgeType != .none {
        try visitor.visitSingularEnumField(value: _storage._badgeType, fieldNumber: 7)
      }
      try { if let v = _storage._badgeButton {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if _storage._attend != 0 {
        try visitor.visitSingularInt32Field(value: _storage._attend, fieldNumber: 9)
      }
      try { if let v = _storage._relation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._weight {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      if _storage._showFollow != false {
        try visitor.visitSingularBoolField(value: _storage._showFollow, fieldNumber: 12)
      }
      if _storage._isTop != false {
        try visitor.visitSingularBoolField(value: _storage._isTop, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleAuthor, rhs: Bilibili_App_Dynamic_V2_ModuleAuthor) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mid != rhs_storage._mid {return false}
        if _storage._ptimeLabelText != rhs_storage._ptimeLabelText {return false}
        if _storage._author != rhs_storage._author {return false}
        if _storage._decorateCard != rhs_storage._decorateCard {return false}
        if _storage._uri != rhs_storage._uri {return false}
        if _storage._tpList != rhs_storage._tpList {return false}
        if _storage._badgeType != rhs_storage._badgeType {return false}
        if _storage._badgeButton != rhs_storage._badgeButton {return false}
        if _storage._attend != rhs_storage._attend {return false}
        if _storage._relation != rhs_storage._relation {return false}
        if _storage._weight != rhs_storage._weight {return false}
        if _storage._showFollow != rhs_storage._showFollow {return false}
        if _storage._isTop != rhs_storage._isTop {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_UserInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mid"),
    2: .same(proto: "name"),
    3: .same(proto: "face"),
    4: .same(proto: "official"),
    5: .same(proto: "vip"),
    6: .same(proto: "live"),
    7: .same(proto: "uri"),
    8: .same(proto: "pendant"),
    9: .same(proto: "nameplate"),
    10: .same(proto: "level"),
    11: .same(proto: "sign"),
  ]

  fileprivate class _StorageClass {
    var _mid: Int64 = 0
    var _name: String = String()
    var _face: String = String()
    var _official: Bilibili_App_Dynamic_V2_OfficialVerify? = nil
    var _vip: Bilibili_App_Dynamic_V2_VipInfo? = nil
    var _live: Bilibili_App_Dynamic_V2_LiveInfo? = nil
    var _uri: String = String()
    var _pendant: Bilibili_App_Dynamic_V2_UserPendant? = nil
    var _nameplate: Bilibili_App_Dynamic_V2_Nameplate? = nil
    var _level: Int32 = 0
    var _sign: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mid = source._mid
      _name = source._name
      _face = source._face
      _official = source._official
      _vip = source._vip
      _live = source._live
      _uri = source._uri
      _pendant = source._pendant
      _nameplate = source._nameplate
      _level = source._level
      _sign = source._sign
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._mid) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._face) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._official) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._vip) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._live) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._uri) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._pendant) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._nameplate) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._level) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._sign) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._mid != 0 {
        try visitor.visitSingularInt64Field(value: _storage._mid, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if !_storage._face.isEmpty {
        try visitor.visitSingularStringField(value: _storage._face, fieldNumber: 3)
      }
      try { if let v = _storage._official {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._vip {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._live {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 7)
      }
      try { if let v = _storage._pendant {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._nameplate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if _storage._level != 0 {
        try visitor.visitSingularInt32Field(value: _storage._level, fieldNumber: 10)
      }
      if !_storage._sign.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sign, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_UserInfo, rhs: Bilibili_App_Dynamic_V2_UserInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mid != rhs_storage._mid {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._face != rhs_storage._face {return false}
        if _storage._official != rhs_storage._official {return false}
        if _storage._vip != rhs_storage._vip {return false}
        if _storage._live != rhs_storage._live {return false}
        if _storage._uri != rhs_storage._uri {return false}
        if _storage._pendant != rhs_storage._pendant {return false}
        if _storage._nameplate != rhs_storage._nameplate {return false}
        if _storage._level != rhs_storage._level {return false}
        if _storage._sign != rhs_storage._sign {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_OfficialVerify: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OfficialVerify"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "desc"),
    3: .standard(proto: "is_atten"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.isAtten) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 1)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 2)
    }
    if self.isAtten != 0 {
      try visitor.visitSingularInt32Field(value: self.isAtten, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_OfficialVerify, rhs: Bilibili_App_Dynamic_V2_OfficialVerify) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.isAtten != rhs.isAtten {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_VipInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VipInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Type"),
    2: .same(proto: "status"),
    3: .standard(proto: "due_date"),
    4: .same(proto: "label"),
    5: .standard(proto: "theme_type"),
    6: .standard(proto: "avatar_subscript"),
    7: .standard(proto: "nickname_color"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.dueDate) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._label) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.themeType) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.avatarSubscript) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.nicknameColor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 1)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 2)
    }
    if self.dueDate != 0 {
      try visitor.visitSingularInt64Field(value: self.dueDate, fieldNumber: 3)
    }
    try { if let v = self._label {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.themeType != 0 {
      try visitor.visitSingularInt32Field(value: self.themeType, fieldNumber: 5)
    }
    if self.avatarSubscript != 0 {
      try visitor.visitSingularInt32Field(value: self.avatarSubscript, fieldNumber: 6)
    }
    if !self.nicknameColor.isEmpty {
      try visitor.visitSingularStringField(value: self.nicknameColor, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_VipInfo, rhs: Bilibili_App_Dynamic_V2_VipInfo) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.status != rhs.status {return false}
    if lhs.dueDate != rhs.dueDate {return false}
    if lhs._label != rhs._label {return false}
    if lhs.themeType != rhs.themeType {return false}
    if lhs.avatarSubscript != rhs.avatarSubscript {return false}
    if lhs.nicknameColor != rhs.nicknameColor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_VipLabel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VipLabel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "text"),
    3: .standard(proto: "label_theme"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.labelTheme) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    if !self.labelTheme.isEmpty {
      try visitor.visitSingularStringField(value: self.labelTheme, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_VipLabel, rhs: Bilibili_App_Dynamic_V2_VipLabel) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.text != rhs.text {return false}
    if lhs.labelTheme != rhs.labelTheme {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_LiveInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_living"),
    2: .same(proto: "uri"),
    3: .standard(proto: "live_state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.isLiving) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.liveState) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isLiving != 0 {
      try visitor.visitSingularInt32Field(value: self.isLiving, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    if self.liveState != .liveNone {
      try visitor.visitSingularEnumField(value: self.liveState, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_LiveInfo, rhs: Bilibili_App_Dynamic_V2_LiveInfo) -> Bool {
    if lhs.isLiving != rhs.isLiving {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.liveState != rhs.liveState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_UserPendant: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserPendant"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pid"),
    2: .same(proto: "name"),
    3: .same(proto: "image"),
    4: .same(proto: "expire"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.pid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.image) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.expire) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pid != 0 {
      try visitor.visitSingularInt64Field(value: self.pid, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 3)
    }
    if self.expire != 0 {
      try visitor.visitSingularInt64Field(value: self.expire, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_UserPendant, rhs: Bilibili_App_Dynamic_V2_UserPendant) -> Bool {
    if lhs.pid != rhs.pid {return false}
    if lhs.name != rhs.name {return false}
    if lhs.image != rhs.image {return false}
    if lhs.expire != rhs.expire {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_Nameplate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Nameplate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nid"),
    2: .same(proto: "name"),
    3: .same(proto: "image"),
    4: .standard(proto: "image_small"),
    5: .same(proto: "level"),
    6: .same(proto: "condition"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.nid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.image) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.imageSmall) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.level) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.condition) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.nid != 0 {
      try visitor.visitSingularInt64Field(value: self.nid, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 3)
    }
    if !self.imageSmall.isEmpty {
      try visitor.visitSingularStringField(value: self.imageSmall, fieldNumber: 4)
    }
    if !self.level.isEmpty {
      try visitor.visitSingularStringField(value: self.level, fieldNumber: 5)
    }
    if !self.condition.isEmpty {
      try visitor.visitSingularStringField(value: self.condition, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_Nameplate, rhs: Bilibili_App_Dynamic_V2_Nameplate) -> Bool {
    if lhs.nid != rhs.nid {return false}
    if lhs.name != rhs.name {return false}
    if lhs.image != rhs.image {return false}
    if lhs.imageSmall != rhs.imageSmall {return false}
    if lhs.level != rhs.level {return false}
    if lhs.condition != rhs.condition {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DecorateCard: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DecorateCard"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "card_url"),
    3: .standard(proto: "jump_url"),
    4: .same(proto: "fan"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cardURL) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.jumpURL) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._fan) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.cardURL.isEmpty {
      try visitor.visitSingularStringField(value: self.cardURL, fieldNumber: 2)
    }
    if !self.jumpURL.isEmpty {
      try visitor.visitSingularStringField(value: self.jumpURL, fieldNumber: 3)
    }
    try { if let v = self._fan {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DecorateCard, rhs: Bilibili_App_Dynamic_V2_DecorateCard) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.cardURL != rhs.cardURL {return false}
    if lhs.jumpURL != rhs.jumpURL {return false}
    if lhs._fan != rhs._fan {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DecoCardFan: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DecoCardFan"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_fan"),
    2: .same(proto: "number"),
    3: .standard(proto: "number_str"),
    4: .same(proto: "color"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.isFan) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.number) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.numberStr) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.color) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isFan != 0 {
      try visitor.visitSingularInt32Field(value: self.isFan, fieldNumber: 1)
    }
    if self.number != 0 {
      try visitor.visitSingularInt32Field(value: self.number, fieldNumber: 2)
    }
    if !self.numberStr.isEmpty {
      try visitor.visitSingularStringField(value: self.numberStr, fieldNumber: 3)
    }
    if !self.color.isEmpty {
      try visitor.visitSingularStringField(value: self.color, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DecoCardFan, rhs: Bilibili_App_Dynamic_V2_DecoCardFan) -> Bool {
    if lhs.isFan != rhs.isFan {return false}
    if lhs.number != rhs.number {return false}
    if lhs.numberStr != rhs.numberStr {return false}
    if lhs.color != rhs.color {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleDispute: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleDispute"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "desc"),
    3: .same(proto: "uri"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 2)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleDispute, rhs: Bilibili_App_Dynamic_V2_ModuleDispute) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleDesc: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleDesc"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "desc"),
    2: .standard(proto: "jump_uri"),
    3: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.desc) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.jumpUri) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.desc.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.desc, fieldNumber: 1)
    }
    if !self.jumpUri.isEmpty {
      try visitor.visitSingularStringField(value: self.jumpUri, fieldNumber: 2)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleDesc, rhs: Bilibili_App_Dynamic_V2_ModuleDesc) -> Bool {
    if lhs.desc != rhs.desc {return false}
    if lhs.jumpUri != rhs.jumpUri {return false}
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_Description: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Description"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "type"),
    3: .same(proto: "uri"),
    4: .standard(proto: "emoji_type"),
    5: .standard(proto: "goods_type"),
    6: .standard(proto: "icon_url"),
    7: .standard(proto: "icon_name"),
    8: .same(proto: "rid"),
    9: .same(proto: "goods"),
    10: .standard(proto: "orig_text"),
  ]

  fileprivate class _StorageClass {
    var _text: String = String()
    var _type: Bilibili_App_Dynamic_V2_DescType = .none
    var _uri: String = String()
    var _emojiType: Bilibili_App_Dynamic_V2_EmojiType = .emojiNone
    var _goodsType: String = String()
    var _iconURL: String = String()
    var _iconName: String = String()
    var _rid: String = String()
    var _goods: Bilibili_App_Dynamic_V2_ModuleDescGoods? = nil
    var _origText: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _text = source._text
      _type = source._type
      _uri = source._uri
      _emojiType = source._emojiType
      _goodsType = source._goodsType
      _iconURL = source._iconURL
      _iconName = source._iconName
      _rid = source._rid
      _goods = source._goods
      _origText = source._origText
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._text) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._type) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._uri) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._emojiType) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._goodsType) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._iconURL) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._iconName) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._rid) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._goods) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._origText) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._text.isEmpty {
        try visitor.visitSingularStringField(value: _storage._text, fieldNumber: 1)
      }
      if _storage._type != .none {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 2)
      }
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 3)
      }
      if _storage._emojiType != .emojiNone {
        try visitor.visitSingularEnumField(value: _storage._emojiType, fieldNumber: 4)
      }
      if !_storage._goodsType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._goodsType, fieldNumber: 5)
      }
      if !_storage._iconURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._iconURL, fieldNumber: 6)
      }
      if !_storage._iconName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._iconName, fieldNumber: 7)
      }
      if !_storage._rid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rid, fieldNumber: 8)
      }
      try { if let v = _storage._goods {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if !_storage._origText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._origText, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_Description, rhs: Bilibili_App_Dynamic_V2_Description) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._text != rhs_storage._text {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._uri != rhs_storage._uri {return false}
        if _storage._emojiType != rhs_storage._emojiType {return false}
        if _storage._goodsType != rhs_storage._goodsType {return false}
        if _storage._iconURL != rhs_storage._iconURL {return false}
        if _storage._iconName != rhs_storage._iconName {return false}
        if _storage._rid != rhs_storage._rid {return false}
        if _storage._goods != rhs_storage._goods {return false}
        if _storage._origText != rhs_storage._origText {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleDescGoods: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleDescGoods"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_type"),
    2: .standard(proto: "jump_url"),
    3: .standard(proto: "schema_url"),
    4: .standard(proto: "item_id"),
    5: .standard(proto: "open_white_list"),
    6: .standard(proto: "user_web_v2"),
    7: .standard(proto: "ad_mark"),
    8: .standard(proto: "schema_package_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.sourceType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.jumpURL) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.schemaURL) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.itemID) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.openWhiteList) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.userWebV2) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.adMark) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.schemaPackageName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sourceType != 0 {
      try visitor.visitSingularInt32Field(value: self.sourceType, fieldNumber: 1)
    }
    if !self.jumpURL.isEmpty {
      try visitor.visitSingularStringField(value: self.jumpURL, fieldNumber: 2)
    }
    if !self.schemaURL.isEmpty {
      try visitor.visitSingularStringField(value: self.schemaURL, fieldNumber: 3)
    }
    if self.itemID != 0 {
      try visitor.visitSingularInt64Field(value: self.itemID, fieldNumber: 4)
    }
    if !self.openWhiteList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.openWhiteList, fieldNumber: 5)
    }
    if self.userWebV2 != false {
      try visitor.visitSingularBoolField(value: self.userWebV2, fieldNumber: 6)
    }
    if !self.adMark.isEmpty {
      try visitor.visitSingularStringField(value: self.adMark, fieldNumber: 7)
    }
    if !self.schemaPackageName.isEmpty {
      try visitor.visitSingularStringField(value: self.schemaPackageName, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleDescGoods, rhs: Bilibili_App_Dynamic_V2_ModuleDescGoods) -> Bool {
    if lhs.sourceType != rhs.sourceType {return false}
    if lhs.jumpURL != rhs.jumpURL {return false}
    if lhs.schemaURL != rhs.schemaURL {return false}
    if lhs.itemID != rhs.itemID {return false}
    if lhs.openWhiteList != rhs.openWhiteList {return false}
    if lhs.userWebV2 != rhs.userWebV2 {return false}
    if lhs.adMark != rhs.adMark {return false}
    if lhs.schemaPackageName != rhs.schemaPackageName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleDynamic: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleDynamic"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "dyn_archive"),
    3: .standard(proto: "dyn_pgc"),
    4: .standard(proto: "dyn_cour_season"),
    5: .standard(proto: "dyn_cour_batch"),
    6: .standard(proto: "dyn_forward"),
    7: .standard(proto: "dyn_draw"),
    8: .standard(proto: "dyn_article"),
    9: .standard(proto: "dyn_music"),
    10: .standard(proto: "dyn_common"),
    11: .standard(proto: "dyn_common_live"),
    12: .standard(proto: "dyn_medialist"),
    13: .standard(proto: "dyn_applet"),
    14: .standard(proto: "dyn_subscription"),
    15: .standard(proto: "dyn_live_rcmd"),
    16: .standard(proto: "dyn_ugc_season"),
    17: .standard(proto: "dyn_subscription_new"),
  ]

  fileprivate class _StorageClass {
    var _type: Bilibili_App_Dynamic_V2_ModuleDynamicType = .mdlDynArchive
    var _moduleItem: Bilibili_App_Dynamic_V2_ModuleDynamic.OneOf_ModuleItem?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _moduleItem = source._moduleItem
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._type) }()
        case 2: try {
          var v: Bilibili_App_Dynamic_V2_MdlDynArchive?
          var hadOneofValue = false
          if let current = _storage._moduleItem {
            hadOneofValue = true
            if case .dynArchive(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._moduleItem = .dynArchive(v)
          }
        }()
        case 3: try {
          var v: Bilibili_App_Dynamic_V2_MdlDynPGC?
          var hadOneofValue = false
          if let current = _storage._moduleItem {
            hadOneofValue = true
            if case .dynPgc(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._moduleItem = .dynPgc(v)
          }
        }()
        case 4: try {
          var v: Bilibili_App_Dynamic_V2_MdlDynCourSeason?
          var hadOneofValue = false
          if let current = _storage._moduleItem {
            hadOneofValue = true
            if case .dynCourSeason(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._moduleItem = .dynCourSeason(v)
          }
        }()
        case 5: try {
          var v: Bilibili_App_Dynamic_V2_MdlDynCourBatch?
          var hadOneofValue = false
          if let current = _storage._moduleItem {
            hadOneofValue = true
            if case .dynCourBatch(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._moduleItem = .dynCourBatch(v)
          }
        }()
        case 6: try {
          var v: Bilibili_App_Dynamic_V2_MdlDynForward?
          var hadOneofValue = false
          if let current = _storage._moduleItem {
            hadOneofValue = true
            if case .dynForward(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._moduleItem = .dynForward(v)
          }
        }()
        case 7: try {
          var v: Bilibili_App_Dynamic_V2_MdlDynDraw?
          var hadOneofValue = false
          if let current = _storage._moduleItem {
            hadOneofValue = true
            if case .dynDraw(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._moduleItem = .dynDraw(v)
          }
        }()
        case 8: try {
          var v: Bilibili_App_Dynamic_V2_MdlDynArticle?
          var hadOneofValue = false
          if let current = _storage._moduleItem {
            hadOneofValue = true
            if case .dynArticle(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._moduleItem = .dynArticle(v)
          }
        }()
        case 9: try {
          var v: Bilibili_App_Dynamic_V2_MdlDynMusic?
          var hadOneofValue = false
          if let current = _storage._moduleItem {
            hadOneofValue = true
            if case .dynMusic(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._moduleItem = .dynMusic(v)
          }
        }()
        case 10: try {
          var v: Bilibili_App_Dynamic_V2_MdlDynCommon?
          var hadOneofValue = false
          if let current = _storage._moduleItem {
            hadOneofValue = true
            if case .dynCommon(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._moduleItem = .dynCommon(v)
          }
        }()
        case 11: try {
          var v: Bilibili_App_Dynamic_V2_MdlDynLive?
          var hadOneofValue = false
          if let current = _storage._moduleItem {
            hadOneofValue = true
            if case .dynCommonLive(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._moduleItem = .dynCommonLive(v)
          }
        }()
        case 12: try {
          var v: Bilibili_App_Dynamic_V2_MdlDynMedialist?
          var hadOneofValue = false
          if let current = _storage._moduleItem {
            hadOneofValue = true
            if case .dynMedialist(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._moduleItem = .dynMedialist(v)
          }
        }()
        case 13: try {
          var v: Bilibili_App_Dynamic_V2_MdlDynApplet?
          var hadOneofValue = false
          if let current = _storage._moduleItem {
            hadOneofValue = true
            if case .dynApplet(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._moduleItem = .dynApplet(v)
          }
        }()
        case 14: try {
          var v: Bilibili_App_Dynamic_V2_MdlDynSubscription?
          var hadOneofValue = false
          if let current = _storage._moduleItem {
            hadOneofValue = true
            if case .dynSubscription(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._moduleItem = .dynSubscription(v)
          }
        }()
        case 15: try {
          var v: Bilibili_App_Dynamic_V2_MdlDynLiveRcmd?
          var hadOneofValue = false
          if let current = _storage._moduleItem {
            hadOneofValue = true
            if case .dynLiveRcmd(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._moduleItem = .dynLiveRcmd(v)
          }
        }()
        case 16: try {
          var v: Bilibili_App_Dynamic_V2_MdlDynUGCSeason?
          var hadOneofValue = false
          if let current = _storage._moduleItem {
            hadOneofValue = true
            if case .dynUgcSeason(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._moduleItem = .dynUgcSeason(v)
          }
        }()
        case 17: try {
          var v: Bilibili_App_Dynamic_V2_MdlDynSubscriptionNew?
          var hadOneofValue = false
          if let current = _storage._moduleItem {
            hadOneofValue = true
            if case .dynSubscriptionNew(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._moduleItem = .dynSubscriptionNew(v)
          }
        }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._type != .mdlDynArchive {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      switch _storage._moduleItem {
      case .dynArchive?: try {
        guard case .dynArchive(let v)? = _storage._moduleItem else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }()
      case .dynPgc?: try {
        guard case .dynPgc(let v)? = _storage._moduleItem else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }()
      case .dynCourSeason?: try {
        guard case .dynCourSeason(let v)? = _storage._moduleItem else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }()
      case .dynCourBatch?: try {
        guard case .dynCourBatch(let v)? = _storage._moduleItem else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }()
      case .dynForward?: try {
        guard case .dynForward(let v)? = _storage._moduleItem else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }()
      case .dynDraw?: try {
        guard case .dynDraw(let v)? = _storage._moduleItem else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }()
      case .dynArticle?: try {
        guard case .dynArticle(let v)? = _storage._moduleItem else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }()
      case .dynMusic?: try {
        guard case .dynMusic(let v)? = _storage._moduleItem else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }()
      case .dynCommon?: try {
        guard case .dynCommon(let v)? = _storage._moduleItem else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }()
      case .dynCommonLive?: try {
        guard case .dynCommonLive(let v)? = _storage._moduleItem else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }()
      case .dynMedialist?: try {
        guard case .dynMedialist(let v)? = _storage._moduleItem else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }()
      case .dynApplet?: try {
        guard case .dynApplet(let v)? = _storage._moduleItem else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }()
      case .dynSubscription?: try {
        guard case .dynSubscription(let v)? = _storage._moduleItem else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }()
      case .dynLiveRcmd?: try {
        guard case .dynLiveRcmd(let v)? = _storage._moduleItem else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }()
      case .dynUgcSeason?: try {
        guard case .dynUgcSeason(let v)? = _storage._moduleItem else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }()
      case .dynSubscriptionNew?: try {
        guard case .dynSubscriptionNew(let v)? = _storage._moduleItem else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }()
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleDynamic, rhs: Bilibili_App_Dynamic_V2_ModuleDynamic) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._moduleItem != rhs_storage._moduleItem {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "cover"),
    3: .same(proto: "uri"),
    4: .standard(proto: "cover_left_text_1"),
    5: .standard(proto: "cover_left_text_2"),
    6: .standard(proto: "cover_left_text_3"),
    7: .same(proto: "avid"),
    8: .same(proto: "cid"),
    9: .standard(proto: "media_type"),
    10: .same(proto: "dimension"),
    11: .same(proto: "badge"),
    12: .standard(proto: "can_play"),
    13: .same(proto: "stype"),
    14: .same(proto: "isPGC"),
    15: .same(proto: "inlineURL"),
    16: .same(proto: "EpisodeId"),
    17: .same(proto: "SubType"),
    18: .same(proto: "PgcSeasonId"),
    19: .standard(proto: "play_icon"),
    20: .same(proto: "duration"),
    21: .standard(proto: "jump_url"),
    22: .standard(proto: "is_preview"),
    23: .standard(proto: "badge_category"),
    24: .standard(proto: "is_feature"),
    25: .standard(proto: "reserve_type"),
    26: .same(proto: "bvid"),
    27: .same(proto: "view"),
  ]

  fileprivate class _StorageClass {
    var _title: String = String()
    var _cover: String = String()
    var _uri: String = String()
    var _coverLeftText1: String = String()
    var _coverLeftText2: String = String()
    var _coverLeftText3: String = String()
    var _avid: Int64 = 0
    var _cid: Int64 = 0
    var _mediaType: Bilibili_App_Dynamic_V2_MediaType = .none
    var _dimension: Bilibili_App_Dynamic_V2_Dimension? = nil
    var _badge: [Bilibili_App_Dynamic_V2_VideoBadge] = []
    var _canPlay: Bool = false
    var _stype: Bilibili_App_Dynamic_V2_VideoType = .general
    var _isPgc: Bool = false
    var _inlineURL: String = String()
    var _episodeID: Int64 = 0
    var _subType: Int32 = 0
    var _pgcSeasonID: Int64 = 0
    var _playIcon: String = String()
    var _duration: Int64 = 0
    var _jumpURL: String = String()
    var _isPreview: Bool = false
    var _badgeCategory: [Bilibili_App_Dynamic_V2_VideoBadge] = []
    var _isFeature: Bool = false
    var _reserveType: Bilibili_App_Dynamic_V2_ReserveType = .reserveNone
    var _bvid: String = String()
    var _view: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _title = source._title
      _cover = source._cover
      _uri = source._uri
      _coverLeftText1 = source._coverLeftText1
      _coverLeftText2 = source._coverLeftText2
      _coverLeftText3 = source._coverLeftText3
      _avid = source._avid
      _cid = source._cid
      _mediaType = source._mediaType
      _dimension = source._dimension
      _badge = source._badge
      _canPlay = source._canPlay
      _stype = source._stype
      _isPgc = source._isPgc
      _inlineURL = source._inlineURL
      _episodeID = source._episodeID
      _subType = source._subType
      _pgcSeasonID = source._pgcSeasonID
      _playIcon = source._playIcon
      _duration = source._duration
      _jumpURL = source._jumpURL
      _isPreview = source._isPreview
      _badgeCategory = source._badgeCategory
      _isFeature = source._isFeature
      _reserveType = source._reserveType
      _bvid = source._bvid
      _view = source._view
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._cover) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._uri) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText1) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText2) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText3) }()
        case 7: try { try decoder.decodeSingularInt64Field(value: &_storage._avid) }()
        case 8: try { try decoder.decodeSingularInt64Field(value: &_storage._cid) }()
        case 9: try { try decoder.decodeSingularEnumField(value: &_storage._mediaType) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._dimension) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._badge) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._canPlay) }()
        case 13: try { try decoder.decodeSingularEnumField(value: &_storage._stype) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._isPgc) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._inlineURL) }()
        case 16: try { try decoder.decodeSingularInt64Field(value: &_storage._episodeID) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._subType) }()
        case 18: try { try decoder.decodeSingularInt64Field(value: &_storage._pgcSeasonID) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._playIcon) }()
        case 20: try { try decoder.decodeSingularInt64Field(value: &_storage._duration) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._jumpURL) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._isPreview) }()
        case 23: try { try decoder.decodeRepeatedMessageField(value: &_storage._badgeCategory) }()
        case 24: try { try decoder.decodeSingularBoolField(value: &_storage._isFeature) }()
        case 25: try { try decoder.decodeSingularEnumField(value: &_storage._reserveType) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._bvid) }()
        case 27: try { try decoder.decodeSingularInt32Field(value: &_storage._view) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 1)
      }
      if !_storage._cover.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cover, fieldNumber: 2)
      }
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 3)
      }
      if !_storage._coverLeftText1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText1, fieldNumber: 4)
      }
      if !_storage._coverLeftText2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText2, fieldNumber: 5)
      }
      if !_storage._coverLeftText3.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText3, fieldNumber: 6)
      }
      if _storage._avid != 0 {
        try visitor.visitSingularInt64Field(value: _storage._avid, fieldNumber: 7)
      }
      if _storage._cid != 0 {
        try visitor.visitSingularInt64Field(value: _storage._cid, fieldNumber: 8)
      }
      if _storage._mediaType != .none {
        try visitor.visitSingularEnumField(value: _storage._mediaType, fieldNumber: 9)
      }
      try { if let v = _storage._dimension {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if !_storage._badge.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._badge, fieldNumber: 11)
      }
      if _storage._canPlay != false {
        try visitor.visitSingularBoolField(value: _storage._canPlay, fieldNumber: 12)
      }
      if _storage._stype != .general {
        try visitor.visitSingularEnumField(value: _storage._stype, fieldNumber: 13)
      }
      if _storage._isPgc != false {
        try visitor.visitSingularBoolField(value: _storage._isPgc, fieldNumber: 14)
      }
      if !_storage._inlineURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._inlineURL, fieldNumber: 15)
      }
      if _storage._episodeID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._episodeID, fieldNumber: 16)
      }
      if _storage._subType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._subType, fieldNumber: 17)
      }
      if _storage._pgcSeasonID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._pgcSeasonID, fieldNumber: 18)
      }
      if !_storage._playIcon.isEmpty {
        try visitor.visitSingularStringField(value: _storage._playIcon, fieldNumber: 19)
      }
      if _storage._duration != 0 {
        try visitor.visitSingularInt64Field(value: _storage._duration, fieldNumber: 20)
      }
      if !_storage._jumpURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jumpURL, fieldNumber: 21)
      }
      if _storage._isPreview != false {
        try visitor.visitSingularBoolField(value: _storage._isPreview, fieldNumber: 22)
      }
      if !_storage._badgeCategory.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._badgeCategory, fieldNumber: 23)
      }
      if _storage._isFeature != false {
        try visitor.visitSingularBoolField(value: _storage._isFeature, fieldNumber: 24)
      }
      if _storage._reserveType != .reserveNone {
        try visitor.visitSingularEnumField(value: _storage._reserveType, fieldNumber: 25)
      }
      if !_storage._bvid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bvid, fieldNumber: 26)
      }
      if _storage._view != 0 {
        try visitor.visitSingularInt32Field(value: _storage._view, fieldNumber: 27)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynArchive, rhs: Bilibili_App_Dynamic_V2_MdlDynArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._title != rhs_storage._title {return false}
        if _storage._cover != rhs_storage._cover {return false}
        if _storage._uri != rhs_storage._uri {return false}
        if _storage._coverLeftText1 != rhs_storage._coverLeftText1 {return false}
        if _storage._coverLeftText2 != rhs_storage._coverLeftText2 {return false}
        if _storage._coverLeftText3 != rhs_storage._coverLeftText3 {return false}
        if _storage._avid != rhs_storage._avid {return false}
        if _storage._cid != rhs_storage._cid {return false}
        if _storage._mediaType != rhs_storage._mediaType {return false}
        if _storage._dimension != rhs_storage._dimension {return false}
        if _storage._badge != rhs_storage._badge {return false}
        if _storage._canPlay != rhs_storage._canPlay {return false}
        if _storage._stype != rhs_storage._stype {return false}
        if _storage._isPgc != rhs_storage._isPgc {return false}
        if _storage._inlineURL != rhs_storage._inlineURL {return false}
        if _storage._episodeID != rhs_storage._episodeID {return false}
        if _storage._subType != rhs_storage._subType {return false}
        if _storage._pgcSeasonID != rhs_storage._pgcSeasonID {return false}
        if _storage._playIcon != rhs_storage._playIcon {return false}
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._jumpURL != rhs_storage._jumpURL {return false}
        if _storage._isPreview != rhs_storage._isPreview {return false}
        if _storage._badgeCategory != rhs_storage._badgeCategory {return false}
        if _storage._isFeature != rhs_storage._isFeature {return false}
        if _storage._reserveType != rhs_storage._reserveType {return false}
        if _storage._bvid != rhs_storage._bvid {return false}
        if _storage._view != rhs_storage._view {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_Dimension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Dimension"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .same(proto: "width"),
    3: .same(proto: "rotate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.height) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.width) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.rotate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 1)
    }
    if self.width != 0 {
      try visitor.visitSingularInt64Field(value: self.width, fieldNumber: 2)
    }
    if self.rotate != 0 {
      try visitor.visitSingularInt64Field(value: self.rotate, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_Dimension, rhs: Bilibili_App_Dynamic_V2_Dimension) -> Bool {
    if lhs.height != rhs.height {return false}
    if lhs.width != rhs.width {return false}
    if lhs.rotate != rhs.rotate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_VideoBadge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VideoBadge"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .standard(proto: "text_color"),
    3: .standard(proto: "text_color_night"),
    4: .standard(proto: "bg_color"),
    5: .standard(proto: "bg_color_night"),
    6: .standard(proto: "border_color"),
    7: .standard(proto: "border_color_night"),
    8: .standard(proto: "bg_style"),
    9: .standard(proto: "bg_alpha"),
    10: .standard(proto: "bg_alpha_night"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.textColor) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.textColorNight) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.bgColor) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.bgColorNight) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.borderColor) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.borderColorNight) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.bgStyle) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.bgAlpha) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.bgAlphaNight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if !self.textColor.isEmpty {
      try visitor.visitSingularStringField(value: self.textColor, fieldNumber: 2)
    }
    if !self.textColorNight.isEmpty {
      try visitor.visitSingularStringField(value: self.textColorNight, fieldNumber: 3)
    }
    if !self.bgColor.isEmpty {
      try visitor.visitSingularStringField(value: self.bgColor, fieldNumber: 4)
    }
    if !self.bgColorNight.isEmpty {
      try visitor.visitSingularStringField(value: self.bgColorNight, fieldNumber: 5)
    }
    if !self.borderColor.isEmpty {
      try visitor.visitSingularStringField(value: self.borderColor, fieldNumber: 6)
    }
    if !self.borderColorNight.isEmpty {
      try visitor.visitSingularStringField(value: self.borderColorNight, fieldNumber: 7)
    }
    if self.bgStyle != 0 {
      try visitor.visitSingularInt32Field(value: self.bgStyle, fieldNumber: 8)
    }
    if self.bgAlpha != 0 {
      try visitor.visitSingularInt32Field(value: self.bgAlpha, fieldNumber: 9)
    }
    if self.bgAlphaNight != 0 {
      try visitor.visitSingularInt32Field(value: self.bgAlphaNight, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_VideoBadge, rhs: Bilibili_App_Dynamic_V2_VideoBadge) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.textColor != rhs.textColor {return false}
    if lhs.textColorNight != rhs.textColorNight {return false}
    if lhs.bgColor != rhs.bgColor {return false}
    if lhs.bgColorNight != rhs.bgColorNight {return false}
    if lhs.borderColor != rhs.borderColor {return false}
    if lhs.borderColorNight != rhs.borderColorNight {return false}
    if lhs.bgStyle != rhs.bgStyle {return false}
    if lhs.bgAlpha != rhs.bgAlpha {return false}
    if lhs.bgAlphaNight != rhs.bgAlphaNight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynPGC: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynPGC"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "cover"),
    3: .same(proto: "uri"),
    4: .standard(proto: "cover_left_text_1"),
    5: .standard(proto: "cover_left_text_2"),
    6: .standard(proto: "cover_left_text_3"),
    7: .same(proto: "cid"),
    8: .standard(proto: "season_id"),
    9: .same(proto: "epid"),
    10: .same(proto: "aid"),
    11: .standard(proto: "media_type"),
    12: .standard(proto: "sub_type"),
    13: .standard(proto: "is_preview"),
    14: .same(proto: "dimension"),
    15: .same(proto: "badge"),
    16: .standard(proto: "can_play"),
    17: .same(proto: "season"),
    18: .standard(proto: "play_icon"),
    19: .same(proto: "duration"),
    20: .standard(proto: "jump_url"),
    21: .standard(proto: "badge_category"),
    22: .standard(proto: "is_feature"),
  ]

  fileprivate class _StorageClass {
    var _title: String = String()
    var _cover: String = String()
    var _uri: String = String()
    var _coverLeftText1: String = String()
    var _coverLeftText2: String = String()
    var _coverLeftText3: String = String()
    var _cid: Int64 = 0
    var _seasonID: Int64 = 0
    var _epid: Int64 = 0
    var _aid: Int64 = 0
    var _mediaType: Bilibili_App_Dynamic_V2_MediaType = .none
    var _subType: Bilibili_App_Dynamic_V2_VideoSubType = .none
    var _isPreview: Bool = false
    var _dimension: Bilibili_App_Dynamic_V2_Dimension? = nil
    var _badge: [Bilibili_App_Dynamic_V2_VideoBadge] = []
    var _canPlay: Bool = false
    var _season: Bilibili_App_Dynamic_V2_PGCSeason? = nil
    var _playIcon: String = String()
    var _duration: Int64 = 0
    var _jumpURL: String = String()
    var _badgeCategory: [Bilibili_App_Dynamic_V2_VideoBadge] = []
    var _isFeature: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _title = source._title
      _cover = source._cover
      _uri = source._uri
      _coverLeftText1 = source._coverLeftText1
      _coverLeftText2 = source._coverLeftText2
      _coverLeftText3 = source._coverLeftText3
      _cid = source._cid
      _seasonID = source._seasonID
      _epid = source._epid
      _aid = source._aid
      _mediaType = source._mediaType
      _subType = source._subType
      _isPreview = source._isPreview
      _dimension = source._dimension
      _badge = source._badge
      _canPlay = source._canPlay
      _season = source._season
      _playIcon = source._playIcon
      _duration = source._duration
      _jumpURL = source._jumpURL
      _badgeCategory = source._badgeCategory
      _isFeature = source._isFeature
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._cover) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._uri) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText1) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText2) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText3) }()
        case 7: try { try decoder.decodeSingularInt64Field(value: &_storage._cid) }()
        case 8: try { try decoder.decodeSingularInt64Field(value: &_storage._seasonID) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._epid) }()
        case 10: try { try decoder.decodeSingularInt64Field(value: &_storage._aid) }()
        case 11: try { try decoder.decodeSingularEnumField(value: &_storage._mediaType) }()
        case 12: try { try decoder.decodeSingularEnumField(value: &_storage._subType) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._isPreview) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._dimension) }()
        case 15: try { try decoder.decodeRepeatedMessageField(value: &_storage._badge) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._canPlay) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._season) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._playIcon) }()
        case 19: try { try decoder.decodeSingularInt64Field(value: &_storage._duration) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._jumpURL) }()
        case 21: try { try decoder.decodeRepeatedMessageField(value: &_storage._badgeCategory) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._isFeature) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 1)
      }
      if !_storage._cover.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cover, fieldNumber: 2)
      }
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 3)
      }
      if !_storage._coverLeftText1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText1, fieldNumber: 4)
      }
      if !_storage._coverLeftText2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText2, fieldNumber: 5)
      }
      if !_storage._coverLeftText3.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText3, fieldNumber: 6)
      }
      if _storage._cid != 0 {
        try visitor.visitSingularInt64Field(value: _storage._cid, fieldNumber: 7)
      }
      if _storage._seasonID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._seasonID, fieldNumber: 8)
      }
      if _storage._epid != 0 {
        try visitor.visitSingularInt64Field(value: _storage._epid, fieldNumber: 9)
      }
      if _storage._aid != 0 {
        try visitor.visitSingularInt64Field(value: _storage._aid, fieldNumber: 10)
      }
      if _storage._mediaType != .none {
        try visitor.visitSingularEnumField(value: _storage._mediaType, fieldNumber: 11)
      }
      if _storage._subType != .none {
        try visitor.visitSingularEnumField(value: _storage._subType, fieldNumber: 12)
      }
      if _storage._isPreview != false {
        try visitor.visitSingularBoolField(value: _storage._isPreview, fieldNumber: 13)
      }
      try { if let v = _storage._dimension {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      if !_storage._badge.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._badge, fieldNumber: 15)
      }
      if _storage._canPlay != false {
        try visitor.visitSingularBoolField(value: _storage._canPlay, fieldNumber: 16)
      }
      try { if let v = _storage._season {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      if !_storage._playIcon.isEmpty {
        try visitor.visitSingularStringField(value: _storage._playIcon, fieldNumber: 18)
      }
      if _storage._duration != 0 {
        try visitor.visitSingularInt64Field(value: _storage._duration, fieldNumber: 19)
      }
      if !_storage._jumpURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jumpURL, fieldNumber: 20)
      }
      if !_storage._badgeCategory.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._badgeCategory, fieldNumber: 21)
      }
      if _storage._isFeature != false {
        try visitor.visitSingularBoolField(value: _storage._isFeature, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynPGC, rhs: Bilibili_App_Dynamic_V2_MdlDynPGC) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._title != rhs_storage._title {return false}
        if _storage._cover != rhs_storage._cover {return false}
        if _storage._uri != rhs_storage._uri {return false}
        if _storage._coverLeftText1 != rhs_storage._coverLeftText1 {return false}
        if _storage._coverLeftText2 != rhs_storage._coverLeftText2 {return false}
        if _storage._coverLeftText3 != rhs_storage._coverLeftText3 {return false}
        if _storage._cid != rhs_storage._cid {return false}
        if _storage._seasonID != rhs_storage._seasonID {return false}
        if _storage._epid != rhs_storage._epid {return false}
        if _storage._aid != rhs_storage._aid {return false}
        if _storage._mediaType != rhs_storage._mediaType {return false}
        if _storage._subType != rhs_storage._subType {return false}
        if _storage._isPreview != rhs_storage._isPreview {return false}
        if _storage._dimension != rhs_storage._dimension {return false}
        if _storage._badge != rhs_storage._badge {return false}
        if _storage._canPlay != rhs_storage._canPlay {return false}
        if _storage._season != rhs_storage._season {return false}
        if _storage._playIcon != rhs_storage._playIcon {return false}
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._jumpURL != rhs_storage._jumpURL {return false}
        if _storage._badgeCategory != rhs_storage._badgeCategory {return false}
        if _storage._isFeature != rhs_storage._isFeature {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_PGCSeason: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PGCSeason"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_finish"),
    2: .same(proto: "title"),
    3: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.isFinish) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isFinish != 0 {
      try visitor.visitSingularInt32Field(value: self.isFinish, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_PGCSeason, rhs: Bilibili_App_Dynamic_V2_PGCSeason) -> Bool {
    if lhs.isFinish != rhs.isFinish {return false}
    if lhs.title != rhs.title {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynCourSeason: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynCourSeason"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "cover"),
    3: .same(proto: "uri"),
    4: .standard(proto: "text_1"),
    5: .same(proto: "desc"),
    6: .same(proto: "badge"),
    7: .standard(proto: "play_icon"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cover) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.text1) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._badge) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.playIcon) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.cover.isEmpty {
      try visitor.visitSingularStringField(value: self.cover, fieldNumber: 2)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 3)
    }
    if !self.text1.isEmpty {
      try visitor.visitSingularStringField(value: self.text1, fieldNumber: 4)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 5)
    }
    try { if let v = self._badge {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if !self.playIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.playIcon, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynCourSeason, rhs: Bilibili_App_Dynamic_V2_MdlDynCourSeason) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.cover != rhs.cover {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.text1 != rhs.text1 {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs._badge != rhs._badge {return false}
    if lhs.playIcon != rhs.playIcon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynCourBatch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynCourBatch"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "cover"),
    3: .same(proto: "uri"),
    4: .standard(proto: "text_1"),
    5: .standard(proto: "text_2"),
    6: .same(proto: "badge"),
    7: .standard(proto: "play_icon"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cover) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.text1) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.text2) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._badge) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.playIcon) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.cover.isEmpty {
      try visitor.visitSingularStringField(value: self.cover, fieldNumber: 2)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 3)
    }
    if !self.text1.isEmpty {
      try visitor.visitSingularStringField(value: self.text1, fieldNumber: 4)
    }
    if !self.text2.isEmpty {
      try visitor.visitSingularStringField(value: self.text2, fieldNumber: 5)
    }
    try { if let v = self._badge {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if !self.playIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.playIcon, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynCourBatch, rhs: Bilibili_App_Dynamic_V2_MdlDynCourBatch) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.cover != rhs.cover {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.text1 != rhs.text1 {return false}
    if lhs.text2 != rhs.text2 {return false}
    if lhs._badge != rhs._badge {return false}
    if lhs.playIcon != rhs.playIcon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynForward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynForward"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
    2: .same(proto: "rtype"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._item) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.rtype) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._item {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.rtype != 0 {
      try visitor.visitSingularInt32Field(value: self.rtype, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynForward, rhs: Bilibili_App_Dynamic_V2_MdlDynForward) -> Bool {
    if lhs._item != rhs._item {return false}
    if lhs.rtype != rhs.rtype {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynDraw: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynDraw"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
    2: .same(proto: "uri"),
    3: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynDraw, rhs: Bilibili_App_Dynamic_V2_MdlDynDraw) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynDrawItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynDrawItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "src"),
    2: .same(proto: "width"),
    3: .same(proto: "height"),
    4: .same(proto: "size"),
    5: .same(proto: "tags"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.src) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.width) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.height) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.size) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.tags) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.src.isEmpty {
      try visitor.visitSingularStringField(value: self.src, fieldNumber: 1)
    }
    if self.width != 0 {
      try visitor.visitSingularInt64Field(value: self.width, fieldNumber: 2)
    }
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 3)
    }
    if self.size != 0 {
      try visitor.visitSingularFloatField(value: self.size, fieldNumber: 4)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tags, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynDrawItem, rhs: Bilibili_App_Dynamic_V2_MdlDynDrawItem) -> Bool {
    if lhs.src != rhs.src {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.size != rhs.size {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynDrawTag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynDrawTag"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "item"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._item) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != .mdlDrawTagNone {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    try { if let v = self._item {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynDrawTag, rhs: Bilibili_App_Dynamic_V2_MdlDynDrawTag) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs._item != rhs._item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynDrawTagItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynDrawTagItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "text"),
    3: .same(proto: "x"),
    4: .same(proto: "y"),
    5: .same(proto: "orientation"),
    6: .same(proto: "source"),
    7: .standard(proto: "item_id"),
    8: .same(proto: "mid"),
    9: .same(proto: "tid"),
    10: .same(proto: "poi"),
    11: .standard(proto: "schema_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.x) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.y) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.orientation) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.source) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.itemID) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.mid) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.tid) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.poi) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.schemaURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    if self.x != 0 {
      try visitor.visitSingularInt64Field(value: self.x, fieldNumber: 3)
    }
    if self.y != 0 {
      try visitor.visitSingularInt64Field(value: self.y, fieldNumber: 4)
    }
    if self.orientation != 0 {
      try visitor.visitSingularInt32Field(value: self.orientation, fieldNumber: 5)
    }
    if self.source != 0 {
      try visitor.visitSingularInt32Field(value: self.source, fieldNumber: 6)
    }
    if self.itemID != 0 {
      try visitor.visitSingularInt64Field(value: self.itemID, fieldNumber: 7)
    }
    if self.mid != 0 {
      try visitor.visitSingularInt64Field(value: self.mid, fieldNumber: 8)
    }
    if self.tid != 0 {
      try visitor.visitSingularInt64Field(value: self.tid, fieldNumber: 9)
    }
    if !self.poi.isEmpty {
      try visitor.visitSingularStringField(value: self.poi, fieldNumber: 10)
    }
    if !self.schemaURL.isEmpty {
      try visitor.visitSingularStringField(value: self.schemaURL, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynDrawTagItem, rhs: Bilibili_App_Dynamic_V2_MdlDynDrawTagItem) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.text != rhs.text {return false}
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.orientation != rhs.orientation {return false}
    if lhs.source != rhs.source {return false}
    if lhs.itemID != rhs.itemID {return false}
    if lhs.mid != rhs.mid {return false}
    if lhs.tid != rhs.tid {return false}
    if lhs.poi != rhs.poi {return false}
    if lhs.schemaURL != rhs.schemaURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynArticle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynArticle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "uri"),
    3: .same(proto: "title"),
    4: .same(proto: "desc"),
    5: .same(proto: "covers"),
    6: .same(proto: "label"),
    7: .same(proto: "templateID"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.covers) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.label) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.templateID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 4)
    }
    if !self.covers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.covers, fieldNumber: 5)
    }
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 6)
    }
    if self.templateID != 0 {
      try visitor.visitSingularInt32Field(value: self.templateID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynArticle, rhs: Bilibili_App_Dynamic_V2_MdlDynArticle) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.title != rhs.title {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.covers != rhs.covers {return false}
    if lhs.label != rhs.label {return false}
    if lhs.templateID != rhs.templateID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynMusic: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynMusic"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "uri"),
    3: .standard(proto: "up_id"),
    4: .same(proto: "title"),
    5: .same(proto: "cover"),
    6: .same(proto: "label1"),
    7: .same(proto: "upper"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.upID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.cover) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.label1) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.upper) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    if self.upID != 0 {
      try visitor.visitSingularInt64Field(value: self.upID, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 4)
    }
    if !self.cover.isEmpty {
      try visitor.visitSingularStringField(value: self.cover, fieldNumber: 5)
    }
    if !self.label1.isEmpty {
      try visitor.visitSingularStringField(value: self.label1, fieldNumber: 6)
    }
    if !self.upper.isEmpty {
      try visitor.visitSingularStringField(value: self.upper, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynMusic, rhs: Bilibili_App_Dynamic_V2_MdlDynMusic) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.upID != rhs.upID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.cover != rhs.cover {return false}
    if lhs.label1 != rhs.label1 {return false}
    if lhs.upper != rhs.upper {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynCommon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynCommon"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "oid"),
    2: .same(proto: "uri"),
    3: .same(proto: "title"),
    4: .same(proto: "desc"),
    5: .same(proto: "cover"),
    6: .same(proto: "label"),
    7: .same(proto: "bizType"),
    8: .same(proto: "sketchID"),
    9: .same(proto: "style"),
    10: .same(proto: "badge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.oid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.cover) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.label) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.bizType) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.sketchID) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.style) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.badge) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.oid != 0 {
      try visitor.visitSingularInt64Field(value: self.oid, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 4)
    }
    if !self.cover.isEmpty {
      try visitor.visitSingularStringField(value: self.cover, fieldNumber: 5)
    }
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 6)
    }
    if self.bizType != 0 {
      try visitor.visitSingularInt32Field(value: self.bizType, fieldNumber: 7)
    }
    if self.sketchID != 0 {
      try visitor.visitSingularInt64Field(value: self.sketchID, fieldNumber: 8)
    }
    if self.style != .mdlDynCommonNone {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 9)
    }
    if !self.badge.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.badge, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynCommon, rhs: Bilibili_App_Dynamic_V2_MdlDynCommon) -> Bool {
    if lhs.oid != rhs.oid {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.title != rhs.title {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.cover != rhs.cover {return false}
    if lhs.label != rhs.label {return false}
    if lhs.bizType != rhs.bizType {return false}
    if lhs.sketchID != rhs.sketchID {return false}
    if lhs.style != rhs.style {return false}
    if lhs.badge != rhs.badge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynLive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynLive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "uri"),
    3: .same(proto: "title"),
    4: .same(proto: "cover"),
    5: .standard(proto: "cover_label"),
    6: .standard(proto: "cover_label2"),
    7: .standard(proto: "live_state"),
    8: .same(proto: "badge"),
    9: .standard(proto: "reserve_type"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _uri: String = String()
    var _title: String = String()
    var _cover: String = String()
    var _coverLabel: String = String()
    var _coverLabel2: String = String()
    var _liveState: Bilibili_App_Dynamic_V2_LiveState = .liveNone
    var _badge: Bilibili_App_Dynamic_V2_VideoBadge? = nil
    var _reserveType: Bilibili_App_Dynamic_V2_ReserveType = .reserveNone

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _uri = source._uri
      _title = source._title
      _cover = source._cover
      _coverLabel = source._coverLabel
      _coverLabel2 = source._coverLabel2
      _liveState = source._liveState
      _badge = source._badge
      _reserveType = source._reserveType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._uri) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._cover) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._coverLabel) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._coverLabel2) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._liveState) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._badge) }()
        case 9: try { try decoder.decodeSingularEnumField(value: &_storage._reserveType) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 2)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 3)
      }
      if !_storage._cover.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cover, fieldNumber: 4)
      }
      if !_storage._coverLabel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLabel, fieldNumber: 5)
      }
      if !_storage._coverLabel2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLabel2, fieldNumber: 6)
      }
      if _storage._liveState != .liveNone {
        try visitor.visitSingularEnumField(value: _storage._liveState, fieldNumber: 7)
      }
      try { if let v = _storage._badge {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if _storage._reserveType != .reserveNone {
        try visitor.visitSingularEnumField(value: _storage._reserveType, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynLive, rhs: Bilibili_App_Dynamic_V2_MdlDynLive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._uri != rhs_storage._uri {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._cover != rhs_storage._cover {return false}
        if _storage._coverLabel != rhs_storage._coverLabel {return false}
        if _storage._coverLabel2 != rhs_storage._coverLabel2 {return false}
        if _storage._liveState != rhs_storage._liveState {return false}
        if _storage._badge != rhs_storage._badge {return false}
        if _storage._reserveType != rhs_storage._reserveType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynMedialist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynMedialist"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "uri"),
    3: .same(proto: "title"),
    4: .standard(proto: "sub_title"),
    5: .same(proto: "cover"),
    6: .standard(proto: "cover_type"),
    7: .same(proto: "badge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.subTitle) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.cover) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.coverType) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._badge) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.subTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.subTitle, fieldNumber: 4)
    }
    if !self.cover.isEmpty {
      try visitor.visitSingularStringField(value: self.cover, fieldNumber: 5)
    }
    if self.coverType != 0 {
      try visitor.visitSingularInt32Field(value: self.coverType, fieldNumber: 6)
    }
    try { if let v = self._badge {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynMedialist, rhs: Bilibili_App_Dynamic_V2_MdlDynMedialist) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.title != rhs.title {return false}
    if lhs.subTitle != rhs.subTitle {return false}
    if lhs.cover != rhs.cover {return false}
    if lhs.coverType != rhs.coverType {return false}
    if lhs._badge != rhs._badge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynApplet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynApplet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "uri"),
    4: .same(proto: "title"),
    5: .standard(proto: "sub_title"),
    6: .same(proto: "cover"),
    7: .same(proto: "icon"),
    8: .same(proto: "label"),
    9: .standard(proto: "button_title"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.subTitle) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.cover) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.label) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.buttonTitle) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 4)
    }
    if !self.subTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.subTitle, fieldNumber: 5)
    }
    if !self.cover.isEmpty {
      try visitor.visitSingularStringField(value: self.cover, fieldNumber: 6)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 7)
    }
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 8)
    }
    if !self.buttonTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.buttonTitle, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynApplet, rhs: Bilibili_App_Dynamic_V2_MdlDynApplet) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.title != rhs.title {return false}
    if lhs.subTitle != rhs.subTitle {return false}
    if lhs.cover != rhs.cover {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.label != rhs.label {return false}
    if lhs.buttonTitle != rhs.buttonTitle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynSubscription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynSubscription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "ad_id"),
    3: .same(proto: "uri"),
    4: .same(proto: "title"),
    5: .same(proto: "cover"),
    6: .standard(proto: "ad_title"),
    7: .same(proto: "badge"),
    8: .same(proto: "tips"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _adID: Int64 = 0
    var _uri: String = String()
    var _title: String = String()
    var _cover: String = String()
    var _adTitle: String = String()
    var _badge: Bilibili_App_Dynamic_V2_VideoBadge? = nil
    var _tips: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _adID = source._adID
      _uri = source._uri
      _title = source._title
      _cover = source._cover
      _adTitle = source._adTitle
      _badge = source._badge
      _tips = source._tips
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._adID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._uri) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._cover) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._adTitle) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._badge) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._tips) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._adID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._adID, fieldNumber: 2)
      }
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 3)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 4)
      }
      if !_storage._cover.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cover, fieldNumber: 5)
      }
      if !_storage._adTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._adTitle, fieldNumber: 6)
      }
      try { if let v = _storage._badge {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if !_storage._tips.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tips, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynSubscription, rhs: Bilibili_App_Dynamic_V2_MdlDynSubscription) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._adID != rhs_storage._adID {return false}
        if _storage._uri != rhs_storage._uri {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._cover != rhs_storage._cover {return false}
        if _storage._adTitle != rhs_storage._adTitle {return false}
        if _storage._badge != rhs_storage._badge {return false}
        if _storage._tips != rhs_storage._tips {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynLiveRcmd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynLiveRcmd"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
    2: .standard(proto: "reserve_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.reserveType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 1)
    }
    if self.reserveType != .reserveNone {
      try visitor.visitSingularEnumField(value: self.reserveType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynLiveRcmd, rhs: Bilibili_App_Dynamic_V2_MdlDynLiveRcmd) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.reserveType != rhs.reserveType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynUGCSeason: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynUGCSeason"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "cover"),
    3: .same(proto: "uri"),
    4: .standard(proto: "cover_left_text_1"),
    5: .standard(proto: "cover_left_text_2"),
    6: .standard(proto: "cover_left_text_3"),
    7: .same(proto: "id"),
    8: .same(proto: "inlineURL"),
    9: .standard(proto: "can_play"),
    10: .standard(proto: "play_icon"),
    11: .same(proto: "avid"),
    12: .same(proto: "cid"),
    13: .same(proto: "dimension"),
    14: .same(proto: "duration"),
    15: .standard(proto: "jump_url"),
  ]

  fileprivate class _StorageClass {
    var _title: String = String()
    var _cover: String = String()
    var _uri: String = String()
    var _coverLeftText1: String = String()
    var _coverLeftText2: String = String()
    var _coverLeftText3: String = String()
    var _id: Int64 = 0
    var _inlineURL: String = String()
    var _canPlay: Bool = false
    var _playIcon: String = String()
    var _avid: Int64 = 0
    var _cid: Int64 = 0
    var _dimension: Bilibili_App_Dynamic_V2_Dimension? = nil
    var _duration: Int64 = 0
    var _jumpURL: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _title = source._title
      _cover = source._cover
      _uri = source._uri
      _coverLeftText1 = source._coverLeftText1
      _coverLeftText2 = source._coverLeftText2
      _coverLeftText3 = source._coverLeftText3
      _id = source._id
      _inlineURL = source._inlineURL
      _canPlay = source._canPlay
      _playIcon = source._playIcon
      _avid = source._avid
      _cid = source._cid
      _dimension = source._dimension
      _duration = source._duration
      _jumpURL = source._jumpURL
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._cover) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._uri) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText1) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText2) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._coverLeftText3) }()
        case 7: try { try decoder.decodeSingularInt64Field(value: &_storage._id) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._inlineURL) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._canPlay) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._playIcon) }()
        case 11: try { try decoder.decodeSingularInt64Field(value: &_storage._avid) }()
        case 12: try { try decoder.decodeSingularInt64Field(value: &_storage._cid) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._dimension) }()
        case 14: try { try decoder.decodeSingularInt64Field(value: &_storage._duration) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._jumpURL) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 1)
      }
      if !_storage._cover.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cover, fieldNumber: 2)
      }
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 3)
      }
      if !_storage._coverLeftText1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText1, fieldNumber: 4)
      }
      if !_storage._coverLeftText2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText2, fieldNumber: 5)
      }
      if !_storage._coverLeftText3.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverLeftText3, fieldNumber: 6)
      }
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 7)
      }
      if !_storage._inlineURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._inlineURL, fieldNumber: 8)
      }
      if _storage._canPlay != false {
        try visitor.visitSingularBoolField(value: _storage._canPlay, fieldNumber: 9)
      }
      if !_storage._playIcon.isEmpty {
        try visitor.visitSingularStringField(value: _storage._playIcon, fieldNumber: 10)
      }
      if _storage._avid != 0 {
        try visitor.visitSingularInt64Field(value: _storage._avid, fieldNumber: 11)
      }
      if _storage._cid != 0 {
        try visitor.visitSingularInt64Field(value: _storage._cid, fieldNumber: 12)
      }
      try { if let v = _storage._dimension {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      if _storage._duration != 0 {
        try visitor.visitSingularInt64Field(value: _storage._duration, fieldNumber: 14)
      }
      if !_storage._jumpURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jumpURL, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynUGCSeason, rhs: Bilibili_App_Dynamic_V2_MdlDynUGCSeason) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._title != rhs_storage._title {return false}
        if _storage._cover != rhs_storage._cover {return false}
        if _storage._uri != rhs_storage._uri {return false}
        if _storage._coverLeftText1 != rhs_storage._coverLeftText1 {return false}
        if _storage._coverLeftText2 != rhs_storage._coverLeftText2 {return false}
        if _storage._coverLeftText3 != rhs_storage._coverLeftText3 {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._inlineURL != rhs_storage._inlineURL {return false}
        if _storage._canPlay != rhs_storage._canPlay {return false}
        if _storage._playIcon != rhs_storage._playIcon {return false}
        if _storage._avid != rhs_storage._avid {return false}
        if _storage._cid != rhs_storage._cid {return false}
        if _storage._dimension != rhs_storage._dimension {return false}
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._jumpURL != rhs_storage._jumpURL {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MdlDynSubscriptionNew: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MdlDynSubscriptionNew"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "style"),
    2: .standard(proto: "dyn_subscription"),
    3: .standard(proto: "dyn_live_rcmd"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.style) }()
      case 2: try {
        var v: Bilibili_App_Dynamic_V2_MdlDynSubscription?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .dynSubscription(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .dynSubscription(v)
        }
      }()
      case 3: try {
        var v: Bilibili_App_Dynamic_V2_MdlDynLiveRcmd?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .dynLiveRcmd(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .dynLiveRcmd(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.style != .nont {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 1)
    }
    switch self.item {
    case .dynSubscription?: try {
      guard case .dynSubscription(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .dynLiveRcmd?: try {
      guard case .dynLiveRcmd(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MdlDynSubscriptionNew, rhs: Bilibili_App_Dynamic_V2_MdlDynSubscriptionNew) -> Bool {
    if lhs.style != rhs.style {return false}
    if lhs.item != rhs.item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleAdditional: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleAdditional"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "pgc"),
    3: .same(proto: "goods"),
    4: .same(proto: "vote"),
    5: .same(proto: "common"),
    6: .same(proto: "esport"),
    8: .same(proto: "vote2"),
    9: .same(proto: "ugc"),
    10: .same(proto: "up"),
    7: .same(proto: "rid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try {
        var v: Bilibili_App_Dynamic_V2_AdditionalPGC?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .pgc(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .pgc(v)
        }
      }()
      case 3: try {
        var v: Bilibili_App_Dynamic_V2_AdditionGoods?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .goods(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .goods(v)
        }
      }()
      case 4: try {
        var v: Bilibili_App_Dynamic_V2_AdditionVote?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .vote(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .vote(v)
        }
      }()
      case 5: try {
        var v: Bilibili_App_Dynamic_V2_AdditionCommon?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .common(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .common(v)
        }
      }()
      case 6: try {
        var v: Bilibili_App_Dynamic_V2_AdditionEsport?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .esport(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .esport(v)
        }
      }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.rid) }()
      case 8: try {
        var v: Bilibili_App_Dynamic_V2_AdditionVote2?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .vote2(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .vote2(v)
        }
      }()
      case 9: try {
        var v: Bilibili_App_Dynamic_V2_AdditionUgc?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .ugc(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .ugc(v)
        }
      }()
      case 10: try {
        var v: Bilibili_App_Dynamic_V2_AdditionUP?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .up(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .up(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != .additionalNone {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    switch self.item {
    case .pgc?: try {
      guard case .pgc(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .goods?: try {
      guard case .goods(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .vote?: try {
      guard case .vote(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .common?: try {
      guard case .common(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .esport?: try {
      guard case .esport(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    default: break
    }
    if self.rid != 0 {
      try visitor.visitSingularInt64Field(value: self.rid, fieldNumber: 7)
    }
    switch self.item {
    case .vote2?: try {
      guard case .vote2(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .ugc?: try {
      guard case .ugc(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .up?: try {
      guard case .up(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    default: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleAdditional, rhs: Bilibili_App_Dynamic_V2_ModuleAdditional) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.item != rhs.item {return false}
    if lhs.rid != rhs.rid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionalPGC: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionalPGC"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "head_text"),
    2: .same(proto: "title"),
    3: .standard(proto: "image_url"),
    4: .standard(proto: "desc_text_1"),
    5: .standard(proto: "desc_text_2"),
    6: .same(proto: "url"),
    7: .same(proto: "button"),
    8: .standard(proto: "head_icon"),
    9: .same(proto: "style"),
    10: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.headText) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.imageURL) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.descText1) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.descText2) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._button) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.headIcon) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.style) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.headText.isEmpty {
      try visitor.visitSingularStringField(value: self.headText, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 3)
    }
    if !self.descText1.isEmpty {
      try visitor.visitSingularStringField(value: self.descText1, fieldNumber: 4)
    }
    if !self.descText2.isEmpty {
      try visitor.visitSingularStringField(value: self.descText2, fieldNumber: 5)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 6)
    }
    try { if let v = self._button {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if !self.headIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.headIcon, fieldNumber: 8)
    }
    if self.style != .addStyleVertical {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 9)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionalPGC, rhs: Bilibili_App_Dynamic_V2_AdditionalPGC) -> Bool {
    if lhs.headText != rhs.headText {return false}
    if lhs.title != rhs.title {return false}
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.descText1 != rhs.descText1 {return false}
    if lhs.descText2 != rhs.descText2 {return false}
    if lhs.url != rhs.url {return false}
    if lhs._button != rhs._button {return false}
    if lhs.headIcon != rhs.headIcon {return false}
    if lhs.style != rhs.style {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionalButton: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionalButton"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "jump_style"),
    3: .standard(proto: "jump_url"),
    4: .same(proto: "uncheck"),
    5: .same(proto: "check"),
    6: .same(proto: "status"),
    7: .standard(proto: "click_type"),
  ]

  fileprivate class _StorageClass {
    var _type: Bilibili_App_Dynamic_V2_AddButtonType = .btNone
    var _jumpStyle: Bilibili_App_Dynamic_V2_AdditionalButtonStyle? = nil
    var _jumpURL: String = String()
    var _uncheck: Bilibili_App_Dynamic_V2_AdditionalButtonStyle? = nil
    var _check: Bilibili_App_Dynamic_V2_AdditionalButtonStyle? = nil
    var _status: Bilibili_App_Dynamic_V2_AdditionalButtonStatus = .none
    var _clickType: Bilibili_App_Dynamic_V2_AdditionalButtonClickType = .clickNone

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _jumpStyle = source._jumpStyle
      _jumpURL = source._jumpURL
      _uncheck = source._uncheck
      _check = source._check
      _status = source._status
      _clickType = source._clickType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._type) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._jumpStyle) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._jumpURL) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._uncheck) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._check) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._status) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._clickType) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._type != .btNone {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      try { if let v = _storage._jumpStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._jumpURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jumpURL, fieldNumber: 3)
      }
      try { if let v = _storage._uncheck {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._check {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if _storage._status != .none {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 6)
      }
      if _storage._clickType != .clickNone {
        try visitor.visitSingularEnumField(value: _storage._clickType, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionalButton, rhs: Bilibili_App_Dynamic_V2_AdditionalButton) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._jumpStyle != rhs_storage._jumpStyle {return false}
        if _storage._jumpURL != rhs_storage._jumpURL {return false}
        if _storage._uncheck != rhs_storage._uncheck {return false}
        if _storage._check != rhs_storage._check {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._clickType != rhs_storage._clickType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionalButtonStyle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionalButtonStyle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "icon"),
    2: .same(proto: "text"),
    3: .same(proto: "interactive"),
    4: .standard(proto: "bg_style"),
    5: .same(proto: "toast"),
    6: .same(proto: "disable"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._interactive) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.bgStyle) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.toast) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.disable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    try { if let v = self._interactive {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.bgStyle != .fill {
      try visitor.visitSingularEnumField(value: self.bgStyle, fieldNumber: 4)
    }
    if !self.toast.isEmpty {
      try visitor.visitSingularStringField(value: self.toast, fieldNumber: 5)
    }
    if self.disable != .highlight {
      try visitor.visitSingularEnumField(value: self.disable, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionalButtonStyle, rhs: Bilibili_App_Dynamic_V2_AdditionalButtonStyle) -> Bool {
    if lhs.icon != rhs.icon {return false}
    if lhs.text != rhs.text {return false}
    if lhs._interactive != rhs._interactive {return false}
    if lhs.bgStyle != rhs.bgStyle {return false}
    if lhs.toast != rhs.toast {return false}
    if lhs.disable != rhs.disable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionalButtonInteractive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionalButtonInteractive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "popups"),
    2: .same(proto: "confirm"),
    3: .same(proto: "cancel"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.popups) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.confirm) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.cancel) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.popups.isEmpty {
      try visitor.visitSingularStringField(value: self.popups, fieldNumber: 1)
    }
    if !self.confirm.isEmpty {
      try visitor.visitSingularStringField(value: self.confirm, fieldNumber: 2)
    }
    if !self.cancel.isEmpty {
      try visitor.visitSingularStringField(value: self.cancel, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionalButtonInteractive, rhs: Bilibili_App_Dynamic_V2_AdditionalButtonInteractive) -> Bool {
    if lhs.popups != rhs.popups {return false}
    if lhs.confirm != rhs.confirm {return false}
    if lhs.cancel != rhs.cancel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionGoods: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionGoods"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rcmd_desc"),
    2: .standard(proto: "goods_items"),
    3: .standard(proto: "card_type"),
    4: .same(proto: "icon"),
    5: .same(proto: "uri"),
    6: .standard(proto: "source_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.rcmdDesc) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.goodsItems) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.cardType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.sourceType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rcmdDesc.isEmpty {
      try visitor.visitSingularStringField(value: self.rcmdDesc, fieldNumber: 1)
    }
    if !self.goodsItems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.goodsItems, fieldNumber: 2)
    }
    if !self.cardType.isEmpty {
      try visitor.visitSingularStringField(value: self.cardType, fieldNumber: 3)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 4)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 5)
    }
    if self.sourceType != 0 {
      try visitor.visitSingularInt32Field(value: self.sourceType, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionGoods, rhs: Bilibili_App_Dynamic_V2_AdditionGoods) -> Bool {
    if lhs.rcmdDesc != rhs.rcmdDesc {return false}
    if lhs.goodsItems != rhs.goodsItems {return false}
    if lhs.cardType != rhs.cardType {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.sourceType != rhs.sourceType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_GoodsItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GoodsItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cover"),
    2: .standard(proto: "schema_package_name"),
    3: .standard(proto: "source_type"),
    4: .standard(proto: "jump_url"),
    5: .standard(proto: "jump_desc"),
    6: .same(proto: "title"),
    7: .same(proto: "brief"),
    8: .same(proto: "price"),
    9: .standard(proto: "item_id"),
    10: .standard(proto: "schema_url"),
    11: .standard(proto: "open_white_list"),
    12: .standard(proto: "user_web_v2"),
    13: .standard(proto: "ad_mark"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cover) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.schemaPackageName) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.sourceType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.jumpURL) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.jumpDesc) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.brief) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.price) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.itemID) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.schemaURL) }()
      case 11: try { try decoder.decodeRepeatedStringField(value: &self.openWhiteList) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self.userWebV2) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.adMark) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cover.isEmpty {
      try visitor.visitSingularStringField(value: self.cover, fieldNumber: 1)
    }
    if !self.schemaPackageName.isEmpty {
      try visitor.visitSingularStringField(value: self.schemaPackageName, fieldNumber: 2)
    }
    if self.sourceType != 0 {
      try visitor.visitSingularInt32Field(value: self.sourceType, fieldNumber: 3)
    }
    if !self.jumpURL.isEmpty {
      try visitor.visitSingularStringField(value: self.jumpURL, fieldNumber: 4)
    }
    if !self.jumpDesc.isEmpty {
      try visitor.visitSingularStringField(value: self.jumpDesc, fieldNumber: 5)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 6)
    }
    if !self.brief.isEmpty {
      try visitor.visitSingularStringField(value: self.brief, fieldNumber: 7)
    }
    if !self.price.isEmpty {
      try visitor.visitSingularStringField(value: self.price, fieldNumber: 8)
    }
    if self.itemID != 0 {
      try visitor.visitSingularInt64Field(value: self.itemID, fieldNumber: 9)
    }
    if !self.schemaURL.isEmpty {
      try visitor.visitSingularStringField(value: self.schemaURL, fieldNumber: 10)
    }
    if !self.openWhiteList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.openWhiteList, fieldNumber: 11)
    }
    if self.userWebV2 != false {
      try visitor.visitSingularBoolField(value: self.userWebV2, fieldNumber: 12)
    }
    if !self.adMark.isEmpty {
      try visitor.visitSingularStringField(value: self.adMark, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_GoodsItem, rhs: Bilibili_App_Dynamic_V2_GoodsItem) -> Bool {
    if lhs.cover != rhs.cover {return false}
    if lhs.schemaPackageName != rhs.schemaPackageName {return false}
    if lhs.sourceType != rhs.sourceType {return false}
    if lhs.jumpURL != rhs.jumpURL {return false}
    if lhs.jumpDesc != rhs.jumpDesc {return false}
    if lhs.title != rhs.title {return false}
    if lhs.brief != rhs.brief {return false}
    if lhs.price != rhs.price {return false}
    if lhs.itemID != rhs.itemID {return false}
    if lhs.schemaURL != rhs.schemaURL {return false}
    if lhs.openWhiteList != rhs.openWhiteList {return false}
    if lhs.userWebV2 != rhs.userWebV2 {return false}
    if lhs.adMark != rhs.adMark {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionVote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionVote"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "image_url"),
    2: .same(proto: "title"),
    3: .standard(proto: "text_1"),
    4: .standard(proto: "button_text"),
    5: .same(proto: "url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.imageURL) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.text1) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.buttonText) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.text1.isEmpty {
      try visitor.visitSingularStringField(value: self.text1, fieldNumber: 3)
    }
    if !self.buttonText.isEmpty {
      try visitor.visitSingularStringField(value: self.buttonText, fieldNumber: 4)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionVote, rhs: Bilibili_App_Dynamic_V2_AdditionVote) -> Bool {
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.title != rhs.title {return false}
    if lhs.text1 != rhs.text1 {return false}
    if lhs.buttonText != rhs.buttonText {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionUgc: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionUgc"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "head_text"),
    2: .same(proto: "title"),
    3: .same(proto: "cover"),
    4: .standard(proto: "desc_text_1"),
    5: .standard(proto: "desc_text_2"),
    6: .same(proto: "uri"),
    7: .same(proto: "duration"),
    8: .standard(proto: "line_feed"),
    9: .standard(proto: "card_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.headText) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.cover) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.descText1) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.descText2) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.duration) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.lineFeed) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.cardType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.headText.isEmpty {
      try visitor.visitSingularStringField(value: self.headText, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.cover.isEmpty {
      try visitor.visitSingularStringField(value: self.cover, fieldNumber: 3)
    }
    if !self.descText1.isEmpty {
      try visitor.visitSingularStringField(value: self.descText1, fieldNumber: 4)
    }
    if !self.descText2.isEmpty {
      try visitor.visitSingularStringField(value: self.descText2, fieldNumber: 5)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 6)
    }
    if !self.duration.isEmpty {
      try visitor.visitSingularStringField(value: self.duration, fieldNumber: 7)
    }
    if self.lineFeed != false {
      try visitor.visitSingularBoolField(value: self.lineFeed, fieldNumber: 8)
    }
    if !self.cardType.isEmpty {
      try visitor.visitSingularStringField(value: self.cardType, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionUgc, rhs: Bilibili_App_Dynamic_V2_AdditionUgc) -> Bool {
    if lhs.headText != rhs.headText {return false}
    if lhs.title != rhs.title {return false}
    if lhs.cover != rhs.cover {return false}
    if lhs.descText1 != rhs.descText1 {return false}
    if lhs.descText2 != rhs.descText2 {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.lineFeed != rhs.lineFeed {return false}
    if lhs.cardType != rhs.cardType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionCommon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionCommon"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "head_text"),
    2: .same(proto: "title"),
    3: .standard(proto: "image_url"),
    4: .standard(proto: "desc_text_1"),
    5: .standard(proto: "desc_text_2"),
    6: .same(proto: "url"),
    7: .same(proto: "button"),
    8: .standard(proto: "head_icon"),
    9: .same(proto: "style"),
    10: .same(proto: "type"),
    11: .standard(proto: "card_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.headText) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.imageURL) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.descText1) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.descText2) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._button) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.headIcon) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.style) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.cardType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.headText.isEmpty {
      try visitor.visitSingularStringField(value: self.headText, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 3)
    }
    if !self.descText1.isEmpty {
      try visitor.visitSingularStringField(value: self.descText1, fieldNumber: 4)
    }
    if !self.descText2.isEmpty {
      try visitor.visitSingularStringField(value: self.descText2, fieldNumber: 5)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 6)
    }
    try { if let v = self._button {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if !self.headIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.headIcon, fieldNumber: 8)
    }
    if self.style != .addStyleVertical {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 9)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 10)
    }
    if !self.cardType.isEmpty {
      try visitor.visitSingularStringField(value: self.cardType, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionCommon, rhs: Bilibili_App_Dynamic_V2_AdditionCommon) -> Bool {
    if lhs.headText != rhs.headText {return false}
    if lhs.title != rhs.title {return false}
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.descText1 != rhs.descText1 {return false}
    if lhs.descText2 != rhs.descText2 {return false}
    if lhs.url != rhs.url {return false}
    if lhs._button != rhs._button {return false}
    if lhs.headIcon != rhs.headIcon {return false}
    if lhs.style != rhs.style {return false}
    if lhs.type != rhs.type {return false}
    if lhs.cardType != rhs.cardType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionEsport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionEsport"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "style"),
    2: .standard(proto: "addition_esport_moba"),
    3: .same(proto: "type"),
    4: .standard(proto: "card_type"),
  ]

  fileprivate class _StorageClass {
    var _style: Bilibili_App_Dynamic_V2_EspaceStyle = .moba
    var _item: Bilibili_App_Dynamic_V2_AdditionEsport.OneOf_Item?
    var _type: String = String()
    var _cardType: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _style = source._style
      _item = source._item
      _type = source._type
      _cardType = source._cardType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._style) }()
        case 2: try {
          var v: Bilibili_App_Dynamic_V2_AdditionEsportMoba?
          var hadOneofValue = false
          if let current = _storage._item {
            hadOneofValue = true
            if case .additionEsportMoba(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._item = .additionEsportMoba(v)
          }
        }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._type) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._cardType) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._style != .moba {
        try visitor.visitSingularEnumField(value: _storage._style, fieldNumber: 1)
      }
      try { if case .additionEsportMoba(let v)? = _storage._item {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 3)
      }
      if !_storage._cardType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cardType, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionEsport, rhs: Bilibili_App_Dynamic_V2_AdditionEsport) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._style != rhs_storage._style {return false}
        if _storage._item != rhs_storage._item {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._cardType != rhs_storage._cardType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionEsportMoba: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionEsportMoba"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "head_text"),
    2: .same(proto: "title"),
    3: .standard(proto: "match_team"),
    4: .standard(proto: "addition_esport_moba_status"),
    5: .same(proto: "uri"),
    6: .same(proto: "button"),
    7: .standard(proto: "sub_title"),
    10: .same(proto: "type"),
    11: .standard(proto: "card_type"),
    12: .standard(proto: "head_icon"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.headText) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.matchTeam) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._additionEsportMobaStatus) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._button) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.subTitle) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.cardType) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.headIcon) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.headText.isEmpty {
      try visitor.visitSingularStringField(value: self.headText, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.matchTeam.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.matchTeam, fieldNumber: 3)
    }
    try { if let v = self._additionEsportMobaStatus {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 5)
    }
    try { if let v = self._button {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if !self.subTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.subTitle, fieldNumber: 7)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 10)
    }
    if !self.cardType.isEmpty {
      try visitor.visitSingularStringField(value: self.cardType, fieldNumber: 11)
    }
    if !self.headIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.headIcon, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionEsportMoba, rhs: Bilibili_App_Dynamic_V2_AdditionEsportMoba) -> Bool {
    if lhs.headText != rhs.headText {return false}
    if lhs.title != rhs.title {return false}
    if lhs.matchTeam != rhs.matchTeam {return false}
    if lhs._additionEsportMobaStatus != rhs._additionEsportMobaStatus {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs._button != rhs._button {return false}
    if lhs.subTitle != rhs.subTitle {return false}
    if lhs.type != rhs.type {return false}
    if lhs.cardType != rhs.cardType {return false}
    if lhs.headIcon != rhs.headIcon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionEsportMobaStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionEsportMobaStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "addition_esport_moba_status_desc"),
    2: .same(proto: "title"),
    3: .same(proto: "status"),
    4: .same(proto: "color"),
    5: .standard(proto: "night_color"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.additionEsportMobaStatusDesc) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.color) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.nightColor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.additionEsportMobaStatusDesc.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionEsportMobaStatusDesc, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 3)
    }
    if !self.color.isEmpty {
      try visitor.visitSingularStringField(value: self.color, fieldNumber: 4)
    }
    if !self.nightColor.isEmpty {
      try visitor.visitSingularStringField(value: self.nightColor, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionEsportMobaStatus, rhs: Bilibili_App_Dynamic_V2_AdditionEsportMobaStatus) -> Bool {
    if lhs.additionEsportMobaStatusDesc != rhs.additionEsportMobaStatusDesc {return false}
    if lhs.title != rhs.title {return false}
    if lhs.status != rhs.status {return false}
    if lhs.color != rhs.color {return false}
    if lhs.nightColor != rhs.nightColor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionEsportMobaStatusDesc: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionEsportMobaStatusDesc"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "color"),
    3: .standard(proto: "night_color"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.color) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.nightColor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.color.isEmpty {
      try visitor.visitSingularStringField(value: self.color, fieldNumber: 2)
    }
    if !self.nightColor.isEmpty {
      try visitor.visitSingularStringField(value: self.nightColor, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionEsportMobaStatusDesc, rhs: Bilibili_App_Dynamic_V2_AdditionEsportMobaStatusDesc) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.color != rhs.color {return false}
    if lhs.nightColor != rhs.nightColor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MatchTeam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MatchTeam"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "cover"),
    4: .same(proto: "color"),
    5: .standard(proto: "night_color"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.cover) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.color) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.nightColor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.cover.isEmpty {
      try visitor.visitSingularStringField(value: self.cover, fieldNumber: 3)
    }
    if !self.color.isEmpty {
      try visitor.visitSingularStringField(value: self.color, fieldNumber: 4)
    }
    if !self.nightColor.isEmpty {
      try visitor.visitSingularStringField(value: self.nightColor, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MatchTeam, rhs: Bilibili_App_Dynamic_V2_MatchTeam) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.cover != rhs.cover {return false}
    if lhs.color != rhs.color {return false}
    if lhs.nightColor != rhs.nightColor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionUP: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionUP"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .standard(proto: "desc_text_1"),
    3: .standard(proto: "desc_text_2"),
    4: .same(proto: "url"),
    5: .same(proto: "button"),
    6: .standard(proto: "card_type"),
    7: .standard(proto: "reserve_total"),
    8: .standard(proto: "act_skin"),
    9: .same(proto: "rid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._descText1) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.descText2) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._button) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.cardType) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.reserveTotal) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._actSkin) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.rid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    try { if let v = self._descText1 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.descText2.isEmpty {
      try visitor.visitSingularStringField(value: self.descText2, fieldNumber: 3)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 4)
    }
    try { if let v = self._button {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.cardType.isEmpty {
      try visitor.visitSingularStringField(value: self.cardType, fieldNumber: 6)
    }
    if self.reserveTotal != 0 {
      try visitor.visitSingularInt64Field(value: self.reserveTotal, fieldNumber: 7)
    }
    try { if let v = self._actSkin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if self.rid != 0 {
      try visitor.visitSingularInt64Field(value: self.rid, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionUP, rhs: Bilibili_App_Dynamic_V2_AdditionUP) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs._descText1 != rhs._descText1 {return false}
    if lhs.descText2 != rhs.descText2 {return false}
    if lhs.url != rhs.url {return false}
    if lhs._button != rhs._button {return false}
    if lhs.cardType != rhs.cardType {return false}
    if lhs.reserveTotal != rhs.reserveTotal {return false}
    if lhs._actSkin != rhs._actSkin {return false}
    if lhs.rid != rhs.rid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionalActSkin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionalActSkin"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "svga"),
    2: .standard(proto: "last_image"),
    3: .standard(proto: "play_times"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.svga) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.lastImage) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.playTimes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.svga.isEmpty {
      try visitor.visitSingularStringField(value: self.svga, fieldNumber: 1)
    }
    if !self.lastImage.isEmpty {
      try visitor.visitSingularStringField(value: self.lastImage, fieldNumber: 2)
    }
    if self.playTimes != 0 {
      try visitor.visitSingularInt64Field(value: self.playTimes, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionalActSkin, rhs: Bilibili_App_Dynamic_V2_AdditionalActSkin) -> Bool {
    if lhs.svga != rhs.svga {return false}
    if lhs.lastImage != rhs.lastImage {return false}
    if lhs.playTimes != rhs.playTimes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_HighlightText: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HighlightText"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .standard(proto: "text_style"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.textStyle) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.textStyle != .styleNone {
      try visitor.visitSingularEnumField(value: self.textStyle, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_HighlightText, rhs: Bilibili_App_Dynamic_V2_HighlightText) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.textStyle != rhs.textStyle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleExtend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleExtend"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "extend"),
    2: .same(proto: "uri"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.extend) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.extend.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.extend, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleExtend, rhs: Bilibili_App_Dynamic_V2_ModuleExtend) -> Bool {
    if lhs.extend != rhs.extend {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleExtendItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleExtendItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "ext_info_topic"),
    3: .standard(proto: "ext_info_lbs"),
    4: .standard(proto: "ext_info_hot"),
    5: .standard(proto: "ext_info_game"),
    6: .standard(proto: "ext_info_common"),
    7: .standard(proto: "ext_info_ogv"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try {
        var v: Bilibili_App_Dynamic_V2_ExtInfoTopic?
        var hadOneofValue = false
        if let current = self.extend {
          hadOneofValue = true
          if case .extInfoTopic(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.extend = .extInfoTopic(v)
        }
      }()
      case 3: try {
        var v: Bilibili_App_Dynamic_V2_ExtInfoLBS?
        var hadOneofValue = false
        if let current = self.extend {
          hadOneofValue = true
          if case .extInfoLbs(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.extend = .extInfoLbs(v)
        }
      }()
      case 4: try {
        var v: Bilibili_App_Dynamic_V2_ExtInfoHot?
        var hadOneofValue = false
        if let current = self.extend {
          hadOneofValue = true
          if case .extInfoHot(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.extend = .extInfoHot(v)
        }
      }()
      case 5: try {
        var v: Bilibili_App_Dynamic_V2_ExtInfoGame?
        var hadOneofValue = false
        if let current = self.extend {
          hadOneofValue = true
          if case .extInfoGame(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.extend = .extInfoGame(v)
        }
      }()
      case 6: try {
        var v: Bilibili_App_Dynamic_V2_ExtInfoCommon?
        var hadOneofValue = false
        if let current = self.extend {
          hadOneofValue = true
          if case .extInfoCommon(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.extend = .extInfoCommon(v)
        }
      }()
      case 7: try {
        var v: Bilibili_App_Dynamic_V2_ExtInfoOGV?
        var hadOneofValue = false
        if let current = self.extend {
          hadOneofValue = true
          if case .extInfoOgv(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.extend = .extInfoOgv(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != .dynExtTypeNone {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    switch self.extend {
    case .extInfoTopic?: try {
      guard case .extInfoTopic(let v)? = self.extend else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .extInfoLbs?: try {
      guard case .extInfoLbs(let v)? = self.extend else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .extInfoHot?: try {
      guard case .extInfoHot(let v)? = self.extend else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .extInfoGame?: try {
      guard case .extInfoGame(let v)? = self.extend else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .extInfoCommon?: try {
      guard case .extInfoCommon(let v)? = self.extend else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .extInfoOgv?: try {
      guard case .extInfoOgv(let v)? = self.extend else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleExtendItem, rhs: Bilibili_App_Dynamic_V2_ModuleExtendItem) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.extend != rhs.extend {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ExtInfoTopic: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExtInfoTopic"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "uri"),
    3: .same(proto: "icon"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ExtInfoTopic, rhs: Bilibili_App_Dynamic_V2_ExtInfoTopic) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ExtInfoLBS: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExtInfoLBS"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "uri"),
    3: .same(proto: "icon"),
    4: .standard(proto: "poi_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.poiType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 3)
    }
    if self.poiType != 0 {
      try visitor.visitSingularInt32Field(value: self.poiType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ExtInfoLBS, rhs: Bilibili_App_Dynamic_V2_ExtInfoLBS) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.poiType != rhs.poiType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ExtInfoHot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExtInfoHot"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "uri"),
    3: .same(proto: "icon"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ExtInfoHot, rhs: Bilibili_App_Dynamic_V2_ExtInfoHot) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ExtInfoGame: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExtInfoGame"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "uri"),
    3: .same(proto: "icon"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ExtInfoGame, rhs: Bilibili_App_Dynamic_V2_ExtInfoGame) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ExtInfoCommon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExtInfoCommon"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "uri"),
    3: .same(proto: "icon"),
    4: .standard(proto: "poi_type"),
    5: .same(proto: "type"),
    6: .standard(proto: "sub_module"),
    7: .standard(proto: "action_text"),
    8: .standard(proto: "action_url"),
    9: .same(proto: "rid"),
    10: .standard(proto: "is_show_light"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.poiType) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.subModule) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.actionText) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.actionURL) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.rid) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.isShowLight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 3)
    }
    if self.poiType != 0 {
      try visitor.visitSingularInt32Field(value: self.poiType, fieldNumber: 4)
    }
    if self.type != .dynExtTypeNone {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 5)
    }
    if !self.subModule.isEmpty {
      try visitor.visitSingularStringField(value: self.subModule, fieldNumber: 6)
    }
    if !self.actionText.isEmpty {
      try visitor.visitSingularStringField(value: self.actionText, fieldNumber: 7)
    }
    if !self.actionURL.isEmpty {
      try visitor.visitSingularStringField(value: self.actionURL, fieldNumber: 8)
    }
    if self.rid != 0 {
      try visitor.visitSingularInt64Field(value: self.rid, fieldNumber: 9)
    }
    if self.isShowLight != false {
      try visitor.visitSingularBoolField(value: self.isShowLight, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ExtInfoCommon, rhs: Bilibili_App_Dynamic_V2_ExtInfoCommon) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.poiType != rhs.poiType {return false}
    if lhs.type != rhs.type {return false}
    if lhs.subModule != rhs.subModule {return false}
    if lhs.actionText != rhs.actionText {return false}
    if lhs.actionURL != rhs.actionURL {return false}
    if lhs.rid != rhs.rid {return false}
    if lhs.isShowLight != rhs.isShowLight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ExtInfoOGV: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExtInfoOGV"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "info_ogv"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.infoOgv) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.infoOgv.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.infoOgv, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ExtInfoOGV, rhs: Bilibili_App_Dynamic_V2_ExtInfoOGV) -> Bool {
    if lhs.infoOgv != rhs.infoOgv {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_InfoOGV: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InfoOGV"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "uri"),
    3: .same(proto: "icon"),
    4: .standard(proto: "sub_module"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.subModule) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 3)
    }
    if !self.subModule.isEmpty {
      try visitor.visitSingularStringField(value: self.subModule, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_InfoOGV, rhs: Bilibili_App_Dynamic_V2_InfoOGV) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.subModule != rhs.subModule {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleInteraction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleInteraction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "interactionItem"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.interactionItem) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.interactionItem.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.interactionItem, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleInteraction, rhs: Bilibili_App_Dynamic_V2_ModuleInteraction) -> Bool {
    if lhs.interactionItem != rhs.interactionItem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_InteractionItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InteractionItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "icon_type"),
    2: .same(proto: "desc"),
    3: .same(proto: "uri"),
    4: .standard(proto: "dynamic_id"),
    6: .standard(proto: "comment_mid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.iconType) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.desc) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.dynamicID) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.commentMid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.iconType != .localIconComment {
      try visitor.visitSingularEnumField(value: self.iconType, fieldNumber: 1)
    }
    if !self.desc.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.desc, fieldNumber: 2)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 3)
    }
    if !self.dynamicID.isEmpty {
      try visitor.visitSingularStringField(value: self.dynamicID, fieldNumber: 4)
    }
    if self.commentMid != 0 {
      try visitor.visitSingularInt64Field(value: self.commentMid, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_InteractionItem, rhs: Bilibili_App_Dynamic_V2_InteractionItem) -> Bool {
    if lhs.iconType != rhs.iconType {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.dynamicID != rhs.dynamicID {return false}
    if lhs.commentMid != rhs.commentMid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleStat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleStat"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "repost"),
    2: .same(proto: "like"),
    3: .same(proto: "reply"),
    4: .standard(proto: "like_info"),
    5: .standard(proto: "no_comment"),
    6: .standard(proto: "no_forward"),
    7: .standard(proto: "reply_url"),
    8: .standard(proto: "no_comment_text"),
    9: .standard(proto: "no_forward_text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.repost) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.like) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.reply) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._likeInfo) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.noComment) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.noForward) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.replyURL) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.noCommentText) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.noForwardText) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.repost != 0 {
      try visitor.visitSingularInt64Field(value: self.repost, fieldNumber: 1)
    }
    if self.like != 0 {
      try visitor.visitSingularInt64Field(value: self.like, fieldNumber: 2)
    }
    if self.reply != 0 {
      try visitor.visitSingularInt64Field(value: self.reply, fieldNumber: 3)
    }
    try { if let v = self._likeInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.noComment != false {
      try visitor.visitSingularBoolField(value: self.noComment, fieldNumber: 5)
    }
    if self.noForward != false {
      try visitor.visitSingularBoolField(value: self.noForward, fieldNumber: 6)
    }
    if !self.replyURL.isEmpty {
      try visitor.visitSingularStringField(value: self.replyURL, fieldNumber: 7)
    }
    if !self.noCommentText.isEmpty {
      try visitor.visitSingularStringField(value: self.noCommentText, fieldNumber: 8)
    }
    if !self.noForwardText.isEmpty {
      try visitor.visitSingularStringField(value: self.noForwardText, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleStat, rhs: Bilibili_App_Dynamic_V2_ModuleStat) -> Bool {
    if lhs.repost != rhs.repost {return false}
    if lhs.like != rhs.like {return false}
    if lhs.reply != rhs.reply {return false}
    if lhs._likeInfo != rhs._likeInfo {return false}
    if lhs.noComment != rhs.noComment {return false}
    if lhs.noForward != rhs.noForward {return false}
    if lhs.replyURL != rhs.replyURL {return false}
    if lhs.noCommentText != rhs.noCommentText {return false}
    if lhs.noForwardText != rhs.noForwardText {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleFold: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleFold"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fold_type"),
    2: .same(proto: "text"),
    3: .standard(proto: "fold_ids"),
    4: .standard(proto: "fold_users"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.foldType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.foldIds) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.foldUsers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.foldType != .zore {
      try visitor.visitSingularEnumField(value: self.foldType, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    if !self.foldIds.isEmpty {
      try visitor.visitSingularStringField(value: self.foldIds, fieldNumber: 3)
    }
    if !self.foldUsers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.foldUsers, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleFold, rhs: Bilibili_App_Dynamic_V2_ModuleFold) -> Bool {
    if lhs.foldType != rhs.foldType {return false}
    if lhs.text != rhs.text {return false}
    if lhs.foldIds != rhs.foldIds {return false}
    if lhs.foldUsers != rhs.foldUsers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynAllReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynAllReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "update_baseline"),
    2: .same(proto: "offset"),
    3: .same(proto: "page"),
    4: .standard(proto: "refresh_type"),
    5: .standard(proto: "playurl_param"),
    6: .standard(proto: "assist_baseline"),
    7: .standard(proto: "local_time"),
    8: .standard(proto: "rcmd_ups_param"),
    9: .standard(proto: "ad_param"),
    10: .standard(proto: "cold_start"),
    11: .same(proto: "from"),
    12: .standard(proto: "player_args"),
  ]

  fileprivate class _StorageClass {
    var _updateBaseline: String = String()
    var _offset: String = String()
    var _page: Int32 = 0
    var _refreshType: Bilibili_App_Dynamic_V2_Refresh = .new
    var _playurlParam: Bilibili_App_Dynamic_V2_PlayurlParam? = nil
    var _assistBaseline: String = String()
    var _localTime: Int32 = 0
    var _rcmdUpsParam: Bilibili_App_Dynamic_V2_RcmdUPsParam? = nil
    var _adParam: Bilibili_App_Dynamic_V2_AdParam? = nil
    var _coldStart: Int32 = 0
    var _from: String = String()
    var _playerArgs: Bilibili_App_Archive_Middleware_V1_PlayerArgs? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _updateBaseline = source._updateBaseline
      _offset = source._offset
      _page = source._page
      _refreshType = source._refreshType
      _playurlParam = source._playurlParam
      _assistBaseline = source._assistBaseline
      _localTime = source._localTime
      _rcmdUpsParam = source._rcmdUpsParam
      _adParam = source._adParam
      _coldStart = source._coldStart
      _from = source._from
      _playerArgs = source._playerArgs
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._updateBaseline) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._offset) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._page) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._refreshType) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._playurlParam) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._assistBaseline) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._localTime) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._rcmdUpsParam) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._adParam) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._coldStart) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._from) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._playerArgs) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._updateBaseline.isEmpty {
        try visitor.visitSingularStringField(value: _storage._updateBaseline, fieldNumber: 1)
      }
      if !_storage._offset.isEmpty {
        try visitor.visitSingularStringField(value: _storage._offset, fieldNumber: 2)
      }
      if _storage._page != 0 {
        try visitor.visitSingularInt32Field(value: _storage._page, fieldNumber: 3)
      }
      if _storage._refreshType != .new {
        try visitor.visitSingularEnumField(value: _storage._refreshType, fieldNumber: 4)
      }
      try { if let v = _storage._playurlParam {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if !_storage._assistBaseline.isEmpty {
        try visitor.visitSingularStringField(value: _storage._assistBaseline, fieldNumber: 6)
      }
      if _storage._localTime != 0 {
        try visitor.visitSingularInt32Field(value: _storage._localTime, fieldNumber: 7)
      }
      try { if let v = _storage._rcmdUpsParam {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._adParam {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if _storage._coldStart != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coldStart, fieldNumber: 10)
      }
      if !_storage._from.isEmpty {
        try visitor.visitSingularStringField(value: _storage._from, fieldNumber: 11)
      }
      try { if let v = _storage._playerArgs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynAllReq, rhs: Bilibili_App_Dynamic_V2_DynAllReq) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._updateBaseline != rhs_storage._updateBaseline {return false}
        if _storage._offset != rhs_storage._offset {return false}
        if _storage._page != rhs_storage._page {return false}
        if _storage._refreshType != rhs_storage._refreshType {return false}
        if _storage._playurlParam != rhs_storage._playurlParam {return false}
        if _storage._assistBaseline != rhs_storage._assistBaseline {return false}
        if _storage._localTime != rhs_storage._localTime {return false}
        if _storage._rcmdUpsParam != rhs_storage._rcmdUpsParam {return false}
        if _storage._adParam != rhs_storage._adParam {return false}
        if _storage._coldStart != rhs_storage._coldStart {return false}
        if _storage._from != rhs_storage._from {return false}
        if _storage._playerArgs != rhs_storage._playerArgs {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_RcmdUPsParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RcmdUPsParam"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dislike_ts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.dislikeTs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dislikeTs != 0 {
      try visitor.visitSingularInt64Field(value: self.dislikeTs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_RcmdUPsParam, rhs: Bilibili_App_Dynamic_V2_RcmdUPsParam) -> Bool {
    if lhs.dislikeTs != rhs.dislikeTs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdParam"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ad_extra"),
    2: .standard(proto: "request_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.adExtra) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.adExtra.isEmpty {
      try visitor.visitSingularStringField(value: self.adExtra, fieldNumber: 1)
    }
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdParam, rhs: Bilibili_App_Dynamic_V2_AdParam) -> Bool {
    if lhs.adExtra != rhs.adExtra {return false}
    if lhs.requestID != rhs.requestID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynAllReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynAllReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dynamic_list"),
    2: .standard(proto: "up_list"),
    3: .standard(proto: "topic_list"),
    4: .same(proto: "unfollow"),
    5: .standard(proto: "region_rcmd"),
  ]

  fileprivate class _StorageClass {
    var _dynamicList: Bilibili_App_Dynamic_V2_DynamicList? = nil
    var _upList: Bilibili_App_Dynamic_V2_CardVideoUpList? = nil
    var _topicList: Bilibili_App_Dynamic_V2_TopicList? = nil
    var _unfollow: Bilibili_App_Dynamic_V2_Unfollow? = nil
    var _regionRcmd: Bilibili_App_Dynamic_V2_DynRegionRcmd? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _dynamicList = source._dynamicList
      _upList = source._upList
      _topicList = source._topicList
      _unfollow = source._unfollow
      _regionRcmd = source._regionRcmd
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._dynamicList) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._upList) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._topicList) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._unfollow) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._regionRcmd) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._dynamicList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._upList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._topicList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._unfollow {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._regionRcmd {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynAllReply, rhs: Bilibili_App_Dynamic_V2_DynAllReply) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._dynamicList != rhs_storage._dynamicList {return false}
        if _storage._upList != rhs_storage._upList {return false}
        if _storage._topicList != rhs_storage._topicList {return false}
        if _storage._unfollow != rhs_storage._unfollow {return false}
        if _storage._regionRcmd != rhs_storage._regionRcmd {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynamicList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynamicList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .standard(proto: "update_num"),
    3: .standard(proto: "history_offset"),
    4: .standard(proto: "update_baseline"),
    5: .standard(proto: "has_more"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.updateNum) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.historyOffset) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.updateBaseline) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.hasMore_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if self.updateNum != 0 {
      try visitor.visitSingularInt64Field(value: self.updateNum, fieldNumber: 2)
    }
    if !self.historyOffset.isEmpty {
      try visitor.visitSingularStringField(value: self.historyOffset, fieldNumber: 3)
    }
    if !self.updateBaseline.isEmpty {
      try visitor.visitSingularStringField(value: self.updateBaseline, fieldNumber: 4)
    }
    if self.hasMore_p != false {
      try visitor.visitSingularBoolField(value: self.hasMore_p, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynamicList, rhs: Bilibili_App_Dynamic_V2_DynamicList) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.updateNum != rhs.updateNum {return false}
    if lhs.historyOffset != rhs.historyOffset {return false}
    if lhs.updateBaseline != rhs.updateBaseline {return false}
    if lhs.hasMore_p != rhs.hasMore_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_TopicList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TopicList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .standard(proto: "topic_list_item"),
    3: .standard(proto: "act_button"),
    4: .standard(proto: "more_button"),
    5: .standard(proto: "server_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.topicListItem) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._actButton) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._moreButton) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.serverInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.topicListItem.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.topicListItem, fieldNumber: 2)
    }
    try { if let v = self._actButton {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._moreButton {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.serverInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.serverInfo, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_TopicList, rhs: Bilibili_App_Dynamic_V2_TopicList) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.topicListItem != rhs.topicListItem {return false}
    if lhs._actButton != rhs._actButton {return false}
    if lhs._moreButton != rhs._moreButton {return false}
    if lhs.serverInfo != rhs.serverInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_TopicListItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TopicListItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "icon"),
    2: .standard(proto: "icon_title"),
    3: .standard(proto: "topic_id"),
    4: .standard(proto: "topic_name"),
    5: .same(proto: "url"),
    6: .same(proto: "pos"),
    7: .standard(proto: "server_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.iconTitle) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.topicID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.topicName) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.pos) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.serverInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 1)
    }
    if !self.iconTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.iconTitle, fieldNumber: 2)
    }
    if self.topicID != 0 {
      try visitor.visitSingularInt64Field(value: self.topicID, fieldNumber: 3)
    }
    if !self.topicName.isEmpty {
      try visitor.visitSingularStringField(value: self.topicName, fieldNumber: 4)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 5)
    }
    if self.pos != 0 {
      try visitor.visitSingularInt64Field(value: self.pos, fieldNumber: 6)
    }
    if !self.serverInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.serverInfo, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_TopicListItem, rhs: Bilibili_App_Dynamic_V2_TopicListItem) -> Bool {
    if lhs.icon != rhs.icon {return false}
    if lhs.iconTitle != rhs.iconTitle {return false}
    if lhs.topicID != rhs.topicID {return false}
    if lhs.topicName != rhs.topicName {return false}
    if lhs.url != rhs.url {return false}
    if lhs.pos != rhs.pos {return false}
    if lhs.serverInfo != rhs.serverInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_TopicButton: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TopicButton"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "icon"),
    2: .same(proto: "title"),
    3: .standard(proto: "jump_uri"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.jumpUri) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.jumpUri.isEmpty {
      try visitor.visitSingularStringField(value: self.jumpUri, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_TopicButton, rhs: Bilibili_App_Dynamic_V2_TopicButton) -> Bool {
    if lhs.icon != rhs.icon {return false}
    if lhs.title != rhs.title {return false}
    if lhs.jumpUri != rhs.jumpUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_Unfollow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Unfollow"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "list"),
    3: .same(proto: "TrackId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.trackID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 2)
    }
    if !self.trackID.isEmpty {
      try visitor.visitSingularStringField(value: self.trackID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_Unfollow, rhs: Bilibili_App_Dynamic_V2_Unfollow) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.list != rhs.list {return false}
    if lhs.trackID != rhs.trackID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_UnfollowUserItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UnfollowUserItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "has_update"),
    2: .same(proto: "face"),
    3: .same(proto: "name"),
    4: .same(proto: "uid"),
    5: .same(proto: "pos"),
    6: .standard(proto: "live_state"),
    7: .same(proto: "official"),
    8: .same(proto: "vip"),
    9: .same(proto: "sign"),
    10: .same(proto: "label"),
    11: .same(proto: "button"),
    12: .same(proto: "uri"),
  ]

  fileprivate class _StorageClass {
    var _hasUpdate_p: Bool = false
    var _face: String = String()
    var _name: String = String()
    var _uid: Int64 = 0
    var _pos: Int32 = 0
    var _liveState: Bilibili_App_Dynamic_V2_LiveState = .liveNone
    var _official: Bilibili_App_Dynamic_V2_OfficialVerify? = nil
    var _vip: Bilibili_App_Dynamic_V2_VipInfo? = nil
    var _sign: String = String()
    var _label: String = String()
    var _button: Bilibili_App_Dynamic_V2_AdditionalButton? = nil
    var _uri: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _hasUpdate_p = source._hasUpdate_p
      _face = source._face
      _name = source._name
      _uid = source._uid
      _pos = source._pos
      _liveState = source._liveState
      _official = source._official
      _vip = source._vip
      _sign = source._sign
      _label = source._label
      _button = source._button
      _uri = source._uri
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._hasUpdate_p) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._face) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._uid) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._pos) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._liveState) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._official) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._vip) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._sign) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._label) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._button) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._uri) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._hasUpdate_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasUpdate_p, fieldNumber: 1)
      }
      if !_storage._face.isEmpty {
        try visitor.visitSingularStringField(value: _storage._face, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      if _storage._uid != 0 {
        try visitor.visitSingularInt64Field(value: _storage._uid, fieldNumber: 4)
      }
      if _storage._pos != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pos, fieldNumber: 5)
      }
      if _storage._liveState != .liveNone {
        try visitor.visitSingularEnumField(value: _storage._liveState, fieldNumber: 6)
      }
      try { if let v = _storage._official {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._vip {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if !_storage._sign.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sign, fieldNumber: 9)
      }
      if !_storage._label.isEmpty {
        try visitor.visitSingularStringField(value: _storage._label, fieldNumber: 10)
      }
      try { if let v = _storage._button {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_UnfollowUserItem, rhs: Bilibili_App_Dynamic_V2_UnfollowUserItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._hasUpdate_p != rhs_storage._hasUpdate_p {return false}
        if _storage._face != rhs_storage._face {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._pos != rhs_storage._pos {return false}
        if _storage._liveState != rhs_storage._liveState {return false}
        if _storage._official != rhs_storage._official {return false}
        if _storage._vip != rhs_storage._vip {return false}
        if _storage._sign != rhs_storage._sign {return false}
        if _storage._label != rhs_storage._label {return false}
        if _storage._button != rhs_storage._button {return false}
        if _storage._uri != rhs_storage._uri {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynDetailsReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynDetailsReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dynamic_ids"),
    2: .standard(proto: "playurl_param"),
    3: .standard(proto: "local_time"),
    4: .standard(proto: "player_args"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dynamicIds) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._playurlParam) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.localTime) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._playerArgs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.dynamicIds.isEmpty {
      try visitor.visitSingularStringField(value: self.dynamicIds, fieldNumber: 1)
    }
    try { if let v = self._playurlParam {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.localTime != 0 {
      try visitor.visitSingularInt32Field(value: self.localTime, fieldNumber: 3)
    }
    try { if let v = self._playerArgs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynDetailsReq, rhs: Bilibili_App_Dynamic_V2_DynDetailsReq) -> Bool {
    if lhs.dynamicIds != rhs.dynamicIds {return false}
    if lhs._playurlParam != rhs._playurlParam {return false}
    if lhs.localTime != rhs.localTime {return false}
    if lhs._playerArgs != rhs._playerArgs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynDetailsReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynDetailsReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynDetailsReply, rhs: Bilibili_App_Dynamic_V2_DynDetailsReply) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynVideoPersonalReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynVideoPersonalReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_uid"),
    2: .same(proto: "offset"),
    3: .same(proto: "page"),
    4: .standard(proto: "is_preload"),
    5: .standard(proto: "playurl_param"),
    6: .standard(proto: "local_time"),
    7: .same(proto: "footprint"),
    8: .same(proto: "from"),
    9: .standard(proto: "player_args"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.hostUid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.offset) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.page) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.isPreload) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._playurlParam) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.localTime) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.footprint) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._playerArgs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.hostUid != 0 {
      try visitor.visitSingularInt64Field(value: self.hostUid, fieldNumber: 1)
    }
    if !self.offset.isEmpty {
      try visitor.visitSingularStringField(value: self.offset, fieldNumber: 2)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 3)
    }
    if self.isPreload != 0 {
      try visitor.visitSingularInt32Field(value: self.isPreload, fieldNumber: 4)
    }
    try { if let v = self._playurlParam {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.localTime != 0 {
      try visitor.visitSingularInt32Field(value: self.localTime, fieldNumber: 6)
    }
    if !self.footprint.isEmpty {
      try visitor.visitSingularStringField(value: self.footprint, fieldNumber: 7)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 8)
    }
    try { if let v = self._playerArgs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynVideoPersonalReq, rhs: Bilibili_App_Dynamic_V2_DynVideoPersonalReq) -> Bool {
    if lhs.hostUid != rhs.hostUid {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.page != rhs.page {return false}
    if lhs.isPreload != rhs.isPreload {return false}
    if lhs._playurlParam != rhs._playurlParam {return false}
    if lhs.localTime != rhs.localTime {return false}
    if lhs.footprint != rhs.footprint {return false}
    if lhs.from != rhs.from {return false}
    if lhs._playerArgs != rhs._playerArgs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynVideoPersonalReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynVideoPersonalReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .same(proto: "offset"),
    3: .standard(proto: "has_more"),
    4: .standard(proto: "read_offset"),
    5: .same(proto: "relation"),
    6: .standard(proto: "addition_up"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.offset) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.hasMore_p) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.readOffset) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._relation) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._additionUp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if !self.offset.isEmpty {
      try visitor.visitSingularStringField(value: self.offset, fieldNumber: 2)
    }
    if self.hasMore_p != false {
      try visitor.visitSingularBoolField(value: self.hasMore_p, fieldNumber: 3)
    }
    if !self.readOffset.isEmpty {
      try visitor.visitSingularStringField(value: self.readOffset, fieldNumber: 4)
    }
    try { if let v = self._relation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._additionUp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynVideoPersonalReply, rhs: Bilibili_App_Dynamic_V2_DynVideoPersonalReply) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.hasMore_p != rhs.hasMore_p {return false}
    if lhs.readOffset != rhs.readOffset {return false}
    if lhs._relation != rhs._relation {return false}
    if lhs._additionUp != rhs._additionUp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynVideoUpdOffsetReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_uid"),
    2: .standard(proto: "read_offset"),
    3: .same(proto: "footprint"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.hostUid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.readOffset) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.footprint) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hostUid != 0 {
      try visitor.visitSingularInt64Field(value: self.hostUid, fieldNumber: 1)
    }
    if !self.readOffset.isEmpty {
      try visitor.visitSingularStringField(value: self.readOffset, fieldNumber: 2)
    }
    if !self.footprint.isEmpty {
      try visitor.visitSingularStringField(value: self.footprint, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq, rhs: Bilibili_App_Dynamic_V2_DynVideoUpdOffsetReq) -> Bool {
    if lhs.hostUid != rhs.hostUid {return false}
    if lhs.readOffset != rhs.readOffset {return false}
    if lhs.footprint != rhs.footprint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_CardVideoUpList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CardVideoUpList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "list"),
    3: .same(proto: "footprint"),
    4: .standard(proto: "show_live_num"),
    5: .standard(proto: "more_label"),
    6: .standard(proto: "title_switch"),
    7: .standard(proto: "show_more_label"),
    8: .standard(proto: "show_in_personal"),
    9: .standard(proto: "show_more_button"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.footprint) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.showLiveNum) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._moreLabel) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.titleSwitch) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.showMoreLabel) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.showInPersonal) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.showMoreButton) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 2)
    }
    if !self.footprint.isEmpty {
      try visitor.visitSingularStringField(value: self.footprint, fieldNumber: 3)
    }
    if self.showLiveNum != 0 {
      try visitor.visitSingularInt32Field(value: self.showLiveNum, fieldNumber: 4)
    }
    try { if let v = self._moreLabel {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.titleSwitch != 0 {
      try visitor.visitSingularInt32Field(value: self.titleSwitch, fieldNumber: 6)
    }
    if self.showMoreLabel != false {
      try visitor.visitSingularBoolField(value: self.showMoreLabel, fieldNumber: 7)
    }
    if self.showInPersonal != false {
      try visitor.visitSingularBoolField(value: self.showInPersonal, fieldNumber: 8)
    }
    if self.showMoreButton != false {
      try visitor.visitSingularBoolField(value: self.showMoreButton, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_CardVideoUpList, rhs: Bilibili_App_Dynamic_V2_CardVideoUpList) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.list != rhs.list {return false}
    if lhs.footprint != rhs.footprint {return false}
    if lhs.showLiveNum != rhs.showLiveNum {return false}
    if lhs._moreLabel != rhs._moreLabel {return false}
    if lhs.titleSwitch != rhs.titleSwitch {return false}
    if lhs.showMoreLabel != rhs.showMoreLabel {return false}
    if lhs.showInPersonal != rhs.showInPersonal {return false}
    if lhs.showMoreButton != rhs.showMoreButton {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_UpListMoreLabel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpListMoreLabel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "uri"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_UpListMoreLabel, rhs: Bilibili_App_Dynamic_V2_UpListMoreLabel) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_UpListItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpListItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "has_update"),
    2: .same(proto: "face"),
    3: .same(proto: "name"),
    4: .same(proto: "uid"),
    5: .same(proto: "pos"),
    6: .standard(proto: "user_item_type"),
    7: .standard(proto: "display_style_day"),
    8: .standard(proto: "display_style_night"),
    9: .standard(proto: "style_id"),
    10: .standard(proto: "live_state"),
    11: .same(proto: "separator"),
    12: .same(proto: "uri"),
    13: .standard(proto: "is_recall"),
  ]

  fileprivate class _StorageClass {
    var _hasUpdate_p: Bool = false
    var _face: String = String()
    var _name: String = String()
    var _uid: Int64 = 0
    var _pos: Int64 = 0
    var _userItemType: Bilibili_App_Dynamic_V2_UserItemType = .none
    var _displayStyleDay: Bilibili_App_Dynamic_V2_UserItemStyle? = nil
    var _displayStyleNight: Bilibili_App_Dynamic_V2_UserItemStyle? = nil
    var _styleID: Int64 = 0
    var _liveState: Bilibili_App_Dynamic_V2_LiveState = .liveNone
    var _separator: Bool = false
    var _uri: String = String()
    var _isRecall: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _hasUpdate_p = source._hasUpdate_p
      _face = source._face
      _name = source._name
      _uid = source._uid
      _pos = source._pos
      _userItemType = source._userItemType
      _displayStyleDay = source._displayStyleDay
      _displayStyleNight = source._displayStyleNight
      _styleID = source._styleID
      _liveState = source._liveState
      _separator = source._separator
      _uri = source._uri
      _isRecall = source._isRecall
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._hasUpdate_p) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._face) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._uid) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._pos) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._userItemType) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._displayStyleDay) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._displayStyleNight) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._styleID) }()
        case 10: try { try decoder.decodeSingularEnumField(value: &_storage._liveState) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._separator) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._uri) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._isRecall) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._hasUpdate_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasUpdate_p, fieldNumber: 1)
      }
      if !_storage._face.isEmpty {
        try visitor.visitSingularStringField(value: _storage._face, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      if _storage._uid != 0 {
        try visitor.visitSingularInt64Field(value: _storage._uid, fieldNumber: 4)
      }
      if _storage._pos != 0 {
        try visitor.visitSingularInt64Field(value: _storage._pos, fieldNumber: 5)
      }
      if _storage._userItemType != .none {
        try visitor.visitSingularEnumField(value: _storage._userItemType, fieldNumber: 6)
      }
      try { if let v = _storage._displayStyleDay {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._displayStyleNight {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if _storage._styleID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._styleID, fieldNumber: 9)
      }
      if _storage._liveState != .liveNone {
        try visitor.visitSingularEnumField(value: _storage._liveState, fieldNumber: 10)
      }
      if _storage._separator != false {
        try visitor.visitSingularBoolField(value: _storage._separator, fieldNumber: 11)
      }
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 12)
      }
      if _storage._isRecall != false {
        try visitor.visitSingularBoolField(value: _storage._isRecall, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_UpListItem, rhs: Bilibili_App_Dynamic_V2_UpListItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._hasUpdate_p != rhs_storage._hasUpdate_p {return false}
        if _storage._face != rhs_storage._face {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._pos != rhs_storage._pos {return false}
        if _storage._userItemType != rhs_storage._userItemType {return false}
        if _storage._displayStyleDay != rhs_storage._displayStyleDay {return false}
        if _storage._displayStyleNight != rhs_storage._displayStyleNight {return false}
        if _storage._styleID != rhs_storage._styleID {return false}
        if _storage._liveState != rhs_storage._liveState {return false}
        if _storage._separator != rhs_storage._separator {return false}
        if _storage._uri != rhs_storage._uri {return false}
        if _storage._isRecall != rhs_storage._isRecall {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_UserItemStyle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserItemStyle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rect_text"),
    2: .standard(proto: "rect_text_color"),
    3: .standard(proto: "rect_icon"),
    4: .standard(proto: "rect_bg_color"),
    5: .standard(proto: "outer_animation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.rectText) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.rectTextColor) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.rectIcon) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.rectBgColor) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.outerAnimation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rectText.isEmpty {
      try visitor.visitSingularStringField(value: self.rectText, fieldNumber: 1)
    }
    if !self.rectTextColor.isEmpty {
      try visitor.visitSingularStringField(value: self.rectTextColor, fieldNumber: 2)
    }
    if !self.rectIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.rectIcon, fieldNumber: 3)
    }
    if !self.rectBgColor.isEmpty {
      try visitor.visitSingularStringField(value: self.rectBgColor, fieldNumber: 4)
    }
    if !self.outerAnimation.isEmpty {
      try visitor.visitSingularStringField(value: self.outerAnimation, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_UserItemStyle, rhs: Bilibili_App_Dynamic_V2_UserItemStyle) -> Bool {
    if lhs.rectText != rhs.rectText {return false}
    if lhs.rectTextColor != rhs.rectTextColor {return false}
    if lhs.rectIcon != rhs.rectIcon {return false}
    if lhs.rectBgColor != rhs.rectBgColor {return false}
    if lhs.outerAnimation != rhs.outerAnimation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_CardVideoFollowList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CardVideoFollowList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "view_all_link"),
    2: .same(proto: "list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.viewAllLink) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.viewAllLink.isEmpty {
      try visitor.visitSingularStringField(value: self.viewAllLink, fieldNumber: 1)
    }
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_CardVideoFollowList, rhs: Bilibili_App_Dynamic_V2_CardVideoFollowList) -> Bool {
    if lhs.viewAllLink != rhs.viewAllLink {return false}
    if lhs.list != rhs.list {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_FollowListItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FollowListItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "season_id"),
    2: .same(proto: "title"),
    3: .same(proto: "cover"),
    4: .same(proto: "url"),
    5: .standard(proto: "new_ep"),
    6: .standard(proto: "sub_title"),
    7: .same(proto: "pos"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.seasonID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.cover) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._newEp) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.subTitle) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.pos) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.seasonID != 0 {
      try visitor.visitSingularInt64Field(value: self.seasonID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.cover.isEmpty {
      try visitor.visitSingularStringField(value: self.cover, fieldNumber: 3)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 4)
    }
    try { if let v = self._newEp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.subTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.subTitle, fieldNumber: 6)
    }
    if self.pos != 0 {
      try visitor.visitSingularInt64Field(value: self.pos, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_FollowListItem, rhs: Bilibili_App_Dynamic_V2_FollowListItem) -> Bool {
    if lhs.seasonID != rhs.seasonID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.cover != rhs.cover {return false}
    if lhs.url != rhs.url {return false}
    if lhs._newEp != rhs._newEp {return false}
    if lhs.subTitle != rhs.subTitle {return false}
    if lhs.pos != rhs.pos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_NewEP: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NewEP"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "index_show"),
    3: .same(proto: "cover"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.indexShow) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.cover) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.indexShow.isEmpty {
      try visitor.visitSingularStringField(value: self.indexShow, fieldNumber: 2)
    }
    if !self.cover.isEmpty {
      try visitor.visitSingularStringField(value: self.cover, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_NewEP, rhs: Bilibili_App_Dynamic_V2_NewEP) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.indexShow != rhs.indexShow {return false}
    if lhs.cover != rhs.cover {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_Extend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Extend"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dyn_id_str"),
    2: .standard(proto: "business_id"),
    3: .standard(proto: "orig_dyn_id_str"),
    4: .standard(proto: "orig_name"),
    5: .standard(proto: "orig_img_url"),
    6: .standard(proto: "orig_desc"),
    7: .same(proto: "desc"),
    8: .standard(proto: "orig_dyn_type"),
    9: .standard(proto: "share_type"),
    10: .standard(proto: "share_scene"),
    11: .standard(proto: "is_fast_share"),
    12: .standard(proto: "r_type"),
    13: .standard(proto: "dyn_type"),
    14: .same(proto: "uid"),
    15: .standard(proto: "card_url"),
    16: .standard(proto: "source_content"),
    17: .standard(proto: "orig_face"),
    18: .same(proto: "reply"),
  ]

  fileprivate class _StorageClass {
    var _dynIDStr: String = String()
    var _businessID: String = String()
    var _origDynIDStr: String = String()
    var _origName: String = String()
    var _origImgURL: String = String()
    var _origDesc: [Bilibili_App_Dynamic_V2_Description] = []
    var _desc: [Bilibili_App_Dynamic_V2_Description] = []
    var _origDynType: Bilibili_App_Dynamic_V2_DynamicType = .dynNone
    var _shareType: String = String()
    var _shareScene: String = String()
    var _isFastShare: Bool = false
    var _rType: Int32 = 0
    var _dynType: Int64 = 0
    var _uid: Int64 = 0
    var _cardURL: String = String()
    var _sourceContent: SwiftProtobuf.Google_Protobuf_Any? = nil
    var _origFace: String = String()
    var _reply: Bilibili_App_Dynamic_V2_ExtendReply? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _dynIDStr = source._dynIDStr
      _businessID = source._businessID
      _origDynIDStr = source._origDynIDStr
      _origName = source._origName
      _origImgURL = source._origImgURL
      _origDesc = source._origDesc
      _desc = source._desc
      _origDynType = source._origDynType
      _shareType = source._shareType
      _shareScene = source._shareScene
      _isFastShare = source._isFastShare
      _rType = source._rType
      _dynType = source._dynType
      _uid = source._uid
      _cardURL = source._cardURL
      _sourceContent = source._sourceContent
      _origFace = source._origFace
      _reply = source._reply
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._dynIDStr) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._businessID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._origDynIDStr) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._origName) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._origImgURL) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._origDesc) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._desc) }()
        case 8: try { try decoder.decodeSingularEnumField(value: &_storage._origDynType) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._shareType) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._shareScene) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._isFastShare) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._rType) }()
        case 13: try { try decoder.decodeSingularInt64Field(value: &_storage._dynType) }()
        case 14: try { try decoder.decodeSingularInt64Field(value: &_storage._uid) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._cardURL) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._sourceContent) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._origFace) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._reply) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._dynIDStr.isEmpty {
        try visitor.visitSingularStringField(value: _storage._dynIDStr, fieldNumber: 1)
      }
      if !_storage._businessID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._businessID, fieldNumber: 2)
      }
      if !_storage._origDynIDStr.isEmpty {
        try visitor.visitSingularStringField(value: _storage._origDynIDStr, fieldNumber: 3)
      }
      if !_storage._origName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._origName, fieldNumber: 4)
      }
      if !_storage._origImgURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._origImgURL, fieldNumber: 5)
      }
      if !_storage._origDesc.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._origDesc, fieldNumber: 6)
      }
      if !_storage._desc.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._desc, fieldNumber: 7)
      }
      if _storage._origDynType != .dynNone {
        try visitor.visitSingularEnumField(value: _storage._origDynType, fieldNumber: 8)
      }
      if !_storage._shareType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shareType, fieldNumber: 9)
      }
      if !_storage._shareScene.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shareScene, fieldNumber: 10)
      }
      if _storage._isFastShare != false {
        try visitor.visitSingularBoolField(value: _storage._isFastShare, fieldNumber: 11)
      }
      if _storage._rType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._rType, fieldNumber: 12)
      }
      if _storage._dynType != 0 {
        try visitor.visitSingularInt64Field(value: _storage._dynType, fieldNumber: 13)
      }
      if _storage._uid != 0 {
        try visitor.visitSingularInt64Field(value: _storage._uid, fieldNumber: 14)
      }
      if !_storage._cardURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cardURL, fieldNumber: 15)
      }
      try { if let v = _storage._sourceContent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      if !_storage._origFace.isEmpty {
        try visitor.visitSingularStringField(value: _storage._origFace, fieldNumber: 17)
      }
      try { if let v = _storage._reply {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_Extend, rhs: Bilibili_App_Dynamic_V2_Extend) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._dynIDStr != rhs_storage._dynIDStr {return false}
        if _storage._businessID != rhs_storage._businessID {return false}
        if _storage._origDynIDStr != rhs_storage._origDynIDStr {return false}
        if _storage._origName != rhs_storage._origName {return false}
        if _storage._origImgURL != rhs_storage._origImgURL {return false}
        if _storage._origDesc != rhs_storage._origDesc {return false}
        if _storage._desc != rhs_storage._desc {return false}
        if _storage._origDynType != rhs_storage._origDynType {return false}
        if _storage._shareType != rhs_storage._shareType {return false}
        if _storage._shareScene != rhs_storage._shareScene {return false}
        if _storage._isFastShare != rhs_storage._isFastShare {return false}
        if _storage._rType != rhs_storage._rType {return false}
        if _storage._dynType != rhs_storage._dynType {return false}
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._cardURL != rhs_storage._cardURL {return false}
        if _storage._sourceContent != rhs_storage._sourceContent {return false}
        if _storage._origFace != rhs_storage._origFace {return false}
        if _storage._reply != rhs_storage._reply {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ExtendReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExtendReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    2: .same(proto: "params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.params) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    if !self.params.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.params, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ExtendReply, rhs: Bilibili_App_Dynamic_V2_ExtendReply) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.params != rhs.params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ExtendReplyParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExtendReplyParam"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ExtendReplyParam, rhs: Bilibili_App_Dynamic_V2_ExtendReplyParam) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleAuthorForward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleAuthorForward"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "url"),
    3: .same(proto: "uid"),
    4: .standard(proto: "ptime_label_text"),
    5: .standard(proto: "show_follow"),
    6: .standard(proto: "face_url"),
    7: .same(proto: "relation"),
    8: .standard(proto: "tp_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.uid) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.ptimeLabelText) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.showFollow) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.faceURL) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._relation) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.tpList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.title, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    if self.uid != 0 {
      try visitor.visitSingularInt64Field(value: self.uid, fieldNumber: 3)
    }
    if !self.ptimeLabelText.isEmpty {
      try visitor.visitSingularStringField(value: self.ptimeLabelText, fieldNumber: 4)
    }
    if self.showFollow != false {
      try visitor.visitSingularBoolField(value: self.showFollow, fieldNumber: 5)
    }
    if !self.faceURL.isEmpty {
      try visitor.visitSingularStringField(value: self.faceURL, fieldNumber: 6)
    }
    try { if let v = self._relation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if !self.tpList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tpList, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleAuthorForward, rhs: Bilibili_App_Dynamic_V2_ModuleAuthorForward) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.url != rhs.url {return false}
    if lhs.uid != rhs.uid {return false}
    if lhs.ptimeLabelText != rhs.ptimeLabelText {return false}
    if lhs.showFollow != rhs.showFollow {return false}
    if lhs.faceURL != rhs.faceURL {return false}
    if lhs._relation != rhs._relation {return false}
    if lhs.tpList != rhs.tpList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleAuthorForwardTitle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleAuthorForwardTitle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleAuthorForwardTitle, rhs: Bilibili_App_Dynamic_V2_ModuleAuthorForwardTitle) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleAd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleAd"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_content"),
    2: .standard(proto: "module_author"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._sourceContent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._moduleAuthor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sourceContent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._moduleAuthor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleAd, rhs: Bilibili_App_Dynamic_V2_ModuleAd) -> Bool {
    if lhs._sourceContent != rhs._sourceContent {return false}
    if lhs._moduleAuthor != rhs._moduleAuthor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleBanner: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleBanner"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "type"),
    3: .same(proto: "user"),
    4: .standard(proto: "dislike_text"),
    5: .standard(proto: "dislike_icon"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try {
        var v: Bilibili_App_Dynamic_V2_ModuleBannerUser?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .user(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .user(v)
        }
      }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.dislikeText) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.dislikeIcon) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if self.type != .none {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    try { if case .user(let v)? = self.item {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.dislikeText.isEmpty {
      try visitor.visitSingularStringField(value: self.dislikeText, fieldNumber: 4)
    }
    if !self.dislikeIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.dislikeIcon, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleBanner, rhs: Bilibili_App_Dynamic_V2_ModuleBanner) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.type != rhs.type {return false}
    if lhs.item != rhs.item {return false}
    if lhs.dislikeText != rhs.dislikeText {return false}
    if lhs.dislikeIcon != rhs.dislikeIcon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionVote2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionVote2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "addition_vote_type"),
    2: .standard(proto: "vote_id"),
    3: .same(proto: "title"),
    4: .same(proto: "label"),
    5: .same(proto: "deadline"),
    6: .standard(proto: "open_text"),
    7: .standard(proto: "close_text"),
    8: .standard(proto: "voted_text"),
    9: .same(proto: "state"),
    10: .standard(proto: "addition_vote_word"),
    11: .standard(proto: "addition_vote_pic"),
    12: .standard(proto: "addition_vote_defaule"),
    13: .standard(proto: "biz_type"),
    14: .same(proto: "total"),
    15: .standard(proto: "card_type"),
    16: .same(proto: "tips"),
    17: .same(proto: "uri"),
    18: .standard(proto: "is_voted"),
    19: .standard(proto: "choice_cnt"),
    20: .standard(proto: "defaule_select_share"),
  ]

  fileprivate class _StorageClass {
    var _additionVoteType: Bilibili_App_Dynamic_V2_AdditionVoteType = .none
    var _voteID: Int64 = 0
    var _title: String = String()
    var _label: String = String()
    var _deadline: Int64 = 0
    var _openText: String = String()
    var _closeText: String = String()
    var _votedText: String = String()
    var _state: Bilibili_App_Dynamic_V2_AdditionVoteState = .none
    var _item: Bilibili_App_Dynamic_V2_AdditionVote2.OneOf_Item?
    var _bizType: Int32 = 0
    var _total: Int64 = 0
    var _cardType: String = String()
    var _tips: String = String()
    var _uri: String = String()
    var _isVoted: Bool = false
    var _choiceCnt: Int32 = 0
    var _defauleSelectShare: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _additionVoteType = source._additionVoteType
      _voteID = source._voteID
      _title = source._title
      _label = source._label
      _deadline = source._deadline
      _openText = source._openText
      _closeText = source._closeText
      _votedText = source._votedText
      _state = source._state
      _item = source._item
      _bizType = source._bizType
      _total = source._total
      _cardType = source._cardType
      _tips = source._tips
      _uri = source._uri
      _isVoted = source._isVoted
      _choiceCnt = source._choiceCnt
      _defauleSelectShare = source._defauleSelectShare
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._additionVoteType) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._voteID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._label) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._deadline) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._openText) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._closeText) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._votedText) }()
        case 9: try { try decoder.decodeSingularEnumField(value: &_storage._state) }()
        case 10: try {
          var v: Bilibili_App_Dynamic_V2_AdditionVoteWord?
          var hadOneofValue = false
          if let current = _storage._item {
            hadOneofValue = true
            if case .additionVoteWord(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._item = .additionVoteWord(v)
          }
        }()
        case 11: try {
          var v: Bilibili_App_Dynamic_V2_AdditionVotePic?
          var hadOneofValue = false
          if let current = _storage._item {
            hadOneofValue = true
            if case .additionVotePic(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._item = .additionVotePic(v)
          }
        }()
        case 12: try {
          var v: Bilibili_App_Dynamic_V2_AdditionVoteDefaule?
          var hadOneofValue = false
          if let current = _storage._item {
            hadOneofValue = true
            if case .additionVoteDefaule(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._item = .additionVoteDefaule(v)
          }
        }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._bizType) }()
        case 14: try { try decoder.decodeSingularInt64Field(value: &_storage._total) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._cardType) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._tips) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._uri) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._isVoted) }()
        case 19: try { try decoder.decodeSingularInt32Field(value: &_storage._choiceCnt) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._defauleSelectShare) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._additionVoteType != .none {
        try visitor.visitSingularEnumField(value: _storage._additionVoteType, fieldNumber: 1)
      }
      if _storage._voteID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._voteID, fieldNumber: 2)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 3)
      }
      if !_storage._label.isEmpty {
        try visitor.visitSingularStringField(value: _storage._label, fieldNumber: 4)
      }
      if _storage._deadline != 0 {
        try visitor.visitSingularInt64Field(value: _storage._deadline, fieldNumber: 5)
      }
      if !_storage._openText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._openText, fieldNumber: 6)
      }
      if !_storage._closeText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._closeText, fieldNumber: 7)
      }
      if !_storage._votedText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._votedText, fieldNumber: 8)
      }
      if _storage._state != .none {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 9)
      }
      switch _storage._item {
      case .additionVoteWord?: try {
        guard case .additionVoteWord(let v)? = _storage._item else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }()
      case .additionVotePic?: try {
        guard case .additionVotePic(let v)? = _storage._item else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }()
      case .additionVoteDefaule?: try {
        guard case .additionVoteDefaule(let v)? = _storage._item else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }()
      case nil: break
      }
      if _storage._bizType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._bizType, fieldNumber: 13)
      }
      if _storage._total != 0 {
        try visitor.visitSingularInt64Field(value: _storage._total, fieldNumber: 14)
      }
      if !_storage._cardType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cardType, fieldNumber: 15)
      }
      if !_storage._tips.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tips, fieldNumber: 16)
      }
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 17)
      }
      if _storage._isVoted != false {
        try visitor.visitSingularBoolField(value: _storage._isVoted, fieldNumber: 18)
      }
      if _storage._choiceCnt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._choiceCnt, fieldNumber: 19)
      }
      if _storage._defauleSelectShare != false {
        try visitor.visitSingularBoolField(value: _storage._defauleSelectShare, fieldNumber: 20)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionVote2, rhs: Bilibili_App_Dynamic_V2_AdditionVote2) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._additionVoteType != rhs_storage._additionVoteType {return false}
        if _storage._voteID != rhs_storage._voteID {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._label != rhs_storage._label {return false}
        if _storage._deadline != rhs_storage._deadline {return false}
        if _storage._openText != rhs_storage._openText {return false}
        if _storage._closeText != rhs_storage._closeText {return false}
        if _storage._votedText != rhs_storage._votedText {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._item != rhs_storage._item {return false}
        if _storage._bizType != rhs_storage._bizType {return false}
        if _storage._total != rhs_storage._total {return false}
        if _storage._cardType != rhs_storage._cardType {return false}
        if _storage._tips != rhs_storage._tips {return false}
        if _storage._uri != rhs_storage._uri {return false}
        if _storage._isVoted != rhs_storage._isVoted {return false}
        if _storage._choiceCnt != rhs_storage._choiceCnt {return false}
        if _storage._defauleSelectShare != rhs_storage._defauleSelectShare {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionVoteWord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionVoteWord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.item) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.item.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.item, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionVoteWord, rhs: Bilibili_App_Dynamic_V2_AdditionVoteWord) -> Bool {
    if lhs.item != rhs.item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionVoteWordItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionVoteWordItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "opt_idx"),
    2: .same(proto: "title"),
    3: .standard(proto: "is_vote"),
    4: .same(proto: "total"),
    5: .same(proto: "persent"),
    6: .standard(proto: "is_max_option"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.optIdx) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isVote) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.total) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.persent) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isMaxOption) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.optIdx != 0 {
      try visitor.visitSingularInt32Field(value: self.optIdx, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.isVote != false {
      try visitor.visitSingularBoolField(value: self.isVote, fieldNumber: 3)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 4)
    }
    if self.persent != 0 {
      try visitor.visitSingularDoubleField(value: self.persent, fieldNumber: 5)
    }
    if self.isMaxOption != false {
      try visitor.visitSingularBoolField(value: self.isMaxOption, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionVoteWordItem, rhs: Bilibili_App_Dynamic_V2_AdditionVoteWordItem) -> Bool {
    if lhs.optIdx != rhs.optIdx {return false}
    if lhs.title != rhs.title {return false}
    if lhs.isVote != rhs.isVote {return false}
    if lhs.total != rhs.total {return false}
    if lhs.persent != rhs.persent {return false}
    if lhs.isMaxOption != rhs.isMaxOption {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionVotePic: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionVotePic"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.item) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.item.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.item, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionVotePic, rhs: Bilibili_App_Dynamic_V2_AdditionVotePic) -> Bool {
    if lhs.item != rhs.item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionVotePicItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionVotePicItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "opt_idx"),
    2: .same(proto: "cover"),
    3: .standard(proto: "is_vote"),
    4: .same(proto: "total"),
    5: .same(proto: "persent"),
    6: .same(proto: "title"),
    7: .standard(proto: "is_max_option"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.optIdx) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cover) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isVote) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.total) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.persent) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.isMaxOption) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.optIdx != 0 {
      try visitor.visitSingularInt32Field(value: self.optIdx, fieldNumber: 1)
    }
    if !self.cover.isEmpty {
      try visitor.visitSingularStringField(value: self.cover, fieldNumber: 2)
    }
    if self.isVote != false {
      try visitor.visitSingularBoolField(value: self.isVote, fieldNumber: 3)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 4)
    }
    if self.persent != 0 {
      try visitor.visitSingularDoubleField(value: self.persent, fieldNumber: 5)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 6)
    }
    if self.isMaxOption != false {
      try visitor.visitSingularBoolField(value: self.isMaxOption, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionVotePicItem, rhs: Bilibili_App_Dynamic_V2_AdditionVotePicItem) -> Bool {
    if lhs.optIdx != rhs.optIdx {return false}
    if lhs.cover != rhs.cover {return false}
    if lhs.isVote != rhs.isVote {return false}
    if lhs.total != rhs.total {return false}
    if lhs.persent != rhs.persent {return false}
    if lhs.title != rhs.title {return false}
    if lhs.isMaxOption != rhs.isMaxOption {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_AdditionVoteDefaule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdditionVoteDefaule"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cover"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.cover) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cover.isEmpty {
      try visitor.visitRepeatedStringField(value: self.cover, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_AdditionVoteDefaule, rhs: Bilibili_App_Dynamic_V2_AdditionVoteDefaule) -> Bool {
    if lhs.cover != rhs.cover {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleItemNull: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleItemNull"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "icon"),
    2: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleItemNull, rhs: Bilibili_App_Dynamic_V2_ModuleItemNull) -> Bool {
    if lhs.icon != rhs.icon {return false}
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleBannerUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleBannerUser"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleBannerUser, rhs: Bilibili_App_Dynamic_V2_ModuleBannerUser) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleBannerUserItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleBannerUserItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "face"),
    2: .same(proto: "name"),
    3: .same(proto: "uid"),
    4: .standard(proto: "live_state"),
    5: .same(proto: "official"),
    6: .same(proto: "vip"),
    7: .same(proto: "label"),
    8: .same(proto: "button"),
    9: .same(proto: "uri"),
  ]

  fileprivate class _StorageClass {
    var _face: String = String()
    var _name: String = String()
    var _uid: Int64 = 0
    var _liveState: Bilibili_App_Dynamic_V2_LiveState = .liveNone
    var _official: Bilibili_App_Dynamic_V2_OfficialVerify? = nil
    var _vip: Bilibili_App_Dynamic_V2_VipInfo? = nil
    var _label: String = String()
    var _button: Bilibili_App_Dynamic_V2_AdditionalButton? = nil
    var _uri: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _face = source._face
      _name = source._name
      _uid = source._uid
      _liveState = source._liveState
      _official = source._official
      _vip = source._vip
      _label = source._label
      _button = source._button
      _uri = source._uri
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._face) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._uid) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._liveState) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._official) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._vip) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._label) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._button) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._uri) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._face.isEmpty {
        try visitor.visitSingularStringField(value: _storage._face, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if _storage._uid != 0 {
        try visitor.visitSingularInt64Field(value: _storage._uid, fieldNumber: 3)
      }
      if _storage._liveState != .liveNone {
        try visitor.visitSingularEnumField(value: _storage._liveState, fieldNumber: 4)
      }
      try { if let v = _storage._official {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._vip {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if !_storage._label.isEmpty {
        try visitor.visitSingularStringField(value: _storage._label, fieldNumber: 7)
      }
      try { if let v = _storage._button {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleBannerUserItem, rhs: Bilibili_App_Dynamic_V2_ModuleBannerUserItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._face != rhs_storage._face {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._liveState != rhs_storage._liveState {return false}
        if _storage._official != rhs_storage._official {return false}
        if _storage._vip != rhs_storage._vip {return false}
        if _storage._label != rhs_storage._label {return false}
        if _storage._button != rhs_storage._button {return false}
        if _storage._uri != rhs_storage._uri {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleLikeUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleLikeUser"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "like_users"),
    2: .standard(proto: "display_text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.likeUsers) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayText) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.likeUsers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.likeUsers, fieldNumber: 1)
    }
    if !self.displayText.isEmpty {
      try visitor.visitSingularStringField(value: self.displayText, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleLikeUser, rhs: Bilibili_App_Dynamic_V2_ModuleLikeUser) -> Bool {
    if lhs.likeUsers != rhs.likeUsers {return false}
    if lhs.displayText != rhs.displayText {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_LikeUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LikeUser"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "uname"),
    3: .same(proto: "uri"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.uid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uname) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.uid != 0 {
      try visitor.visitSingularInt64Field(value: self.uid, fieldNumber: 1)
    }
    if !self.uname.isEmpty {
      try visitor.visitSingularStringField(value: self.uname, fieldNumber: 2)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_LikeUser, rhs: Bilibili_App_Dynamic_V2_LikeUser) -> Bool {
    if lhs.uid != rhs.uid {return false}
    if lhs.uname != rhs.uname {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_LikeInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LikeInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "animation"),
    2: .standard(proto: "is_like"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._animation) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isLike) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._animation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.isLike != false {
      try visitor.visitSingularBoolField(value: self.isLike, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_LikeInfo, rhs: Bilibili_App_Dynamic_V2_LikeInfo) -> Bool {
    if lhs._animation != rhs._animation {return false}
    if lhs.isLike != rhs.isLike {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_LikeAnimation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LikeAnimation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "begin"),
    2: .same(proto: "proc"),
    3: .same(proto: "end"),
    4: .standard(proto: "like_icon_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.begin) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.proc) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.end) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.likeIconID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.begin.isEmpty {
      try visitor.visitSingularStringField(value: self.begin, fieldNumber: 1)
    }
    if !self.proc.isEmpty {
      try visitor.visitSingularStringField(value: self.proc, fieldNumber: 2)
    }
    if !self.end.isEmpty {
      try visitor.visitSingularStringField(value: self.end, fieldNumber: 3)
    }
    if self.likeIconID != 0 {
      try visitor.visitSingularInt64Field(value: self.likeIconID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_LikeAnimation, rhs: Bilibili_App_Dynamic_V2_LikeAnimation) -> Bool {
    if lhs.begin != rhs.begin {return false}
    if lhs.proc != rhs.proc {return false}
    if lhs.end != rhs.end {return false}
    if lhs.likeIconID != rhs.likeIconID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ThreePointItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreePointItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "default"),
    3: .standard(proto: "auto_player"),
    4: .same(proto: "share"),
    5: .same(proto: "attention"),
    6: .same(proto: "wait"),
    7: .same(proto: "dislike"),
    8: .same(proto: "favorite"),
    9: .same(proto: "top"),
    10: .same(proto: "comment"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try {
        var v: Bilibili_App_Dynamic_V2_ThreePointDefault?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .default(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .default(v)
        }
      }()
      case 3: try {
        var v: Bilibili_App_Dynamic_V2_ThreePointAutoPlay?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .autoPlayer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .autoPlayer(v)
        }
      }()
      case 4: try {
        var v: Bilibili_App_Dynamic_V2_ThreePointShare?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .share(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .share(v)
        }
      }()
      case 5: try {
        var v: Bilibili_App_Dynamic_V2_ThreePointAttention?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .attention(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .attention(v)
        }
      }()
      case 6: try {
        var v: Bilibili_App_Dynamic_V2_ThreePointWait?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .wait(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .wait(v)
        }
      }()
      case 7: try {
        var v: Bilibili_App_Dynamic_V2_ThreePointDislike?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .dislike(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .dislike(v)
        }
      }()
      case 8: try {
        var v: Bilibili_App_Dynamic_V2_ThreePointFavorite?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .favorite(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .favorite(v)
        }
      }()
      case 9: try {
        var v: Bilibili_App_Dynamic_V2_ThreePointTop?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .top(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .top(v)
        }
      }()
      case 10: try {
        var v: Bilibili_App_Dynamic_V2_ThreePointComment?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .comment(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .comment(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != .tpNone {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    switch self.item {
    case .default?: try {
      guard case .default(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .autoPlayer?: try {
      guard case .autoPlayer(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .share?: try {
      guard case .share(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .attention?: try {
      guard case .attention(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .wait?: try {
      guard case .wait(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .dislike?: try {
      guard case .dislike(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .favorite?: try {
      guard case .favorite(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .top?: try {
      guard case .top(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .comment?: try {
      guard case .comment(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ThreePointItem, rhs: Bilibili_App_Dynamic_V2_ThreePointItem) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.item != rhs.item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleAuthorBadgeButton: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleAuthorBadgeButton"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "icon"),
    2: .same(proto: "title"),
    3: .same(proto: "state"),
    4: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.state) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.state != 0 {
      try visitor.visitSingularInt32Field(value: self.state, fieldNumber: 3)
    }
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleAuthorBadgeButton, rhs: Bilibili_App_Dynamic_V2_ModuleAuthorBadgeButton) -> Bool {
    if lhs.icon != rhs.icon {return false}
    if lhs.title != rhs.title {return false}
    if lhs.state != rhs.state {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ThreePointDefault: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreePointDefault"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "icon"),
    2: .same(proto: "title"),
    3: .same(proto: "uri"),
    4: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 3)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ThreePointDefault, rhs: Bilibili_App_Dynamic_V2_ThreePointDefault) -> Bool {
    if lhs.icon != rhs.icon {return false}
    if lhs.title != rhs.title {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ThreePointAutoPlay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreePointAutoPlay"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "open_icon"),
    2: .standard(proto: "open_text"),
    3: .standard(proto: "close_icon"),
    4: .standard(proto: "close_text"),
    5: .standard(proto: "open_text_v2"),
    6: .standard(proto: "close_text_v2"),
    7: .standard(proto: "only_icon"),
    8: .standard(proto: "only_text"),
    9: .standard(proto: "open_icon_v2"),
    10: .standard(proto: "close_icon_v2"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.openIcon) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.openText) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.closeIcon) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.closeText) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.openTextV2) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.closeTextV2) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.onlyIcon) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.onlyText) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.openIconV2) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.closeIconV2) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.openIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.openIcon, fieldNumber: 1)
    }
    if !self.openText.isEmpty {
      try visitor.visitSingularStringField(value: self.openText, fieldNumber: 2)
    }
    if !self.closeIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.closeIcon, fieldNumber: 3)
    }
    if !self.closeText.isEmpty {
      try visitor.visitSingularStringField(value: self.closeText, fieldNumber: 4)
    }
    if !self.openTextV2.isEmpty {
      try visitor.visitSingularStringField(value: self.openTextV2, fieldNumber: 5)
    }
    if !self.closeTextV2.isEmpty {
      try visitor.visitSingularStringField(value: self.closeTextV2, fieldNumber: 6)
    }
    if !self.onlyIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.onlyIcon, fieldNumber: 7)
    }
    if !self.onlyText.isEmpty {
      try visitor.visitSingularStringField(value: self.onlyText, fieldNumber: 8)
    }
    if !self.openIconV2.isEmpty {
      try visitor.visitSingularStringField(value: self.openIconV2, fieldNumber: 9)
    }
    if !self.closeIconV2.isEmpty {
      try visitor.visitSingularStringField(value: self.closeIconV2, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ThreePointAutoPlay, rhs: Bilibili_App_Dynamic_V2_ThreePointAutoPlay) -> Bool {
    if lhs.openIcon != rhs.openIcon {return false}
    if lhs.openText != rhs.openText {return false}
    if lhs.closeIcon != rhs.closeIcon {return false}
    if lhs.closeText != rhs.closeText {return false}
    if lhs.openTextV2 != rhs.openTextV2 {return false}
    if lhs.closeTextV2 != rhs.closeTextV2 {return false}
    if lhs.onlyIcon != rhs.onlyIcon {return false}
    if lhs.onlyText != rhs.onlyText {return false}
    if lhs.openIconV2 != rhs.openIconV2 {return false}
    if lhs.closeIconV2 != rhs.closeIconV2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ThreePointShare: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreePointShare"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "icon"),
    2: .same(proto: "title"),
    3: .same(proto: "channel"),
    4: .standard(proto: "channel_name"),
    5: .same(proto: "reserve"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.channel) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.channelName) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._reserve) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.channel.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.channel, fieldNumber: 3)
    }
    if !self.channelName.isEmpty {
      try visitor.visitSingularStringField(value: self.channelName, fieldNumber: 4)
    }
    try { if let v = self._reserve {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ThreePointShare, rhs: Bilibili_App_Dynamic_V2_ThreePointShare) -> Bool {
    if lhs.icon != rhs.icon {return false}
    if lhs.title != rhs.title {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.channelName != rhs.channelName {return false}
    if lhs._reserve != rhs._reserve {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ThreePointShareChannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreePointShareChannel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "icon"),
    2: .same(proto: "title"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ThreePointShareChannel, rhs: Bilibili_App_Dynamic_V2_ThreePointShareChannel) -> Bool {
    if lhs.icon != rhs.icon {return false}
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ThreePointAttention: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreePointAttention"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "attention_icon"),
    2: .standard(proto: "attention_text"),
    3: .standard(proto: "not_attention_icon"),
    4: .standard(proto: "not_attention_text"),
    5: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.attentionIcon) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.attentionText) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.notAttentionIcon) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.notAttentionText) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.attentionIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.attentionIcon, fieldNumber: 1)
    }
    if !self.attentionText.isEmpty {
      try visitor.visitSingularStringField(value: self.attentionText, fieldNumber: 2)
    }
    if !self.notAttentionIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.notAttentionIcon, fieldNumber: 3)
    }
    if !self.notAttentionText.isEmpty {
      try visitor.visitSingularStringField(value: self.notAttentionText, fieldNumber: 4)
    }
    if self.status != .tpNotAttention {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ThreePointAttention, rhs: Bilibili_App_Dynamic_V2_ThreePointAttention) -> Bool {
    if lhs.attentionIcon != rhs.attentionIcon {return false}
    if lhs.attentionText != rhs.attentionText {return false}
    if lhs.notAttentionIcon != rhs.notAttentionIcon {return false}
    if lhs.notAttentionText != rhs.notAttentionText {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ThreePointWait: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreePointWait"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "addition_icon"),
    2: .standard(proto: "addition_text"),
    3: .standard(proto: "no_addition_icon"),
    4: .standard(proto: "no_addition_text"),
    5: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.additionIcon) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.additionText) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.noAdditionIcon) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.noAdditionText) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.additionIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.additionIcon, fieldNumber: 1)
    }
    if !self.additionText.isEmpty {
      try visitor.visitSingularStringField(value: self.additionText, fieldNumber: 2)
    }
    if !self.noAdditionIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.noAdditionIcon, fieldNumber: 3)
    }
    if !self.noAdditionText.isEmpty {
      try visitor.visitSingularStringField(value: self.noAdditionText, fieldNumber: 4)
    }
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ThreePointWait, rhs: Bilibili_App_Dynamic_V2_ThreePointWait) -> Bool {
    if lhs.additionIcon != rhs.additionIcon {return false}
    if lhs.additionText != rhs.additionText {return false}
    if lhs.noAdditionIcon != rhs.noAdditionIcon {return false}
    if lhs.noAdditionText != rhs.noAdditionText {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ThreePointDislike: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreePointDislike"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "icon"),
    2: .same(proto: "title"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ThreePointDislike, rhs: Bilibili_App_Dynamic_V2_ThreePointDislike) -> Bool {
    if lhs.icon != rhs.icon {return false}
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ThreePointFavorite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreePointFavorite"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "icon"),
    2: .same(proto: "title"),
    3: .same(proto: "id"),
    4: .standard(proto: "is_favourite"),
    5: .standard(proto: "cancel_icon"),
    6: .standard(proto: "cancel_title"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isFavourite) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.cancelIcon) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.cancelTitle) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 3)
    }
    if self.isFavourite != false {
      try visitor.visitSingularBoolField(value: self.isFavourite, fieldNumber: 4)
    }
    if !self.cancelIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.cancelIcon, fieldNumber: 5)
    }
    if !self.cancelTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.cancelTitle, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ThreePointFavorite, rhs: Bilibili_App_Dynamic_V2_ThreePointFavorite) -> Bool {
    if lhs.icon != rhs.icon {return false}
    if lhs.title != rhs.title {return false}
    if lhs.id != rhs.id {return false}
    if lhs.isFavourite != rhs.isFavourite {return false}
    if lhs.cancelIcon != rhs.cancelIcon {return false}
    if lhs.cancelTitle != rhs.cancelTitle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ThreePointTop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreePointTop"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "icon"),
    2: .same(proto: "title"),
    3: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.type != .topNone {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ThreePointTop, rhs: Bilibili_App_Dynamic_V2_ThreePointTop) -> Bool {
    if lhs.icon != rhs.icon {return false}
    if lhs.title != rhs.title {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ThreePointComment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreePointComment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "up_selection"),
    2: .standard(proto: "up_close"),
    3: .same(proto: "icon"),
    4: .same(proto: "title"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._upSelection) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._upClose) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.title) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._upSelection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._upClose {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ThreePointComment, rhs: Bilibili_App_Dynamic_V2_ThreePointComment) -> Bool {
    if lhs._upSelection != rhs._upSelection {return false}
    if lhs._upClose != rhs._upClose {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_CommentDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommentDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "can_modify"),
    2: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.canModify) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.canModify != false {
      try visitor.visitSingularBoolField(value: self.canModify, fieldNumber: 1)
    }
    if self.status != 0 {
      try visitor.visitSingularInt64Field(value: self.status, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_CommentDetail, rhs: Bilibili_App_Dynamic_V2_CommentDetail) -> Bool {
    if lhs.canModify != rhs.canModify {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_Weight: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Weight"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "items"),
    3: .same(proto: "icon"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_Weight, rhs: Bilibili_App_Dynamic_V2_Weight) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.items != rhs.items {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_WeightItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WeightItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "button"),
    3: .same(proto: "dislike"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try {
        var v: Bilibili_App_Dynamic_V2_WeightButton?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .button(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .button(v)
        }
      }()
      case 3: try {
        var v: Bilibili_App_Dynamic_V2_WeightDislike?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .dislike(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .dislike(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != .weightNone {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    switch self.item {
    case .button?: try {
      guard case .button(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .dislike?: try {
      guard case .dislike(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_WeightItem, rhs: Bilibili_App_Dynamic_V2_WeightItem) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.item != rhs.item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_WeightDislike: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WeightDislike"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_back_type"),
    2: .same(proto: "title"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.feedBackType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedBackType.isEmpty {
      try visitor.visitSingularStringField(value: self.feedBackType, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_WeightDislike, rhs: Bilibili_App_Dynamic_V2_WeightDislike) -> Bool {
    if lhs.feedBackType != rhs.feedBackType {return false}
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_WeightButton: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WeightButton"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "jump_url"),
    2: .same(proto: "title"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.jumpURL) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.jumpURL.isEmpty {
      try visitor.visitSingularStringField(value: self.jumpURL, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_WeightButton, rhs: Bilibili_App_Dynamic_V2_WeightButton) -> Bool {
    if lhs.jumpURL != rhs.jumpURL {return false}
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleComment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleComment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cmtShowItem"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.cmtShowItem) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cmtShowItem.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cmtShowItem, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleComment, rhs: Bilibili_App_Dynamic_V2_ModuleComment) -> Bool {
    if lhs.cmtShowItem != rhs.cmtShowItem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_CmtShowItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CmtShowItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "uname"),
    3: .same(proto: "uri"),
    4: .same(proto: "comment"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.uid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uname) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.comment) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.uid != 0 {
      try visitor.visitSingularInt64Field(value: self.uid, fieldNumber: 1)
    }
    if !self.uname.isEmpty {
      try visitor.visitSingularStringField(value: self.uname, fieldNumber: 2)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 3)
    }
    if !self.comment.isEmpty {
      try visitor.visitSingularStringField(value: self.comment, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_CmtShowItem, rhs: Bilibili_App_Dynamic_V2_CmtShowItem) -> Bool {
    if lhs.uid != rhs.uid {return false}
    if lhs.uname != rhs.uname {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.comment != rhs.comment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynAdditionCommonFollowReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "dyn_id"),
    3: .standard(proto: "card_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.dynID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.cardType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .none {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if !self.dynID.isEmpty {
      try visitor.visitSingularStringField(value: self.dynID, fieldNumber: 2)
    }
    if !self.cardType.isEmpty {
      try visitor.visitSingularStringField(value: self.cardType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq, rhs: Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReq) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.dynID != rhs.dynID {return false}
    if lhs.cardType != rhs.cardType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynAdditionCommonFollowReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .none {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReply, rhs: Bilibili_App_Dynamic_V2_DynAdditionCommonFollowReply) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynThumbReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynThumbReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .standard(proto: "dyn_id"),
    3: .standard(proto: "dyn_type"),
    4: .same(proto: "rid"),
    5: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.uid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.dynID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.dynType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.rid) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.uid != 0 {
      try visitor.visitSingularInt64Field(value: self.uid, fieldNumber: 1)
    }
    if !self.dynID.isEmpty {
      try visitor.visitSingularStringField(value: self.dynID, fieldNumber: 2)
    }
    if self.dynType != 0 {
      try visitor.visitSingularInt64Field(value: self.dynType, fieldNumber: 3)
    }
    if !self.rid.isEmpty {
      try visitor.visitSingularStringField(value: self.rid, fieldNumber: 4)
    }
    if self.type != .cancel {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynThumbReq, rhs: Bilibili_App_Dynamic_V2_DynThumbReq) -> Bool {
    if lhs.uid != rhs.uid {return false}
    if lhs.dynID != rhs.dynID {return false}
    if lhs.dynType != rhs.dynType {return false}
    if lhs.rid != rhs.rid {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynFakeCardReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynFakeCardReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.content) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynFakeCardReq, rhs: Bilibili_App_Dynamic_V2_DynFakeCardReq) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynFakeCardReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynFakeCardReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._item) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._item {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynFakeCardReply, rhs: Bilibili_App_Dynamic_V2_DynFakeCardReply) -> Bool {
    if lhs._item != rhs._item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynRcmdUpExchangeReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "dislikeTs"),
    3: .same(proto: "from"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.uid) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.dislikeTs) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.from) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.uid != 0 {
      try visitor.visitSingularInt64Field(value: self.uid, fieldNumber: 1)
    }
    if self.dislikeTs != 0 {
      try visitor.visitSingularInt64Field(value: self.dislikeTs, fieldNumber: 2)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq, rhs: Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReq) -> Bool {
    if lhs.uid != rhs.uid {return false}
    if lhs.dislikeTs != rhs.dislikeTs {return false}
    if lhs.from != rhs.from {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynRcmdUpExchangeReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unfollow"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._unfollow) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._unfollow {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReply, rhs: Bilibili_App_Dynamic_V2_DynRcmdUpExchangeReply) -> Bool {
    if lhs._unfollow != rhs._unfollow {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynAllPersonalReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynAllPersonalReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_uid"),
    2: .same(proto: "offset"),
    3: .same(proto: "page"),
    4: .standard(proto: "is_preload"),
    5: .standard(proto: "playurl_param"),
    6: .standard(proto: "local_time"),
    7: .same(proto: "footprint"),
    8: .same(proto: "from"),
    9: .standard(proto: "player_args"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.hostUid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.offset) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.page) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.isPreload) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._playurlParam) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.localTime) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.footprint) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._playerArgs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.hostUid != 0 {
      try visitor.visitSingularInt64Field(value: self.hostUid, fieldNumber: 1)
    }
    if !self.offset.isEmpty {
      try visitor.visitSingularStringField(value: self.offset, fieldNumber: 2)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 3)
    }
    if self.isPreload != 0 {
      try visitor.visitSingularInt32Field(value: self.isPreload, fieldNumber: 4)
    }
    try { if let v = self._playurlParam {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.localTime != 0 {
      try visitor.visitSingularInt32Field(value: self.localTime, fieldNumber: 6)
    }
    if !self.footprint.isEmpty {
      try visitor.visitSingularStringField(value: self.footprint, fieldNumber: 7)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 8)
    }
    try { if let v = self._playerArgs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynAllPersonalReq, rhs: Bilibili_App_Dynamic_V2_DynAllPersonalReq) -> Bool {
    if lhs.hostUid != rhs.hostUid {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.page != rhs.page {return false}
    if lhs.isPreload != rhs.isPreload {return false}
    if lhs._playurlParam != rhs._playurlParam {return false}
    if lhs.localTime != rhs.localTime {return false}
    if lhs.footprint != rhs.footprint {return false}
    if lhs.from != rhs.from {return false}
    if lhs._playerArgs != rhs._playerArgs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynAllPersonalReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynAllPersonalReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .same(proto: "offset"),
    3: .standard(proto: "has_more"),
    4: .standard(proto: "read_offset"),
    5: .same(proto: "relation"),
    6: .standard(proto: "addition_up"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.offset) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.hasMore_p) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.readOffset) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._relation) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._additionUp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if !self.offset.isEmpty {
      try visitor.visitSingularStringField(value: self.offset, fieldNumber: 2)
    }
    if self.hasMore_p != false {
      try visitor.visitSingularBoolField(value: self.hasMore_p, fieldNumber: 3)
    }
    if !self.readOffset.isEmpty {
      try visitor.visitSingularStringField(value: self.readOffset, fieldNumber: 4)
    }
    try { if let v = self._relation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._additionUp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynAllPersonalReply, rhs: Bilibili_App_Dynamic_V2_DynAllPersonalReply) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.hasMore_p != rhs.hasMore_p {return false}
    if lhs.readOffset != rhs.readOffset {return false}
    if lhs._relation != rhs._relation {return false}
    if lhs._additionUp != rhs._additionUp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_TopAdditionUP: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TopAdditionUP"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "up"),
    2: .standard(proto: "has_fold"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.up) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.hasFold_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.up.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.up, fieldNumber: 1)
    }
    if self.hasFold_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasFold_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_TopAdditionUP, rhs: Bilibili_App_Dynamic_V2_TopAdditionUP) -> Bool {
    if lhs.up != rhs.up {return false}
    if lhs.hasFold_p != rhs.hasFold_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynAllUpdOffsetReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_uid"),
    2: .standard(proto: "read_offset"),
    3: .same(proto: "footprint"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.hostUid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.readOffset) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.footprint) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hostUid != 0 {
      try visitor.visitSingularInt64Field(value: self.hostUid, fieldNumber: 1)
    }
    if !self.readOffset.isEmpty {
      try visitor.visitSingularStringField(value: self.readOffset, fieldNumber: 2)
    }
    if !self.footprint.isEmpty {
      try visitor.visitSingularStringField(value: self.footprint, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq, rhs: Bilibili_App_Dynamic_V2_DynAllUpdOffsetReq) -> Bool {
    if lhs.hostUid != rhs.hostUid {return false}
    if lhs.readOffset != rhs.readOffset {return false}
    if lhs.footprint != rhs.footprint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynVoteReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynVoteReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vote_id"),
    2: .same(proto: "votes"),
    3: .same(proto: "status"),
    4: .standard(proto: "dynamic_id"),
    5: .same(proto: "share"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.voteID) }()
      case 2: try { try decoder.decodeRepeatedInt64Field(value: &self.votes) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.dynamicID) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.share) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.voteID != 0 {
      try visitor.visitSingularInt64Field(value: self.voteID, fieldNumber: 1)
    }
    if !self.votes.isEmpty {
      try visitor.visitPackedInt64Field(value: self.votes, fieldNumber: 2)
    }
    if self.status != .normal {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    if !self.dynamicID.isEmpty {
      try visitor.visitSingularStringField(value: self.dynamicID, fieldNumber: 4)
    }
    if self.share != false {
      try visitor.visitSingularBoolField(value: self.share, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynVoteReq, rhs: Bilibili_App_Dynamic_V2_DynVoteReq) -> Bool {
    if lhs.voteID != rhs.voteID {return false}
    if lhs.votes != rhs.votes {return false}
    if lhs.status != rhs.status {return false}
    if lhs.dynamicID != rhs.dynamicID {return false}
    if lhs.share != rhs.share {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynVoteReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynVoteReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
    2: .same(proto: "toast"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._item) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.toast) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._item {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.toast.isEmpty {
      try visitor.visitSingularStringField(value: self.toast, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynVoteReply, rhs: Bilibili_App_Dynamic_V2_DynVoteReply) -> Bool {
    if lhs._item != rhs._item {return false}
    if lhs.toast != rhs.toast {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_Relation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Relation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "is_follow"),
    3: .standard(proto: "is_followed"),
    4: .same(proto: "title"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.isFollow) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.isFollowed) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.title) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .none {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if self.isFollow != 0 {
      try visitor.visitSingularInt32Field(value: self.isFollow, fieldNumber: 2)
    }
    if self.isFollowed != 0 {
      try visitor.visitSingularInt32Field(value: self.isFollowed, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_Relation, rhs: Bilibili_App_Dynamic_V2_Relation) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.isFollow != rhs.isFollow {return false}
    if lhs.isFollowed != rhs.isFollowed {return false}
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MixUpListLiveItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MixUpListLiveItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "room_id"),
    3: .same(proto: "uri"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.roomID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != false {
      try visitor.visitSingularBoolField(value: self.status, fieldNumber: 1)
    }
    if self.roomID != 0 {
      try visitor.visitSingularInt64Field(value: self.roomID, fieldNumber: 2)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MixUpListLiveItem, rhs: Bilibili_App_Dynamic_V2_MixUpListLiveItem) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.roomID != rhs.roomID {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_MixUpListItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MixUpListItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .standard(proto: "special_attention"),
    3: .standard(proto: "reddot_state"),
    4: .standard(proto: "live_info"),
    5: .same(proto: "name"),
    6: .same(proto: "face"),
    7: .same(proto: "official"),
    8: .same(proto: "vip"),
    9: .same(proto: "relation"),
  ]

  fileprivate class _StorageClass {
    var _uid: Int64 = 0
    var _specialAttention: Int32 = 0
    var _reddotState: Int32 = 0
    var _liveInfo: Bilibili_App_Dynamic_V2_MixUpListLiveItem? = nil
    var _name: String = String()
    var _face: String = String()
    var _official: Bilibili_App_Dynamic_V2_OfficialVerify? = nil
    var _vip: Bilibili_App_Dynamic_V2_VipInfo? = nil
    var _relation: Bilibili_App_Dynamic_V2_Relation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uid = source._uid
      _specialAttention = source._specialAttention
      _reddotState = source._reddotState
      _liveInfo = source._liveInfo
      _name = source._name
      _face = source._face
      _official = source._official
      _vip = source._vip
      _relation = source._relation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._uid) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._specialAttention) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._reddotState) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._liveInfo) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._face) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._official) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._vip) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._relation) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._uid != 0 {
        try visitor.visitSingularInt64Field(value: _storage._uid, fieldNumber: 1)
      }
      if _storage._specialAttention != 0 {
        try visitor.visitSingularInt32Field(value: _storage._specialAttention, fieldNumber: 2)
      }
      if _storage._reddotState != 0 {
        try visitor.visitSingularInt32Field(value: _storage._reddotState, fieldNumber: 3)
      }
      try { if let v = _storage._liveInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 5)
      }
      if !_storage._face.isEmpty {
        try visitor.visitSingularStringField(value: _storage._face, fieldNumber: 6)
      }
      try { if let v = _storage._official {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._vip {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._relation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_MixUpListItem, rhs: Bilibili_App_Dynamic_V2_MixUpListItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._specialAttention != rhs_storage._specialAttention {return false}
        if _storage._reddotState != rhs_storage._reddotState {return false}
        if _storage._liveInfo != rhs_storage._liveInfo {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._face != rhs_storage._face {return false}
        if _storage._official != rhs_storage._official {return false}
        if _storage._vip != rhs_storage._vip {return false}
        if _storage._relation != rhs_storage._relation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynMixUpListViewMoreReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sort_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.sortType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sortType != 0 {
      try visitor.visitSingularInt32Field(value: self.sortType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq, rhs: Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReq) -> Bool {
    if lhs.sortType != rhs.sortType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_SortType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SortType"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sort_type"),
    2: .standard(proto: "sort_type_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.sortType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sortTypeName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sortType != 0 {
      try visitor.visitSingularInt32Field(value: self.sortType, fieldNumber: 1)
    }
    if !self.sortTypeName.isEmpty {
      try visitor.visitSingularStringField(value: self.sortTypeName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_SortType, rhs: Bilibili_App_Dynamic_V2_SortType) -> Bool {
    if lhs.sortType != rhs.sortType {return false}
    if lhs.sortTypeName != rhs.sortTypeName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynMixUpListViewMoreReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
    2: .standard(proto: "search_default_text"),
    3: .standard(proto: "sort_types"),
    4: .standard(proto: "show_more_sort_types"),
    5: .standard(proto: "default_sort_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.searchDefaultText) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.sortTypes) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.showMoreSortTypes) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.defaultSortType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    if !self.searchDefaultText.isEmpty {
      try visitor.visitSingularStringField(value: self.searchDefaultText, fieldNumber: 2)
    }
    if !self.sortTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sortTypes, fieldNumber: 3)
    }
    if self.showMoreSortTypes != false {
      try visitor.visitSingularBoolField(value: self.showMoreSortTypes, fieldNumber: 4)
    }
    if self.defaultSortType != 0 {
      try visitor.visitSingularInt32Field(value: self.defaultSortType, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReply, rhs: Bilibili_App_Dynamic_V2_DynMixUpListViewMoreReply) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.searchDefaultText != rhs.searchDefaultText {return false}
    if lhs.sortTypes != rhs.sortTypes {return false}
    if lhs.showMoreSortTypes != rhs.showMoreSortTypes {return false}
    if lhs.defaultSortType != rhs.defaultSortType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynLightReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynLightReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "history_offset"),
    2: .same(proto: "page"),
    3: .same(proto: "from"),
    4: .standard(proto: "player_args"),
    5: .standard(proto: "local_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.historyOffset) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.page) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._playerArgs) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.localTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.historyOffset.isEmpty {
      try visitor.visitSingularStringField(value: self.historyOffset, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 2)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 3)
    }
    try { if let v = self._playerArgs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.localTime != 0 {
      try visitor.visitSingularInt32Field(value: self.localTime, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynLightReq, rhs: Bilibili_App_Dynamic_V2_DynLightReq) -> Bool {
    if lhs.historyOffset != rhs.historyOffset {return false}
    if lhs.page != rhs.page {return false}
    if lhs.from != rhs.from {return false}
    if lhs._playerArgs != rhs._playerArgs {return false}
    if lhs.localTime != rhs.localTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynLightReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynLightReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dynamic_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._dynamicList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._dynamicList {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynLightReply, rhs: Bilibili_App_Dynamic_V2_DynLightReply) -> Bool {
    if lhs._dynamicList != rhs._dynamicList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynDetailReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynDetailReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .standard(proto: "dynamic_id"),
    3: .standard(proto: "dyn_type"),
    4: .same(proto: "rid"),
    5: .standard(proto: "ad_param"),
    6: .same(proto: "from"),
    7: .standard(proto: "player_args"),
    8: .standard(proto: "share_id"),
    9: .standard(proto: "share_mode"),
    10: .standard(proto: "local_time"),
    11: .same(proto: "pattern"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.uid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.dynamicID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.dynType) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.rid) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._adParam) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._playerArgs) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.shareID) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.shareMode) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.localTime) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.pattern) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.uid != 0 {
      try visitor.visitSingularInt64Field(value: self.uid, fieldNumber: 1)
    }
    if !self.dynamicID.isEmpty {
      try visitor.visitSingularStringField(value: self.dynamicID, fieldNumber: 2)
    }
    if self.dynType != 0 {
      try visitor.visitSingularInt64Field(value: self.dynType, fieldNumber: 3)
    }
    if self.rid != 0 {
      try visitor.visitSingularInt64Field(value: self.rid, fieldNumber: 4)
    }
    try { if let v = self._adParam {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 6)
    }
    try { if let v = self._playerArgs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if !self.shareID.isEmpty {
      try visitor.visitSingularStringField(value: self.shareID, fieldNumber: 8)
    }
    if self.shareMode != 0 {
      try visitor.visitSingularInt32Field(value: self.shareMode, fieldNumber: 9)
    }
    if self.localTime != 0 {
      try visitor.visitSingularInt32Field(value: self.localTime, fieldNumber: 10)
    }
    if !self.pattern.isEmpty {
      try visitor.visitSingularStringField(value: self.pattern, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynDetailReq, rhs: Bilibili_App_Dynamic_V2_DynDetailReq) -> Bool {
    if lhs.uid != rhs.uid {return false}
    if lhs.dynamicID != rhs.dynamicID {return false}
    if lhs.dynType != rhs.dynType {return false}
    if lhs.rid != rhs.rid {return false}
    if lhs._adParam != rhs._adParam {return false}
    if lhs.from != rhs.from {return false}
    if lhs._playerArgs != rhs._playerArgs {return false}
    if lhs.shareID != rhs.shareID {return false}
    if lhs.shareMode != rhs.shareMode {return false}
    if lhs.localTime != rhs.localTime {return false}
    if lhs.pattern != rhs.pattern {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynDetailReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynDetailReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._item) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._item {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynDetailReply, rhs: Bilibili_App_Dynamic_V2_DynDetailReply) -> Bool {
    if lhs._item != rhs._item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_LikeListReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LikeListReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dynamic_id"),
    2: .standard(proto: "dyn_type"),
    3: .same(proto: "rid"),
    4: .standard(proto: "uid_offset"),
    5: .same(proto: "page"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dynamicID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.dynType) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.rid) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.uidOffset) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.page) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dynamicID.isEmpty {
      try visitor.visitSingularStringField(value: self.dynamicID, fieldNumber: 1)
    }
    if self.dynType != 0 {
      try visitor.visitSingularInt64Field(value: self.dynType, fieldNumber: 2)
    }
    if self.rid != 0 {
      try visitor.visitSingularInt64Field(value: self.rid, fieldNumber: 3)
    }
    if self.uidOffset != 0 {
      try visitor.visitSingularInt64Field(value: self.uidOffset, fieldNumber: 4)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_LikeListReq, rhs: Bilibili_App_Dynamic_V2_LikeListReq) -> Bool {
    if lhs.dynamicID != rhs.dynamicID {return false}
    if lhs.dynType != rhs.dynType {return false}
    if lhs.rid != rhs.rid {return false}
    if lhs.uidOffset != rhs.uidOffset {return false}
    if lhs.page != rhs.page {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_LikeListReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LikeListReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .standard(proto: "has_more"),
    3: .standard(proto: "total_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.hasMore_p) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.totalCount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if self.hasMore_p != false {
      try visitor.visitSingularBoolField(value: self.hasMore_p, fieldNumber: 2)
    }
    if self.totalCount != 0 {
      try visitor.visitSingularInt64Field(value: self.totalCount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_LikeListReply, rhs: Bilibili_App_Dynamic_V2_LikeListReply) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.hasMore_p != rhs.hasMore_p {return false}
    if lhs.totalCount != rhs.totalCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_RepostListReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RepostListReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dynamic_id"),
    2: .standard(proto: "dyn_type"),
    3: .same(proto: "rid"),
    4: .same(proto: "offset"),
    5: .same(proto: "from"),
    6: .standard(proto: "repost_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dynamicID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.dynType) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.rid) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.offset) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.repostType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dynamicID.isEmpty {
      try visitor.visitSingularStringField(value: self.dynamicID, fieldNumber: 1)
    }
    if self.dynType != 0 {
      try visitor.visitSingularInt64Field(value: self.dynType, fieldNumber: 2)
    }
    if self.rid != 0 {
      try visitor.visitSingularInt64Field(value: self.rid, fieldNumber: 3)
    }
    if !self.offset.isEmpty {
      try visitor.visitSingularStringField(value: self.offset, fieldNumber: 4)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 5)
    }
    if self.repostType != .repostHot {
      try visitor.visitSingularEnumField(value: self.repostType, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_RepostListReq, rhs: Bilibili_App_Dynamic_V2_RepostListReq) -> Bool {
    if lhs.dynamicID != rhs.dynamicID {return false}
    if lhs.dynType != rhs.dynType {return false}
    if lhs.rid != rhs.rid {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.from != rhs.from {return false}
    if lhs.repostType != rhs.repostType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_RepostListRsp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RepostListRsp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .same(proto: "offset"),
    3: .standard(proto: "has_more"),
    4: .standard(proto: "total_count"),
    5: .standard(proto: "repost_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.offset) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.hasMore_p) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.totalCount) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.repostType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if !self.offset.isEmpty {
      try visitor.visitSingularStringField(value: self.offset, fieldNumber: 2)
    }
    if self.hasMore_p != false {
      try visitor.visitSingularBoolField(value: self.hasMore_p, fieldNumber: 3)
    }
    if self.totalCount != 0 {
      try visitor.visitSingularInt64Field(value: self.totalCount, fieldNumber: 4)
    }
    if self.repostType != .repostHot {
      try visitor.visitSingularEnumField(value: self.repostType, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_RepostListRsp, rhs: Bilibili_App_Dynamic_V2_RepostListRsp) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.hasMore_p != rhs.hasMore_p {return false}
    if lhs.totalCount != rhs.totalCount {return false}
    if lhs.repostType != rhs.repostType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleShareInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleShareInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .standard(proto: "share_channels"),
    3: .standard(proto: "share_origin"),
    4: .same(proto: "oid"),
    5: .same(proto: "sid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.shareChannels) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.shareOrigin) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.oid) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.sid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.shareChannels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shareChannels, fieldNumber: 2)
    }
    if !self.shareOrigin.isEmpty {
      try visitor.visitSingularStringField(value: self.shareOrigin, fieldNumber: 3)
    }
    if !self.oid.isEmpty {
      try visitor.visitSingularStringField(value: self.oid, fieldNumber: 4)
    }
    if !self.sid.isEmpty {
      try visitor.visitSingularStringField(value: self.sid, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleShareInfo, rhs: Bilibili_App_Dynamic_V2_ModuleShareInfo) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.shareChannels != rhs.shareChannels {return false}
    if lhs.shareOrigin != rhs.shareOrigin {return false}
    if lhs.oid != rhs.oid {return false}
    if lhs.sid != rhs.sid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ShareChannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShareChannel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "image"),
    3: .same(proto: "channel"),
    4: .same(proto: "reserve"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.image) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.channel) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._reserve) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 2)
    }
    if !self.channel.isEmpty {
      try visitor.visitSingularStringField(value: self.channel, fieldNumber: 3)
    }
    try { if let v = self._reserve {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ShareChannel, rhs: Bilibili_App_Dynamic_V2_ShareChannel) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.image != rhs.image {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs._reserve != rhs._reserve {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ShareReserve: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShareReserve"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "desc"),
    3: .standard(proto: "qr_code_icon"),
    4: .standard(proto: "qr_code_text"),
    5: .standard(proto: "qr_code_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.qrCodeIcon) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.qrCodeText) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.qrCodeURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 2)
    }
    if !self.qrCodeIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.qrCodeIcon, fieldNumber: 3)
    }
    if !self.qrCodeText.isEmpty {
      try visitor.visitSingularStringField(value: self.qrCodeText, fieldNumber: 4)
    }
    if !self.qrCodeURL.isEmpty {
      try visitor.visitSingularStringField(value: self.qrCodeURL, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ShareReserve, rhs: Bilibili_App_Dynamic_V2_ShareReserve) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.qrCodeIcon != rhs.qrCodeIcon {return false}
    if lhs.qrCodeText != rhs.qrCodeText {return false}
    if lhs.qrCodeURL != rhs.qrCodeURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleRecommend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleRecommend"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "module_title"),
    2: .same(proto: "image"),
    3: .same(proto: "tag"),
    4: .same(proto: "title"),
    5: .standard(proto: "jump_url"),
    6: .same(proto: "ad"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.moduleTitle) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.image) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.tag) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.jumpURL) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.ad) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.moduleTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.moduleTitle, fieldNumber: 1)
    }
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 2)
    }
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 4)
    }
    if !self.jumpURL.isEmpty {
      try visitor.visitSingularStringField(value: self.jumpURL, fieldNumber: 5)
    }
    if !self.ad.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ad, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleRecommend, rhs: Bilibili_App_Dynamic_V2_ModuleRecommend) -> Bool {
    if lhs.moduleTitle != rhs.moduleTitle {return false}
    if lhs.image != rhs.image {return false}
    if lhs.tag != rhs.tag {return false}
    if lhs.title != rhs.title {return false}
    if lhs.jumpURL != rhs.jumpURL {return false}
    if lhs.ad != rhs.ad {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynSpaceReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynSpaceReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_uid"),
    2: .standard(proto: "history_offset"),
    3: .standard(proto: "player_args"),
    4: .standard(proto: "local_time"),
    5: .same(proto: "page"),
    6: .same(proto: "from"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.hostUid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.historyOffset) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._playerArgs) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.localTime) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.page) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.from) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.hostUid != 0 {
      try visitor.visitSingularInt64Field(value: self.hostUid, fieldNumber: 1)
    }
    if !self.historyOffset.isEmpty {
      try visitor.visitSingularStringField(value: self.historyOffset, fieldNumber: 2)
    }
    try { if let v = self._playerArgs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.localTime != 0 {
      try visitor.visitSingularInt32Field(value: self.localTime, fieldNumber: 4)
    }
    if self.page != 0 {
      try visitor.visitSingularInt64Field(value: self.page, fieldNumber: 5)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynSpaceReq, rhs: Bilibili_App_Dynamic_V2_DynSpaceReq) -> Bool {
    if lhs.hostUid != rhs.hostUid {return false}
    if lhs.historyOffset != rhs.historyOffset {return false}
    if lhs._playerArgs != rhs._playerArgs {return false}
    if lhs.localTime != rhs.localTime {return false}
    if lhs.page != rhs.page {return false}
    if lhs.from != rhs.from {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynSpaceRsp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynSpaceRsp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .standard(proto: "history_offset"),
    3: .standard(proto: "has_more"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.historyOffset) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.hasMore_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if !self.historyOffset.isEmpty {
      try visitor.visitSingularStringField(value: self.historyOffset, fieldNumber: 2)
    }
    if self.hasMore_p != false {
      try visitor.visitSingularBoolField(value: self.hasMore_p, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynSpaceRsp, rhs: Bilibili_App_Dynamic_V2_DynSpaceRsp) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.historyOffset != rhs.historyOffset {return false}
    if lhs.hasMore_p != rhs.hasMore_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleTop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleTop"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tp_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.tpList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tpList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tpList, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleTop, rhs: Bilibili_App_Dynamic_V2_ModuleTop) -> Bool {
    if lhs.tpList != rhs.tpList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleButtom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleButtom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "module_stat"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._moduleStat) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._moduleStat {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleButtom, rhs: Bilibili_App_Dynamic_V2_ModuleButtom) -> Bool {
    if lhs._moduleStat != rhs._moduleStat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynRcmdReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynRcmdReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_args"),
    2: .standard(proto: "local_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._playerArgs) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.localTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._playerArgs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.localTime != 0 {
      try visitor.visitSingularInt32Field(value: self.localTime, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynRcmdReq, rhs: Bilibili_App_Dynamic_V2_DynRcmdReq) -> Bool {
    if lhs._playerArgs != rhs._playerArgs {return false}
    if lhs.localTime != rhs.localTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynRcmdReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynRcmdReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "region_rcmd"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._regionRcmd) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._regionRcmd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynRcmdReply, rhs: Bilibili_App_Dynamic_V2_DynRcmdReply) -> Bool {
    if lhs._regionRcmd != rhs._regionRcmd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynRegionRcmd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynRegionRcmd"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
    2: .same(proto: "opts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._opts) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    try { if let v = self._opts {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynRegionRcmd, rhs: Bilibili_App_Dynamic_V2_DynRegionRcmd) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs._opts != rhs._opts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_RcmdOption: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RcmdOption"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "show_title"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.showTitle) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.showTitle != false {
      try visitor.visitSingularBoolField(value: self.showTitle, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_RcmdOption, rhs: Bilibili_App_Dynamic_V2_RcmdOption) -> Bool {
    if lhs.showTitle != rhs.showTitle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_DynRegionRcmdItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynRegionRcmdItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rid"),
    2: .same(proto: "title"),
    3: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.rid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rid != 0 {
      try visitor.visitSingularInt64Field(value: self.rid, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_DynRegionRcmdItem, rhs: Bilibili_App_Dynamic_V2_DynRegionRcmdItem) -> Bool {
    if lhs.rid != rhs.rid {return false}
    if lhs.title != rhs.title {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_ModuleRcmd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleRcmd"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "author"),
    2: .same(proto: "items"),
    3: .standard(proto: "server_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._author) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.serverInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._author {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    if !self.serverInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.serverInfo, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_ModuleRcmd, rhs: Bilibili_App_Dynamic_V2_ModuleRcmd) -> Bool {
    if lhs._author != rhs._author {return false}
    if lhs.items != rhs.items {return false}
    if lhs.serverInfo != rhs.serverInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_RcmdAuthor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RcmdAuthor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "author"),
    2: .same(proto: "desc"),
    3: .same(proto: "relation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._author) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._relation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._author {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 2)
    }
    try { if let v = self._relation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_RcmdAuthor, rhs: Bilibili_App_Dynamic_V2_RcmdAuthor) -> Bool {
    if lhs._author != rhs._author {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs._relation != rhs._relation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_RcmdItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RcmdItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "rcmd_archive"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try {
        var v: Bilibili_App_Dynamic_V2_RcmdArchive?
        var hadOneofValue = false
        if let current = self.rcmdItem {
          hadOneofValue = true
          if case .rcmdArchive(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.rcmdItem = .rcmdArchive(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != .rcmdArchive {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    try { if case .rcmdArchive(let v)? = self.rcmdItem {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_RcmdItem, rhs: Bilibili_App_Dynamic_V2_RcmdItem) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.rcmdItem != rhs.rcmdItem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Dynamic_V2_RcmdArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RcmdArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "cover"),
    3: .standard(proto: "cover_left_icon_1"),
    4: .standard(proto: "cover_left_text_1"),
    5: .same(proto: "uri"),
    6: .standard(proto: "is_pgc"),
    7: .same(proto: "aid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cover) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.coverLeftIcon1) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.coverLeftText1) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isPgc) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.aid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.cover.isEmpty {
      try visitor.visitSingularStringField(value: self.cover, fieldNumber: 2)
    }
    if self.coverLeftIcon1 != .none {
      try visitor.visitSingularEnumField(value: self.coverLeftIcon1, fieldNumber: 3)
    }
    if !self.coverLeftText1.isEmpty {
      try visitor.visitSingularStringField(value: self.coverLeftText1, fieldNumber: 4)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 5)
    }
    if self.isPgc != false {
      try visitor.visitSingularBoolField(value: self.isPgc, fieldNumber: 6)
    }
    if self.aid != 0 {
      try visitor.visitSingularInt64Field(value: self.aid, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Dynamic_V2_RcmdArchive, rhs: Bilibili_App_Dynamic_V2_RcmdArchive) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.cover != rhs.cover {return false}
    if lhs.coverLeftIcon1 != rhs.coverLeftIcon1 {return false}
    if lhs.coverLeftText1 != rhs.coverLeftText1 {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.isPgc != rhs.isPgc {return false}
    if lhs.aid != rhs.aid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
