// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bilibili/metadata/metadata.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 请求元数据
/// gRPC头部:x-bili-metadata-bin
struct Bilibili_Metadata_Metadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 登录Token
  var accessKey: String = String()

  /// 包类型
  var mobiApp: String = String()

  /// 运行设备
  var device: String = String()

  /// 构建id
  var build: Int32 = 0

  /// 渠道
  var channel: String = String()

  /// 设备buvid
  var buvid: String = String()

  /// 平台类型
  var platform: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Bilibili_Metadata_Metadata: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bilibili.metadata"

extension Bilibili_Metadata_Metadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Metadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "access_key"),
    2: .standard(proto: "mobi_app"),
    3: .same(proto: "device"),
    4: .same(proto: "build"),
    5: .same(proto: "channel"),
    6: .same(proto: "buvid"),
    7: .same(proto: "platform"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accessKey) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.mobiApp) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.device) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.build) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.channel) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.buvid) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accessKey.isEmpty {
      try visitor.visitSingularStringField(value: self.accessKey, fieldNumber: 1)
    }
    if !self.mobiApp.isEmpty {
      try visitor.visitSingularStringField(value: self.mobiApp, fieldNumber: 2)
    }
    if !self.device.isEmpty {
      try visitor.visitSingularStringField(value: self.device, fieldNumber: 3)
    }
    if self.build != 0 {
      try visitor.visitSingularInt32Field(value: self.build, fieldNumber: 4)
    }
    if !self.channel.isEmpty {
      try visitor.visitSingularStringField(value: self.channel, fieldNumber: 5)
    }
    if !self.buvid.isEmpty {
      try visitor.visitSingularStringField(value: self.buvid, fieldNumber: 6)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Metadata_Metadata, rhs: Bilibili_Metadata_Metadata) -> Bool {
    if lhs.accessKey != rhs.accessKey {return false}
    if lhs.mobiApp != rhs.mobiApp {return false}
    if lhs.device != rhs.device {return false}
    if lhs.build != rhs.build {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.buvid != rhs.buvid {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
