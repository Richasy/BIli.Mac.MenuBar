// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bilibili/app/card/v1/common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 条目基本信息
struct Bilibili_App_Card_V1_Base {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 卡片类型
  var cardType: String {
    get {return _storage._cardType}
    set {_uniqueStorage()._cardType = newValue}
  }

  /// 卡片跳转类型?
  var cardGoto: String {
    get {return _storage._cardGoto}
    set {_uniqueStorage()._cardGoto = newValue}
  }

  /// 跳转类型
  /// av:视频稿件 mid:用户空间
  var goto: String {
    get {return _storage._goto}
    set {_uniqueStorage()._goto = newValue}
  }

  /// 目标参数
  var param: String {
    get {return _storage._param}
    set {_uniqueStorage()._param = newValue}
  }

  /// 封面url
  var cover: String {
    get {return _storage._cover}
    set {_uniqueStorage()._cover = newValue}
  }

  /// 标题
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// 跳转uri
  var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  var threePoint: Bilibili_App_Card_V1_ThreePoint {
    get {return _storage._threePoint ?? Bilibili_App_Card_V1_ThreePoint()}
    set {_uniqueStorage()._threePoint = newValue}
  }
  /// Returns true if `threePoint` has been explicitly set.
  var hasThreePoint: Bool {return _storage._threePoint != nil}
  /// Clears the value of `threePoint`. Subsequent reads from it will return its default value.
  mutating func clearThreePoint() {_uniqueStorage()._threePoint = nil}

  var args: Bilibili_App_Card_V1_Args {
    get {return _storage._args ?? Bilibili_App_Card_V1_Args()}
    set {_uniqueStorage()._args = newValue}
  }
  /// Returns true if `args` has been explicitly set.
  var hasArgs: Bool {return _storage._args != nil}
  /// Clears the value of `args`. Subsequent reads from it will return its default value.
  mutating func clearArgs() {_uniqueStorage()._args = nil}

  var playerArgs: Bilibili_App_Card_V1_PlayerArgs {
    get {return _storage._playerArgs ?? Bilibili_App_Card_V1_PlayerArgs()}
    set {_uniqueStorage()._playerArgs = newValue}
  }
  /// Returns true if `playerArgs` has been explicitly set.
  var hasPlayerArgs: Bool {return _storage._playerArgs != nil}
  /// Clears the value of `playerArgs`. Subsequent reads from it will return its default value.
  mutating func clearPlayerArgs() {_uniqueStorage()._playerArgs = nil}

  /// 条目排位序号
  var idx: Int64 {
    get {return _storage._idx}
    set {_uniqueStorage()._idx = newValue}
  }

  var adInfo: Bilibili_App_Card_V1_AdInfo {
    get {return _storage._adInfo ?? Bilibili_App_Card_V1_AdInfo()}
    set {_uniqueStorage()._adInfo = newValue}
  }
  /// Returns true if `adInfo` has been explicitly set.
  var hasAdInfo: Bool {return _storage._adInfo != nil}
  /// Clears the value of `adInfo`. Subsequent reads from it will return its default value.
  mutating func clearAdInfo() {_uniqueStorage()._adInfo = nil}

  var mask: Bilibili_App_Card_V1_Mask {
    get {return _storage._mask ?? Bilibili_App_Card_V1_Mask()}
    set {_uniqueStorage()._mask = newValue}
  }
  /// Returns true if `mask` has been explicitly set.
  var hasMask: Bool {return _storage._mask != nil}
  /// Clears the value of `mask`. Subsequent reads from it will return its default value.
  mutating func clearMask() {_uniqueStorage()._mask = nil}

  ///来源标识
  /// recommend:推荐 operation:管理?
  var fromType: String {
    get {return _storage._fromType}
    set {_uniqueStorage()._fromType = newValue}
  }

  var threePointV2: [Bilibili_App_Card_V1_ThreePointV2] {
    get {return _storage._threePointV2}
    set {_uniqueStorage()._threePointV2 = newValue}
  }

  var threePointV3: [Bilibili_App_Card_V1_ThreePointV3] {
    get {return _storage._threePointV3}
    set {_uniqueStorage()._threePointV3 = newValue}
  }

  var descButton: Bilibili_App_Card_V1_Button {
    get {return _storage._descButton ?? Bilibili_App_Card_V1_Button()}
    set {_uniqueStorage()._descButton = newValue}
  }
  /// Returns true if `descButton` has been explicitly set.
  var hasDescButton: Bool {return _storage._descButton != nil}
  /// Clears the value of `descButton`. Subsequent reads from it will return its default value.
  mutating func clearDescButton() {_uniqueStorage()._descButton = nil}

  /// 三点v4
  var threePointV4: Bilibili_App_Card_V1_ThreePointV4 {
    get {return _storage._threePointV4 ?? Bilibili_App_Card_V1_ThreePointV4()}
    set {_uniqueStorage()._threePointV4 = newValue}
  }
  /// Returns true if `threePointV4` has been explicitly set.
  var hasThreePointV4: Bool {return _storage._threePointV4 != nil}
  /// Clears the value of `threePointV4`. Subsequent reads from it will return its default value.
  mutating func clearThreePointV4() {_uniqueStorage()._threePointV4 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 按钮信息
struct Bilibili_App_Card_V1_Button {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 文案
  var text: String = String()

  /// 参数
  var param: String = String()

  var uri: String = String()

  /// 事件
  var event: String = String()

  var selected: Int32 = 0

  /// 类型
  var type: Int32 = 0

  /// 事件v2
  var eventV2: String = String()

  /// 关系信息
  var relation: Bilibili_App_Card_V1_Relation {
    get {return _relation ?? Bilibili_App_Card_V1_Relation()}
    set {_relation = newValue}
  }
  /// Returns true if `relation` has been explicitly set.
  var hasRelation: Bool {return self._relation != nil}
  /// Clears the value of `relation`. Subsequent reads from it will return its default value.
  mutating func clearRelation() {self._relation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _relation: Bilibili_App_Card_V1_Relation? = nil
}

struct Bilibili_App_Card_V1_ThreePoint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dislikeReasons: [Bilibili_App_Card_V1_DislikeReason] = []

  var feedbacks: [Bilibili_App_Card_V1_DislikeReason] = []

  ///稍后再看
  var watchLater: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_App_Card_V1_DislikeReason {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_App_Card_V1_Args {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Int32 = 0

  var upID: Int64 = 0

  var upName: String = String()

  var rid: Int32 = 0

  var rname: String = String()

  var tid: Int64 = 0

  var tname: String = String()

  var trackID: String = String()

  var state: String = String()

  var convergeType: Int32 = 0

  var aid: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_App_Card_V1_PlayerArgs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isLive: Int32 = 0

  var aid: Int64 = 0

  var cid: Int64 = 0

  var subType: Int32 = 0

  var roomID: Int64 = 0

  var epID: Int64 = 0

  var isPreview: Int32 = 0

  var type: String = String()

  var duration: Int64 = 0

  var seasonID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_App_Card_V1_Mask {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var avatar: Bilibili_App_Card_V1_Avatar {
    get {return _storage._avatar ?? Bilibili_App_Card_V1_Avatar()}
    set {_uniqueStorage()._avatar = newValue}
  }
  /// Returns true if `avatar` has been explicitly set.
  var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
  mutating func clearAvatar() {_uniqueStorage()._avatar = nil}

  var button: Bilibili_App_Card_V1_Button {
    get {return _storage._button ?? Bilibili_App_Card_V1_Button()}
    set {_uniqueStorage()._button = newValue}
  }
  /// Returns true if `button` has been explicitly set.
  var hasButton: Bool {return _storage._button != nil}
  /// Clears the value of `button`. Subsequent reads from it will return its default value.
  mutating func clearButton() {_uniqueStorage()._button = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_App_Card_V1_Avatar {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cover: String = String()

  var text: String = String()

  var uri: String = String()

  var type: Int32 = 0

  var event: String = String()

  var eventV2: String = String()

  var defalutCover: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_App_Card_V1_ThreePointV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var subtitle: String = String()

  var reasons: [Bilibili_App_Card_V1_DislikeReason] = []

  var type: String = String()

  var id: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_App_Card_V1_ThreePointV3 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var selectedTitle: String = String()

  var subtitle: String = String()

  var reasons: [Bilibili_App_Card_V1_DislikeReason] = []

  var type: String = String()

  var id: Int64 = 0

  var selected: Int32 = 0

  var icon: String = String()

  var selectedIcon: String = String()

  var url: String = String()

  var defaultID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 三点v4
struct Bilibili_App_Card_V1_ThreePointV4 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 分享面板信息
  var sharePlane: Bilibili_App_Card_V1_SharePlane {
    get {return _sharePlane ?? Bilibili_App_Card_V1_SharePlane()}
    set {_sharePlane = newValue}
  }
  /// Returns true if `sharePlane` has been explicitly set.
  var hasSharePlane: Bool {return self._sharePlane != nil}
  /// Clears the value of `sharePlane`. Subsequent reads from it will return its default value.
  mutating func clearSharePlane() {self._sharePlane = nil}

  /// 稍后再看
  var watchLater: Bilibili_App_Card_V1_WatchLater {
    get {return _watchLater ?? Bilibili_App_Card_V1_WatchLater()}
    set {_watchLater = newValue}
  }
  /// Returns true if `watchLater` has been explicitly set.
  var hasWatchLater: Bool {return self._watchLater != nil}
  /// Clears the value of `watchLater`. Subsequent reads from it will return its default value.
  mutating func clearWatchLater() {self._watchLater = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sharePlane: Bilibili_App_Card_V1_SharePlane? = nil
  fileprivate var _watchLater: Bilibili_App_Card_V1_WatchLater? = nil
}

/// 分享面板信息
struct Bilibili_App_Card_V1_SharePlane {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 标题
  var title: String = String()

  /// 副标贴文案
  var shareSubtitle: String = String()

  /// 备注
  var desc: String = String()

  /// 封面url
  var cover: String = String()

  /// 稿件avid
  var aid: Int64 = 0

  /// 稿件bvid
  var bvid: String = String()

  /// 允许分享方式
  var shareTo: Dictionary<String,Bool> = [:]

  /// UP主昵称
  var author: String = String()

  /// UP主mid
  var authorID: Int64 = 0

  /// 短连接
  var shortLink: String = String()

  /// 播放次数文案
  var playNumber: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 稍后再看信息
struct Bilibili_App_Card_V1_WatchLater {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 稿件avid
  var aid: Int64 = 0

  /// 稿件bvid
  var bvid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 标签框信息
struct Bilibili_App_Card_V1_ReasonStyle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 文案
  var text: String = String()

  /// 文字颜色
  var textColor: String = String()

  /// 背景色
  var bgColor: String = String()

  /// 边框色
  var borderColor: String = String()

  /// 图标url
  var iconURL: String = String()

  /// 文字颜色-夜间
  var textColorNight: String = String()

  /// 背景色-夜间
  var bgColorNight: String = String()

  /// 边框色-夜间
  var borderColorNight: String = String()

  /// 图标url-夜间
  var iconNightURL: String = String()

  /// 背景风格id
  /// 1:无背景 2:有背景
  var bgStyle: Int32 = 0

  var uri: String = String()

  var iconBgURL: String = String()

  var event: String = String()

  var eventV2: String = String()

  var rightIconType: Int32 = 0

  var leftIconType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_App_Card_V1_LikeButton {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var aid: Int64 = 0

  var count: Int32 = 0

  var showCount: Bool = false

  var event: String = String()

  var selected: Int32 = 0

  var eventV2: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_App_Card_V1_Up {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var desc: String {
    get {return _storage._desc}
    set {_uniqueStorage()._desc = newValue}
  }

  var avatar: Bilibili_App_Card_V1_Avatar {
    get {return _storage._avatar ?? Bilibili_App_Card_V1_Avatar()}
    set {_uniqueStorage()._avatar = newValue}
  }
  /// Returns true if `avatar` has been explicitly set.
  var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
  mutating func clearAvatar() {_uniqueStorage()._avatar = nil}

  var officialIcon: Int32 {
    get {return _storage._officialIcon}
    set {_uniqueStorage()._officialIcon = newValue}
  }

  var descButton: Bilibili_App_Card_V1_Button {
    get {return _storage._descButton ?? Bilibili_App_Card_V1_Button()}
    set {_uniqueStorage()._descButton = newValue}
  }
  /// Returns true if `descButton` has been explicitly set.
  var hasDescButton: Bool {return _storage._descButton != nil}
  /// Clears the value of `descButton`. Subsequent reads from it will return its default value.
  mutating func clearDescButton() {_uniqueStorage()._descButton = nil}

  var cooperation: String {
    get {return _storage._cooperation}
    set {_uniqueStorage()._cooperation = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 关系信息
struct Bilibili_App_Card_V1_Relation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 关系状态
  var status: Int32 = 0

  /// 是否关注
  var isFollow: Int32 = 0

  /// 是否粉丝
  var isFollowed: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Bilibili_App_Card_V1_Base: @unchecked Sendable {}
extension Bilibili_App_Card_V1_Button: @unchecked Sendable {}
extension Bilibili_App_Card_V1_ThreePoint: @unchecked Sendable {}
extension Bilibili_App_Card_V1_DislikeReason: @unchecked Sendable {}
extension Bilibili_App_Card_V1_Args: @unchecked Sendable {}
extension Bilibili_App_Card_V1_PlayerArgs: @unchecked Sendable {}
extension Bilibili_App_Card_V1_Mask: @unchecked Sendable {}
extension Bilibili_App_Card_V1_Avatar: @unchecked Sendable {}
extension Bilibili_App_Card_V1_ThreePointV2: @unchecked Sendable {}
extension Bilibili_App_Card_V1_ThreePointV3: @unchecked Sendable {}
extension Bilibili_App_Card_V1_ThreePointV4: @unchecked Sendable {}
extension Bilibili_App_Card_V1_SharePlane: @unchecked Sendable {}
extension Bilibili_App_Card_V1_WatchLater: @unchecked Sendable {}
extension Bilibili_App_Card_V1_ReasonStyle: @unchecked Sendable {}
extension Bilibili_App_Card_V1_LikeButton: @unchecked Sendable {}
extension Bilibili_App_Card_V1_Up: @unchecked Sendable {}
extension Bilibili_App_Card_V1_Relation: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bilibili.app.card.v1"

extension Bilibili_App_Card_V1_Base: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Base"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "card_type"),
    2: .standard(proto: "card_goto"),
    3: .same(proto: "goto"),
    4: .same(proto: "param"),
    5: .same(proto: "cover"),
    6: .same(proto: "title"),
    7: .same(proto: "uri"),
    8: .standard(proto: "three_point"),
    9: .same(proto: "args"),
    10: .standard(proto: "player_args"),
    11: .same(proto: "idx"),
    12: .standard(proto: "ad_info"),
    13: .same(proto: "mask"),
    14: .standard(proto: "from_type"),
    15: .standard(proto: "three_point_v2"),
    16: .standard(proto: "three_point_v3"),
    17: .standard(proto: "desc_button"),
    18: .standard(proto: "three_point_v4"),
  ]

  fileprivate class _StorageClass {
    var _cardType: String = String()
    var _cardGoto: String = String()
    var _goto: String = String()
    var _param: String = String()
    var _cover: String = String()
    var _title: String = String()
    var _uri: String = String()
    var _threePoint: Bilibili_App_Card_V1_ThreePoint? = nil
    var _args: Bilibili_App_Card_V1_Args? = nil
    var _playerArgs: Bilibili_App_Card_V1_PlayerArgs? = nil
    var _idx: Int64 = 0
    var _adInfo: Bilibili_App_Card_V1_AdInfo? = nil
    var _mask: Bilibili_App_Card_V1_Mask? = nil
    var _fromType: String = String()
    var _threePointV2: [Bilibili_App_Card_V1_ThreePointV2] = []
    var _threePointV3: [Bilibili_App_Card_V1_ThreePointV3] = []
    var _descButton: Bilibili_App_Card_V1_Button? = nil
    var _threePointV4: Bilibili_App_Card_V1_ThreePointV4? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cardType = source._cardType
      _cardGoto = source._cardGoto
      _goto = source._goto
      _param = source._param
      _cover = source._cover
      _title = source._title
      _uri = source._uri
      _threePoint = source._threePoint
      _args = source._args
      _playerArgs = source._playerArgs
      _idx = source._idx
      _adInfo = source._adInfo
      _mask = source._mask
      _fromType = source._fromType
      _threePointV2 = source._threePointV2
      _threePointV3 = source._threePointV3
      _descButton = source._descButton
      _threePointV4 = source._threePointV4
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._cardType) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._cardGoto) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._goto) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._param) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._cover) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._uri) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._threePoint) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._args) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._playerArgs) }()
        case 11: try { try decoder.decodeSingularInt64Field(value: &_storage._idx) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._adInfo) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._mask) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._fromType) }()
        case 15: try { try decoder.decodeRepeatedMessageField(value: &_storage._threePointV2) }()
        case 16: try { try decoder.decodeRepeatedMessageField(value: &_storage._threePointV3) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._descButton) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._threePointV4) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._cardType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cardType, fieldNumber: 1)
      }
      if !_storage._cardGoto.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cardGoto, fieldNumber: 2)
      }
      if !_storage._goto.isEmpty {
        try visitor.visitSingularStringField(value: _storage._goto, fieldNumber: 3)
      }
      if !_storage._param.isEmpty {
        try visitor.visitSingularStringField(value: _storage._param, fieldNumber: 4)
      }
      if !_storage._cover.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cover, fieldNumber: 5)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 6)
      }
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 7)
      }
      try { if let v = _storage._threePoint {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._args {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._playerArgs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if _storage._idx != 0 {
        try visitor.visitSingularInt64Field(value: _storage._idx, fieldNumber: 11)
      }
      try { if let v = _storage._adInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._mask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      if !_storage._fromType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fromType, fieldNumber: 14)
      }
      if !_storage._threePointV2.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._threePointV2, fieldNumber: 15)
      }
      if !_storage._threePointV3.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._threePointV3, fieldNumber: 16)
      }
      try { if let v = _storage._descButton {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._threePointV4 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_Base, rhs: Bilibili_App_Card_V1_Base) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cardType != rhs_storage._cardType {return false}
        if _storage._cardGoto != rhs_storage._cardGoto {return false}
        if _storage._goto != rhs_storage._goto {return false}
        if _storage._param != rhs_storage._param {return false}
        if _storage._cover != rhs_storage._cover {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._uri != rhs_storage._uri {return false}
        if _storage._threePoint != rhs_storage._threePoint {return false}
        if _storage._args != rhs_storage._args {return false}
        if _storage._playerArgs != rhs_storage._playerArgs {return false}
        if _storage._idx != rhs_storage._idx {return false}
        if _storage._adInfo != rhs_storage._adInfo {return false}
        if _storage._mask != rhs_storage._mask {return false}
        if _storage._fromType != rhs_storage._fromType {return false}
        if _storage._threePointV2 != rhs_storage._threePointV2 {return false}
        if _storage._threePointV3 != rhs_storage._threePointV3 {return false}
        if _storage._descButton != rhs_storage._descButton {return false}
        if _storage._threePointV4 != rhs_storage._threePointV4 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_Button: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Button"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "param"),
    3: .same(proto: "uri"),
    4: .same(proto: "event"),
    5: .same(proto: "selected"),
    6: .same(proto: "type"),
    7: .standard(proto: "event_v2"),
    8: .same(proto: "relation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.param) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.event) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.selected) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.eventV2) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._relation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if !self.param.isEmpty {
      try visitor.visitSingularStringField(value: self.param, fieldNumber: 2)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 3)
    }
    if !self.event.isEmpty {
      try visitor.visitSingularStringField(value: self.event, fieldNumber: 4)
    }
    if self.selected != 0 {
      try visitor.visitSingularInt32Field(value: self.selected, fieldNumber: 5)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 6)
    }
    if !self.eventV2.isEmpty {
      try visitor.visitSingularStringField(value: self.eventV2, fieldNumber: 7)
    }
    try { if let v = self._relation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_Button, rhs: Bilibili_App_Card_V1_Button) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.param != rhs.param {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.event != rhs.event {return false}
    if lhs.selected != rhs.selected {return false}
    if lhs.type != rhs.type {return false}
    if lhs.eventV2 != rhs.eventV2 {return false}
    if lhs._relation != rhs._relation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_ThreePoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreePoint"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dislike_reasons"),
    2: .same(proto: "feedbacks"),
    3: .standard(proto: "watch_later"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.dislikeReasons) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.feedbacks) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.watchLater) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dislikeReasons.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dislikeReasons, fieldNumber: 1)
    }
    if !self.feedbacks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.feedbacks, fieldNumber: 2)
    }
    if self.watchLater != 0 {
      try visitor.visitSingularInt32Field(value: self.watchLater, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_ThreePoint, rhs: Bilibili_App_Card_V1_ThreePoint) -> Bool {
    if lhs.dislikeReasons != rhs.dislikeReasons {return false}
    if lhs.feedbacks != rhs.feedbacks {return false}
    if lhs.watchLater != rhs.watchLater {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_DislikeReason: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DislikeReason"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_DislikeReason, rhs: Bilibili_App_Card_V1_DislikeReason) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_Args: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Args"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "up_id"),
    3: .standard(proto: "up_name"),
    4: .same(proto: "rid"),
    5: .same(proto: "rname"),
    6: .same(proto: "tid"),
    7: .same(proto: "tname"),
    8: .standard(proto: "track_id"),
    9: .same(proto: "state"),
    10: .standard(proto: "converge_type"),
    11: .same(proto: "aid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.upID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.upName) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.rid) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.rname) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.tid) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.tname) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.trackID) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.state) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.convergeType) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.aid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 1)
    }
    if self.upID != 0 {
      try visitor.visitSingularInt64Field(value: self.upID, fieldNumber: 2)
    }
    if !self.upName.isEmpty {
      try visitor.visitSingularStringField(value: self.upName, fieldNumber: 3)
    }
    if self.rid != 0 {
      try visitor.visitSingularInt32Field(value: self.rid, fieldNumber: 4)
    }
    if !self.rname.isEmpty {
      try visitor.visitSingularStringField(value: self.rname, fieldNumber: 5)
    }
    if self.tid != 0 {
      try visitor.visitSingularInt64Field(value: self.tid, fieldNumber: 6)
    }
    if !self.tname.isEmpty {
      try visitor.visitSingularStringField(value: self.tname, fieldNumber: 7)
    }
    if !self.trackID.isEmpty {
      try visitor.visitSingularStringField(value: self.trackID, fieldNumber: 8)
    }
    if !self.state.isEmpty {
      try visitor.visitSingularStringField(value: self.state, fieldNumber: 9)
    }
    if self.convergeType != 0 {
      try visitor.visitSingularInt32Field(value: self.convergeType, fieldNumber: 10)
    }
    if self.aid != 0 {
      try visitor.visitSingularInt64Field(value: self.aid, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_Args, rhs: Bilibili_App_Card_V1_Args) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.upID != rhs.upID {return false}
    if lhs.upName != rhs.upName {return false}
    if lhs.rid != rhs.rid {return false}
    if lhs.rname != rhs.rname {return false}
    if lhs.tid != rhs.tid {return false}
    if lhs.tname != rhs.tname {return false}
    if lhs.trackID != rhs.trackID {return false}
    if lhs.state != rhs.state {return false}
    if lhs.convergeType != rhs.convergeType {return false}
    if lhs.aid != rhs.aid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_PlayerArgs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerArgs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_live"),
    2: .same(proto: "aid"),
    3: .same(proto: "cid"),
    4: .standard(proto: "sub_type"),
    5: .standard(proto: "room_id"),
    7: .standard(proto: "ep_id"),
    8: .standard(proto: "is_preview"),
    9: .same(proto: "type"),
    10: .same(proto: "duration"),
    11: .standard(proto: "season_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.isLive) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.aid) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.cid) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.subType) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.roomID) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.epID) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.isPreview) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.duration) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.seasonID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isLive != 0 {
      try visitor.visitSingularInt32Field(value: self.isLive, fieldNumber: 1)
    }
    if self.aid != 0 {
      try visitor.visitSingularInt64Field(value: self.aid, fieldNumber: 2)
    }
    if self.cid != 0 {
      try visitor.visitSingularInt64Field(value: self.cid, fieldNumber: 3)
    }
    if self.subType != 0 {
      try visitor.visitSingularInt32Field(value: self.subType, fieldNumber: 4)
    }
    if self.roomID != 0 {
      try visitor.visitSingularInt64Field(value: self.roomID, fieldNumber: 5)
    }
    if self.epID != 0 {
      try visitor.visitSingularInt64Field(value: self.epID, fieldNumber: 7)
    }
    if self.isPreview != 0 {
      try visitor.visitSingularInt32Field(value: self.isPreview, fieldNumber: 8)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 9)
    }
    if self.duration != 0 {
      try visitor.visitSingularInt64Field(value: self.duration, fieldNumber: 10)
    }
    if self.seasonID != 0 {
      try visitor.visitSingularInt64Field(value: self.seasonID, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_PlayerArgs, rhs: Bilibili_App_Card_V1_PlayerArgs) -> Bool {
    if lhs.isLive != rhs.isLive {return false}
    if lhs.aid != rhs.aid {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs.subType != rhs.subType {return false}
    if lhs.roomID != rhs.roomID {return false}
    if lhs.epID != rhs.epID {return false}
    if lhs.isPreview != rhs.isPreview {return false}
    if lhs.type != rhs.type {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.seasonID != rhs.seasonID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_Mask: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Mask"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "avatar"),
    2: .same(proto: "button"),
  ]

  fileprivate class _StorageClass {
    var _avatar: Bilibili_App_Card_V1_Avatar? = nil
    var _button: Bilibili_App_Card_V1_Button? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _avatar = source._avatar
      _button = source._button
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._avatar) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._button) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._avatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._button {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_Mask, rhs: Bilibili_App_Card_V1_Mask) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._button != rhs_storage._button {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_Avatar: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Avatar"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cover"),
    2: .same(proto: "text"),
    3: .same(proto: "uri"),
    4: .same(proto: "type"),
    5: .same(proto: "event"),
    6: .standard(proto: "event_v2"),
    7: .standard(proto: "defalut_cover"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cover) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.event) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.eventV2) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.defalutCover) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cover.isEmpty {
      try visitor.visitSingularStringField(value: self.cover, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 3)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 4)
    }
    if !self.event.isEmpty {
      try visitor.visitSingularStringField(value: self.event, fieldNumber: 5)
    }
    if !self.eventV2.isEmpty {
      try visitor.visitSingularStringField(value: self.eventV2, fieldNumber: 6)
    }
    if self.defalutCover != 0 {
      try visitor.visitSingularInt32Field(value: self.defalutCover, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_Avatar, rhs: Bilibili_App_Card_V1_Avatar) -> Bool {
    if lhs.cover != rhs.cover {return false}
    if lhs.text != rhs.text {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.type != rhs.type {return false}
    if lhs.event != rhs.event {return false}
    if lhs.eventV2 != rhs.eventV2 {return false}
    if lhs.defalutCover != rhs.defalutCover {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_ThreePointV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreePointV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "subtitle"),
    3: .same(proto: "reasons"),
    4: .same(proto: "type"),
    5: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.subtitle) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.reasons) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.subtitle.isEmpty {
      try visitor.visitSingularStringField(value: self.subtitle, fieldNumber: 2)
    }
    if !self.reasons.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reasons, fieldNumber: 3)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 4)
    }
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_ThreePointV2, rhs: Bilibili_App_Card_V1_ThreePointV2) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.subtitle != rhs.subtitle {return false}
    if lhs.reasons != rhs.reasons {return false}
    if lhs.type != rhs.type {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_ThreePointV3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreePointV3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .standard(proto: "selected_title"),
    3: .same(proto: "subtitle"),
    4: .same(proto: "reasons"),
    5: .same(proto: "type"),
    6: .same(proto: "id"),
    7: .same(proto: "selected"),
    8: .same(proto: "icon"),
    9: .standard(proto: "selected_icon"),
    10: .same(proto: "url"),
    11: .standard(proto: "default_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.selectedTitle) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.subtitle) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.reasons) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.selected) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.selectedIcon) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self.defaultID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.selectedTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.selectedTitle, fieldNumber: 2)
    }
    if !self.subtitle.isEmpty {
      try visitor.visitSingularStringField(value: self.subtitle, fieldNumber: 3)
    }
    if !self.reasons.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reasons, fieldNumber: 4)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 5)
    }
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 6)
    }
    if self.selected != 0 {
      try visitor.visitSingularInt32Field(value: self.selected, fieldNumber: 7)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 8)
    }
    if !self.selectedIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.selectedIcon, fieldNumber: 9)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 10)
    }
    if self.defaultID != 0 {
      try visitor.visitSingularInt32Field(value: self.defaultID, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_ThreePointV3, rhs: Bilibili_App_Card_V1_ThreePointV3) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.selectedTitle != rhs.selectedTitle {return false}
    if lhs.subtitle != rhs.subtitle {return false}
    if lhs.reasons != rhs.reasons {return false}
    if lhs.type != rhs.type {return false}
    if lhs.id != rhs.id {return false}
    if lhs.selected != rhs.selected {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.selectedIcon != rhs.selectedIcon {return false}
    if lhs.url != rhs.url {return false}
    if lhs.defaultID != rhs.defaultID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_ThreePointV4: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreePointV4"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "share_plane"),
    2: .standard(proto: "watch_later"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._sharePlane) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._watchLater) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sharePlane {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._watchLater {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_ThreePointV4, rhs: Bilibili_App_Card_V1_ThreePointV4) -> Bool {
    if lhs._sharePlane != rhs._sharePlane {return false}
    if lhs._watchLater != rhs._watchLater {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_SharePlane: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SharePlane"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .standard(proto: "share_subtitle"),
    3: .same(proto: "desc"),
    4: .same(proto: "cover"),
    5: .same(proto: "aid"),
    6: .same(proto: "bvid"),
    7: .standard(proto: "share_to"),
    8: .same(proto: "author"),
    9: .standard(proto: "author_id"),
    10: .standard(proto: "short_link"),
    11: .standard(proto: "play_number"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.shareSubtitle) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.cover) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.aid) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.bvid) }()
      case 7: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBool>.self, value: &self.shareTo) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.author) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.authorID) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.shortLink) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.playNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.shareSubtitle.isEmpty {
      try visitor.visitSingularStringField(value: self.shareSubtitle, fieldNumber: 2)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 3)
    }
    if !self.cover.isEmpty {
      try visitor.visitSingularStringField(value: self.cover, fieldNumber: 4)
    }
    if self.aid != 0 {
      try visitor.visitSingularInt64Field(value: self.aid, fieldNumber: 5)
    }
    if !self.bvid.isEmpty {
      try visitor.visitSingularStringField(value: self.bvid, fieldNumber: 6)
    }
    if !self.shareTo.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBool>.self, value: self.shareTo, fieldNumber: 7)
    }
    if !self.author.isEmpty {
      try visitor.visitSingularStringField(value: self.author, fieldNumber: 8)
    }
    if self.authorID != 0 {
      try visitor.visitSingularInt64Field(value: self.authorID, fieldNumber: 9)
    }
    if !self.shortLink.isEmpty {
      try visitor.visitSingularStringField(value: self.shortLink, fieldNumber: 10)
    }
    if !self.playNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.playNumber, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_SharePlane, rhs: Bilibili_App_Card_V1_SharePlane) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.shareSubtitle != rhs.shareSubtitle {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.cover != rhs.cover {return false}
    if lhs.aid != rhs.aid {return false}
    if lhs.bvid != rhs.bvid {return false}
    if lhs.shareTo != rhs.shareTo {return false}
    if lhs.author != rhs.author {return false}
    if lhs.authorID != rhs.authorID {return false}
    if lhs.shortLink != rhs.shortLink {return false}
    if lhs.playNumber != rhs.playNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_WatchLater: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WatchLater"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "aid"),
    2: .same(proto: "bvid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.aid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.bvid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.aid != 0 {
      try visitor.visitSingularInt64Field(value: self.aid, fieldNumber: 1)
    }
    if !self.bvid.isEmpty {
      try visitor.visitSingularStringField(value: self.bvid, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_WatchLater, rhs: Bilibili_App_Card_V1_WatchLater) -> Bool {
    if lhs.aid != rhs.aid {return false}
    if lhs.bvid != rhs.bvid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_ReasonStyle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReasonStyle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .standard(proto: "text_color"),
    3: .standard(proto: "bg_color"),
    4: .standard(proto: "border_color"),
    5: .standard(proto: "icon_url"),
    6: .standard(proto: "text_color_night"),
    7: .standard(proto: "bg_color_night"),
    8: .standard(proto: "border_color_night"),
    9: .standard(proto: "icon_night_url"),
    10: .standard(proto: "bg_style"),
    11: .same(proto: "uri"),
    12: .standard(proto: "icon_bg_url"),
    13: .same(proto: "event"),
    14: .standard(proto: "event_v2"),
    15: .standard(proto: "right_icon_type"),
    16: .standard(proto: "left_icon_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.textColor) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.bgColor) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.borderColor) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.iconURL) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.textColorNight) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.bgColorNight) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.borderColorNight) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.iconNightURL) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.bgStyle) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.iconBgURL) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.event) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self.eventV2) }()
      case 15: try { try decoder.decodeSingularInt32Field(value: &self.rightIconType) }()
      case 16: try { try decoder.decodeSingularStringField(value: &self.leftIconType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if !self.textColor.isEmpty {
      try visitor.visitSingularStringField(value: self.textColor, fieldNumber: 2)
    }
    if !self.bgColor.isEmpty {
      try visitor.visitSingularStringField(value: self.bgColor, fieldNumber: 3)
    }
    if !self.borderColor.isEmpty {
      try visitor.visitSingularStringField(value: self.borderColor, fieldNumber: 4)
    }
    if !self.iconURL.isEmpty {
      try visitor.visitSingularStringField(value: self.iconURL, fieldNumber: 5)
    }
    if !self.textColorNight.isEmpty {
      try visitor.visitSingularStringField(value: self.textColorNight, fieldNumber: 6)
    }
    if !self.bgColorNight.isEmpty {
      try visitor.visitSingularStringField(value: self.bgColorNight, fieldNumber: 7)
    }
    if !self.borderColorNight.isEmpty {
      try visitor.visitSingularStringField(value: self.borderColorNight, fieldNumber: 8)
    }
    if !self.iconNightURL.isEmpty {
      try visitor.visitSingularStringField(value: self.iconNightURL, fieldNumber: 9)
    }
    if self.bgStyle != 0 {
      try visitor.visitSingularInt32Field(value: self.bgStyle, fieldNumber: 10)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 11)
    }
    if !self.iconBgURL.isEmpty {
      try visitor.visitSingularStringField(value: self.iconBgURL, fieldNumber: 12)
    }
    if !self.event.isEmpty {
      try visitor.visitSingularStringField(value: self.event, fieldNumber: 13)
    }
    if !self.eventV2.isEmpty {
      try visitor.visitSingularStringField(value: self.eventV2, fieldNumber: 14)
    }
    if self.rightIconType != 0 {
      try visitor.visitSingularInt32Field(value: self.rightIconType, fieldNumber: 15)
    }
    if !self.leftIconType.isEmpty {
      try visitor.visitSingularStringField(value: self.leftIconType, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_ReasonStyle, rhs: Bilibili_App_Card_V1_ReasonStyle) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.textColor != rhs.textColor {return false}
    if lhs.bgColor != rhs.bgColor {return false}
    if lhs.borderColor != rhs.borderColor {return false}
    if lhs.iconURL != rhs.iconURL {return false}
    if lhs.textColorNight != rhs.textColorNight {return false}
    if lhs.bgColorNight != rhs.bgColorNight {return false}
    if lhs.borderColorNight != rhs.borderColorNight {return false}
    if lhs.iconNightURL != rhs.iconNightURL {return false}
    if lhs.bgStyle != rhs.bgStyle {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.iconBgURL != rhs.iconBgURL {return false}
    if lhs.event != rhs.event {return false}
    if lhs.eventV2 != rhs.eventV2 {return false}
    if lhs.rightIconType != rhs.rightIconType {return false}
    if lhs.leftIconType != rhs.leftIconType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_LikeButton: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LikeButton"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Aid"),
    2: .same(proto: "count"),
    3: .standard(proto: "show_count"),
    4: .same(proto: "event"),
    5: .same(proto: "selected"),
    6: .standard(proto: "event_v2"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.aid) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.showCount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.event) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.selected) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.eventV2) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.aid != 0 {
      try visitor.visitSingularInt64Field(value: self.aid, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 2)
    }
    if self.showCount != false {
      try visitor.visitSingularBoolField(value: self.showCount, fieldNumber: 3)
    }
    if !self.event.isEmpty {
      try visitor.visitSingularStringField(value: self.event, fieldNumber: 4)
    }
    if self.selected != 0 {
      try visitor.visitSingularInt32Field(value: self.selected, fieldNumber: 5)
    }
    if !self.eventV2.isEmpty {
      try visitor.visitSingularStringField(value: self.eventV2, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_LikeButton, rhs: Bilibili_App_Card_V1_LikeButton) -> Bool {
    if lhs.aid != rhs.aid {return false}
    if lhs.count != rhs.count {return false}
    if lhs.showCount != rhs.showCount {return false}
    if lhs.event != rhs.event {return false}
    if lhs.selected != rhs.selected {return false}
    if lhs.eventV2 != rhs.eventV2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_Up: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Up"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "desc"),
    4: .same(proto: "avatar"),
    5: .standard(proto: "official_icon"),
    6: .standard(proto: "desc_button"),
    7: .same(proto: "cooperation"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _name: String = String()
    var _desc: String = String()
    var _avatar: Bilibili_App_Card_V1_Avatar? = nil
    var _officialIcon: Int32 = 0
    var _descButton: Bilibili_App_Card_V1_Button? = nil
    var _cooperation: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _name = source._name
      _desc = source._desc
      _avatar = source._avatar
      _officialIcon = source._officialIcon
      _descButton = source._descButton
      _cooperation = source._cooperation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._desc) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._avatar) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._officialIcon) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._descButton) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._cooperation) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if !_storage._desc.isEmpty {
        try visitor.visitSingularStringField(value: _storage._desc, fieldNumber: 3)
      }
      try { if let v = _storage._avatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if _storage._officialIcon != 0 {
        try visitor.visitSingularInt32Field(value: _storage._officialIcon, fieldNumber: 5)
      }
      try { if let v = _storage._descButton {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if !_storage._cooperation.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cooperation, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_Up, rhs: Bilibili_App_Card_V1_Up) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._desc != rhs_storage._desc {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._officialIcon != rhs_storage._officialIcon {return false}
        if _storage._descButton != rhs_storage._descButton {return false}
        if _storage._cooperation != rhs_storage._cooperation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_App_Card_V1_Relation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Relation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "is_follow"),
    3: .standard(proto: "is_followed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.isFollow) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.isFollowed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.isFollow != 0 {
      try visitor.visitSingularInt32Field(value: self.isFollow, fieldNumber: 2)
    }
    if self.isFollowed != 0 {
      try visitor.visitSingularInt32Field(value: self.isFollowed, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_App_Card_V1_Relation, rhs: Bilibili_App_Card_V1_Relation) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.isFollow != rhs.isFollow {return false}
    if lhs.isFollowed != rhs.isFollowed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
