// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bilibili/metadata/device/device.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 设备信息
/// gRPC头部:x-bili-device-bin
struct Bilibili_Metadata_Device_Device {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 产品id
  /// 粉 白 蓝 直播姬 HD 海外 OTT 漫画 TV野版 小视频 网易漫画 网易漫画 网易漫画HD 国际版
  /// 1  2  3    4    5   6    7   8     9     10      11       12       13       14
  var appID: Int32 = 0

  /// 构建id
  var build: Int32 = 0

  /// 设备buvid
  var buvid: String = String()

  /// 包类型
  var mobiApp: String = String()

  /// 平台类型
  /// ios android
  var platform: String = String()

  /// 设备类型
  var device: String = String()

  /// 渠道
  var channel: String = String()

  /// 手机品牌
  var brand: String = String()

  /// 手机型号
  var model: String = String()

  /// 系统版本
  var osver: String = String()

  /// 本地设备指纹
  var fpLocal: String = String()

  /// 远程设备指纹
  var fpRemote: String = String()

  /// APP版本号
  var versionName: String = String()

  /// 设备指纹, 不区分本地或远程设备指纹，作为推送目标的索引
  var fp: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Bilibili_Metadata_Device_Device: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bilibili.metadata.device"

extension Bilibili_Metadata_Device_Device: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Device"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .same(proto: "build"),
    3: .same(proto: "buvid"),
    4: .standard(proto: "mobi_app"),
    5: .same(proto: "platform"),
    6: .same(proto: "device"),
    7: .same(proto: "channel"),
    8: .same(proto: "brand"),
    9: .same(proto: "model"),
    10: .same(proto: "osver"),
    11: .standard(proto: "fp_local"),
    12: .standard(proto: "fp_remote"),
    13: .standard(proto: "version_name"),
    14: .same(proto: "fp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.build) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.buvid) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.mobiApp) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.device) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.channel) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.brand) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.model) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.osver) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.fpLocal) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.fpRemote) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.versionName) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self.fp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.appID != 0 {
      try visitor.visitSingularInt32Field(value: self.appID, fieldNumber: 1)
    }
    if self.build != 0 {
      try visitor.visitSingularInt32Field(value: self.build, fieldNumber: 2)
    }
    if !self.buvid.isEmpty {
      try visitor.visitSingularStringField(value: self.buvid, fieldNumber: 3)
    }
    if !self.mobiApp.isEmpty {
      try visitor.visitSingularStringField(value: self.mobiApp, fieldNumber: 4)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 5)
    }
    if !self.device.isEmpty {
      try visitor.visitSingularStringField(value: self.device, fieldNumber: 6)
    }
    if !self.channel.isEmpty {
      try visitor.visitSingularStringField(value: self.channel, fieldNumber: 7)
    }
    if !self.brand.isEmpty {
      try visitor.visitSingularStringField(value: self.brand, fieldNumber: 8)
    }
    if !self.model.isEmpty {
      try visitor.visitSingularStringField(value: self.model, fieldNumber: 9)
    }
    if !self.osver.isEmpty {
      try visitor.visitSingularStringField(value: self.osver, fieldNumber: 10)
    }
    if !self.fpLocal.isEmpty {
      try visitor.visitSingularStringField(value: self.fpLocal, fieldNumber: 11)
    }
    if !self.fpRemote.isEmpty {
      try visitor.visitSingularStringField(value: self.fpRemote, fieldNumber: 12)
    }
    if !self.versionName.isEmpty {
      try visitor.visitSingularStringField(value: self.versionName, fieldNumber: 13)
    }
    if !self.fp.isEmpty {
      try visitor.visitSingularStringField(value: self.fp, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Metadata_Device_Device, rhs: Bilibili_Metadata_Device_Device) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.build != rhs.build {return false}
    if lhs.buvid != rhs.buvid {return false}
    if lhs.mobiApp != rhs.mobiApp {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.device != rhs.device {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.brand != rhs.brand {return false}
    if lhs.model != rhs.model {return false}
    if lhs.osver != rhs.osver {return false}
    if lhs.fpLocal != rhs.fpLocal {return false}
    if lhs.fpRemote != rhs.fpRemote {return false}
    if lhs.versionName != rhs.versionName {return false}
    if lhs.fp != rhs.fp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
